
hu3-at90can128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000cd6  00000d6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000182  00800110  00800110  00000d7a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000229c  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f5f  00000000  00000000  00003220  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ed8  00000000  00000000  0000417f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  00005058  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b69  00000000  00000000  00005438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ea7  00000000  00000000  00005fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00006e48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	6f c1       	rjmp	.+734    	; 0x328 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	9a c3       	rjmp	.+1844   	; 0x786 <__vector_20>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e6 ed       	ldi	r30, 0xD6	; 214
  a8:	fc e0       	ldi	r31, 0x0C	; 12
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 31       	cpi	r26, 0x10	; 16
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	22 e0       	ldi	r18, 0x02	; 2
  bc:	a0 e1       	ldi	r26, 0x10	; 16
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a2 39       	cpi	r26, 0x92	; 146
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	04 d5       	rcall	.+2568   	; 0xad4 <main>
  cc:	02 c6       	rjmp	.+3076   	; 0xcd2 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <can_init>:
			tx_msgbuf.write_pos = 0;
		}
	}
	
	CANPAGE = cp_tmp;
}
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  e2:	22 e0       	ldi	r18, 0x02	; 2
  e4:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  e8:	24 e0       	ldi	r18, 0x04	; 4
  ea:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
  ee:	23 e1       	ldi	r18, 0x13	; 19
  f0:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
  f4:	2f e7       	ldi	r18, 0x7F	; 127
  f6:	20 93 df 00 	sts	0x00DF, r18	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 100:	20 eb       	ldi	r18, 0xB0	; 176
 102:	20 93 db 00 	sts	0x00DB, r18	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 106:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 10a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 10e:	4f ef       	ldi	r20, 0xFF	; 255
 110:	5f ef       	ldi	r21, 0xFF	; 255
 112:	ba 01       	movw	r22, r20
 114:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 118:	50 93 f5 00 	sts	0x00F5, r21	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 11c:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 120:	70 93 f7 00 	sts	0x00F7, r23	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	aa 1f       	adc	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	aa 1f       	adc	r26, r26
 136:	bb 1f       	adc	r27, r27
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	aa 1f       	adc	r26, r26
 13e:	bb 1f       	adc	r27, r27
 140:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 144:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 148:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 14c:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 150:	80 e1       	ldi	r24, 0x10	; 16
 152:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 156:	0d ee       	ldi	r16, 0xED	; 237
 158:	10 e0       	ldi	r17, 0x00	; 0
 15a:	2e ee       	ldi	r18, 0xEE	; 238
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	c4 ef       	ldi	r28, 0xF4	; 244
 160:	d0 e0       	ldi	r29, 0x00	; 0
 162:	a0 ef       	ldi	r26, 0xF0	; 240
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	0f 2e       	mov	r0, r31
 168:	ff ee       	ldi	r31, 0xEF	; 239
 16a:	ef 2e       	mov	r14, r31
 16c:	f1 2c       	mov	r15, r1
 16e:	f0 2d       	mov	r31, r0
 170:	f8 01       	movw	r30, r16
 172:	80 83       	st	Z, r24
 174:	f9 01       	movw	r30, r18
 176:	10 82       	st	Z, r1
 178:	48 83       	st	Y, r20
 17a:	59 83       	std	Y+1, r21	; 0x01
 17c:	6a 83       	std	Y+2, r22	; 0x02
 17e:	7b 83       	std	Y+3, r23	; 0x03
 180:	1d 92       	st	X+, r1
 182:	1d 92       	st	X+, r1
 184:	1d 92       	st	X+, r1
 186:	1c 92       	st	X, r1
 188:	13 97       	sbiw	r26, 0x03	; 3
 18a:	f7 01       	movw	r30, r14
 18c:	10 82       	st	Z, r1
 18e:	80 5f       	subi	r24, 0xF0	; 240
 190:	80 3f       	cpi	r24, 0xF0	; 240
 192:	71 f7       	brne	.-36     	; 0x170 <can_init+0xa0>
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	ff 90       	pop	r15
 1a4:	ef 90       	pop	r14
 1a6:	08 95       	ret

000001a8 <can_filter>:
 1a8:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1ac:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <rx_msgbuf+0x2>
 1b0:	2e 30       	cpi	r18, 0x0E	; 14
 1b2:	98 f5       	brcc	.+102    	; 0x21a <can_filter+0x72>
 1b4:	aa e5       	ldi	r26, 0x5A	; 90
 1b6:	b1 e0       	ldi	r27, 0x01	; 1
 1b8:	12 96       	adiw	r26, 0x02	; 2
 1ba:	ec 91       	ld	r30, X
 1bc:	12 97       	sbiw	r26, 0x02	; 2
 1be:	2b e0       	ldi	r18, 0x0B	; 11
 1c0:	e2 9f       	mul	r30, r18
 1c2:	f0 01       	movw	r30, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	e6 5a       	subi	r30, 0xA6	; 166
 1c8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ca:	94 83       	std	Z+4, r25	; 0x04
 1cc:	83 83       	std	Z+3, r24	; 0x03
 1ce:	12 96       	adiw	r26, 0x02	; 2
 1d0:	2c 91       	ld	r18, X
 1d2:	12 97       	sbiw	r26, 0x02	; 2
 1d4:	2f 5f       	subi	r18, 0xFF	; 255
 1d6:	12 96       	adiw	r26, 0x02	; 2
 1d8:	2c 93       	st	X, r18
 1da:	12 97       	sbiw	r26, 0x02	; 2
 1dc:	12 96       	adiw	r26, 0x02	; 2
 1de:	2c 91       	ld	r18, X
 1e0:	22 95       	swap	r18
 1e2:	20 7f       	andi	r18, 0xF0	; 240
 1e4:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1e8:	a0 e0       	ldi	r26, 0x00	; 0
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	aa 1f       	adc	r26, r26
 1f2:	bb 1f       	adc	r27, r27
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	aa 1f       	adc	r26, r26
 1fa:	bb 1f       	adc	r27, r27
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	aa 1f       	adc	r26, r26
 202:	bb 1f       	adc	r27, r27
 204:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 208:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 20c:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 210:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 214:	80 e9       	ldi	r24, 0x90	; 144
 216:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 21a:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 21e:	08 95       	ret

00000220 <can_message_available>:
 220:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <rx_msgbuf>
 224:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <rx_msgbuf+0x1>
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	23 2b       	or	r18, r19
 22c:	09 f4       	brne	.+2      	; 0x230 <can_message_available+0x10>
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	08 95       	ret

00000232 <can_receive>:
 232:	8f 92       	push	r8
 234:	9f 92       	push	r9
 236:	af 92       	push	r10
 238:	bf 92       	push	r11
 23a:	cf 92       	push	r12
 23c:	df 92       	push	r13
 23e:	ef 92       	push	r14
 240:	ff 92       	push	r15
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <rx_msgbuf+0x2>
 24e:	22 23       	and	r18, r18
 250:	09 f4       	brne	.+2      	; 0x254 <can_receive+0x22>
 252:	5d c0       	rjmp	.+186    	; 0x30e <can_receive+0xdc>
 254:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <rx_msgbuf>
 258:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <rx_msgbuf+0x1>
 25c:	20 fd       	sbrc	r18, 0
 25e:	0e c0       	rjmp	.+28     	; 0x27c <can_receive+0x4a>
 260:	a0 e0       	ldi	r26, 0x00	; 0
 262:	01 e0       	ldi	r16, 0x01	; 1
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	ea e5       	ldi	r30, 0x5A	; 90
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	4a c0       	rjmp	.+148    	; 0x300 <can_receive+0xce>
 26c:	20 81       	ld	r18, Z
 26e:	31 81       	ldd	r19, Z+1	; 0x01
 270:	20 23       	and	r18, r16
 272:	31 23       	and	r19, r17
 274:	23 2b       	or	r18, r19
 276:	09 f4       	brne	.+2      	; 0x27a <can_receive+0x48>
 278:	43 c0       	rjmp	.+134    	; 0x300 <can_receive+0xce>
 27a:	03 c0       	rjmp	.+6      	; 0x282 <can_receive+0x50>
 27c:	a0 e0       	ldi	r26, 0x00	; 0
 27e:	01 e0       	ldi	r16, 0x01	; 1
 280:	10 e0       	ldi	r17, 0x00	; 0
 282:	0f 2e       	mov	r0, r31
 284:	fa e5       	ldi	r31, 0x5A	; 90
 286:	ef 2e       	mov	r14, r31
 288:	f1 e0       	ldi	r31, 0x01	; 1
 28a:	ff 2e       	mov	r15, r31
 28c:	f0 2d       	mov	r31, r0
 28e:	68 01       	movw	r12, r16
 290:	c0 94       	com	r12
 292:	d0 94       	com	r13
 294:	2b e0       	ldi	r18, 0x0B	; 11
 296:	a2 9f       	mul	r26, r18
 298:	d0 01       	movw	r26, r0
 29a:	11 24       	eor	r1, r1
 29c:	a6 5a       	subi	r26, 0xA6	; 166
 29e:	be 4f       	sbci	r27, 0xFE	; 254
 2a0:	5d 01       	movw	r10, r26
 2a2:	e3 e0       	ldi	r30, 0x03	; 3
 2a4:	ae 0e       	add	r10, r30
 2a6:	b1 1c       	adc	r11, r1
 2a8:	ed 01       	movw	r28, r26
 2aa:	25 96       	adiw	r28, 0x05	; 5
 2ac:	f7 01       	movw	r30, r14
 2ae:	20 81       	ld	r18, Z
 2b0:	31 81       	ldd	r19, Z+1	; 0x01
 2b2:	2c 21       	and	r18, r12
 2b4:	3d 21       	and	r19, r13
 2b6:	31 83       	std	Z+1, r19	; 0x01
 2b8:	20 83       	st	Z, r18
 2ba:	f5 01       	movw	r30, r10
 2bc:	20 81       	ld	r18, Z
 2be:	31 81       	ldd	r19, Z+1	; 0x01
 2c0:	fc 01       	movw	r30, r24
 2c2:	31 83       	std	Z+1, r19	; 0x01
 2c4:	20 83       	st	Z, r18
 2c6:	28 81       	ld	r18, Y
 2c8:	fa 01       	movw	r30, r20
 2ca:	20 83       	st	Z, r18
 2cc:	28 81       	ld	r18, Y
 2ce:	22 23       	and	r18, r18
 2d0:	79 f0       	breq	.+30     	; 0x2f0 <can_receive+0xbe>
 2d2:	91 2c       	mov	r9, r1
 2d4:	29 2d       	mov	r18, r9
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	fd 01       	movw	r30, r26
 2da:	e2 0f       	add	r30, r18
 2dc:	f3 1f       	adc	r31, r19
 2de:	86 80       	ldd	r8, Z+6	; 0x06
 2e0:	26 0f       	add	r18, r22
 2e2:	37 1f       	adc	r19, r23
 2e4:	f9 01       	movw	r30, r18
 2e6:	80 82       	st	Z, r8
 2e8:	93 94       	inc	r9
 2ea:	28 81       	ld	r18, Y
 2ec:	92 16       	cp	r9, r18
 2ee:	90 f3       	brcs	.-28     	; 0x2d4 <can_receive+0xa2>
 2f0:	f7 01       	movw	r30, r14
 2f2:	20 81       	ld	r18, Z
 2f4:	31 81       	ldd	r19, Z+1	; 0x01
 2f6:	20 23       	and	r18, r16
 2f8:	31 23       	and	r19, r17
 2fa:	23 2b       	or	r18, r19
 2fc:	b9 f6       	brne	.-82     	; 0x2ac <can_receive+0x7a>
 2fe:	07 c0       	rjmp	.+14     	; 0x30e <can_receive+0xdc>
 300:	00 0f       	add	r16, r16
 302:	11 1f       	adc	r17, r17
 304:	af 5f       	subi	r26, 0xFF	; 255
 306:	22 81       	ldd	r18, Z+2	; 0x02
 308:	a2 17       	cp	r26, r18
 30a:	08 f4       	brcc	.+2      	; 0x30e <can_receive+0xdc>
 30c:	af cf       	rjmp	.-162    	; 0x26c <can_receive+0x3a>
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	df 90       	pop	r13
 31c:	cf 90       	pop	r12
 31e:	bf 90       	pop	r11
 320:	af 90       	pop	r10
 322:	9f 90       	pop	r9
 324:	8f 90       	pop	r8
 326:	08 95       	ret

00000328 <__vector_18>:

// ------------------------------------------------- Interrupt Service Routines

#if defined CANIT_vect
ISR(CANIT_vect) {
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	0b b6       	in	r0, 0x3b	; 59
 334:	0f 92       	push	r0
 336:	2f 93       	push	r18
 338:	3f 93       	push	r19
 33a:	4f 93       	push	r20
 33c:	6f 93       	push	r22
 33e:	7f 93       	push	r23
 340:	8f 93       	push	r24
 342:	9f 93       	push	r25
 344:	af 93       	push	r26
 346:	bf 93       	push	r27
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	ef 93       	push	r30
 34e:	ff 93       	push	r31
#elif defined CAN_INT_vect
ISR(CAN_INT_vect) {
#endif
	const uint8_t cp_tmp = CANPAGE;
 350:	ed ee       	ldi	r30, 0xED	; 237
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	40 81       	ld	r20, Z
	uint8_t bufi, cp_max, cp, msgi;

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
 356:	10 82       	st	Z, r1
	if (CANSTMOB & _BV(TXOK) && tx_msgbuf.read_pos != tx_msgbuf.write_pos) {
 358:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 35c:	86 ff       	sbrs	r24, 6
 35e:	43 c0       	rjmp	.+134    	; 0x3e6 <__vector_18+0xbe>
 360:	e0 e1       	ldi	r30, 0x10	; 16
 362:	f1 e0       	ldi	r31, 0x01	; 1
 364:	91 81       	ldd	r25, Z+1	; 0x01
 366:	80 81       	ld	r24, Z
 368:	98 17       	cp	r25, r24
 36a:	e9 f1       	breq	.+122    	; 0x3e6 <__vector_18+0xbe>
		bufi = tx_msgbuf.read_pos;
 36c:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <__data_end+0x1>
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].msg_size; msgi++) {
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	fb 01       	movw	r30, r22
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	e6 0f       	add	r30, r22
 382:	f7 1f       	adc	r31, r23
 384:	e0 5f       	subi	r30, 0xF0	; 240
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	82 81       	ldd	r24, Z+2	; 0x02
 38a:	88 23       	and	r24, r24
 38c:	79 f0       	breq	.+30     	; 0x3ac <__vector_18+0x84>
 38e:	80 e0       	ldi	r24, 0x00	; 0
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
 390:	9f 01       	movw	r18, r30
 392:	ca ef       	ldi	r28, 0xFA	; 250
 394:	d0 e0       	ldi	r29, 0x00	; 0

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
	if (CANSTMOB & _BV(TXOK) && tx_msgbuf.read_pos != tx_msgbuf.write_pos) {
		bufi = tx_msgbuf.read_pos;
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].msg_size; msgi++) {
 396:	df 01       	movw	r26, r30
 398:	12 96       	adiw	r26, 0x02	; 2
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
 39a:	f9 01       	movw	r30, r18
 39c:	e8 0f       	add	r30, r24
 39e:	f1 1d       	adc	r31, r1
 3a0:	93 81       	ldd	r25, Z+3	; 0x03
 3a2:	98 83       	st	Y, r25

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
	if (CANSTMOB & _BV(TXOK) && tx_msgbuf.read_pos != tx_msgbuf.write_pos) {
		bufi = tx_msgbuf.read_pos;
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].msg_size; msgi++) {
 3a4:	8f 5f       	subi	r24, 0xFF	; 255
 3a6:	9c 91       	ld	r25, X
 3a8:	89 17       	cp	r24, r25
 3aa:	b8 f3       	brcs	.-18     	; 0x39a <__vector_18+0x72>
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
		}
#if defined CAN_REV_2A
		CANCDMOB = _BV(CONMOB0) | tx_msgbuf.msgs[bufi].msg_size;
#elif defined CAN_REV_2B
		CANCDMOB = _BV(CONMOB0) | _BV(IDE) | tx_msgbuf.msgs[bufi].msg_size;
 3ac:	fb 01       	movw	r30, r22
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	ee 0f       	add	r30, r30
 3b4:	ff 1f       	adc	r31, r31
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	6e 0f       	add	r22, r30
 3bc:	7f 1f       	adc	r23, r31
 3be:	fb 01       	movw	r30, r22
 3c0:	e0 5f       	subi	r30, 0xF0	; 240
 3c2:	fe 4f       	sbci	r31, 0xFE	; 254
 3c4:	82 81       	ldd	r24, Z+2	; 0x02
 3c6:	80 65       	ori	r24, 0x50	; 80
 3c8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
#endif
		if (tx_msgbuf.read_pos < CAN_TX_MSGBUF_SIZE-1) {
 3cc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__data_end+0x1>
 3d0:	87 30       	cpi	r24, 0x07	; 7
 3d2:	30 f4       	brcc	.+12     	; 0x3e0 <__vector_18+0xb8>
			tx_msgbuf.read_pos++;
 3d4:	e0 e1       	ldi	r30, 0x10	; 16
 3d6:	f1 e0       	ldi	r31, 0x01	; 1
 3d8:	81 81       	ldd	r24, Z+1	; 0x01
 3da:	8f 5f       	subi	r24, 0xFF	; 255
 3dc:	81 83       	std	Z+1, r24	; 0x01
 3de:	61 c0       	rjmp	.+194    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		} else {
			tx_msgbuf.read_pos = 0;
 3e0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 3e4:	5e c0       	rjmp	.+188    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
 3e6:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <rx_msgbuf+0x2>
 3ea:	92 95       	swap	r25
 3ec:	90 7f       	andi	r25, 0xF0	; 240
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 3ee:	90 31       	cpi	r25, 0x10	; 16
 3f0:	08 f4       	brcc	.+2      	; 0x3f4 <__vector_18+0xcc>
 3f2:	57 c0       	rjmp	.+174    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			CANPAGE = cp;
 3f4:	80 e1       	ldi	r24, 0x10	; 16
 3f6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 3fa:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 3fe:	85 fd       	sbrc	r24, 5
 400:	0b c0       	rjmp	.+22     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 402:	e0 e1       	ldi	r30, 0x10	; 16

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
			CANPAGE = cp;
 404:	cd ee       	ldi	r28, 0xED	; 237
 406:	d0 e0       	ldi	r29, 0x00	; 0
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 408:	ae ee       	ldi	r26, 0xEE	; 238
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	46 c0       	rjmp	.+140    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
			CANPAGE = cp;
 40e:	e8 83       	st	Y, r30
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 410:	8c 91       	ld	r24, X
 412:	85 ff       	sbrs	r24, 5
 414:	42 c0       	rjmp	.+132    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 416:	01 c0       	rjmp	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 418:	e0 e1       	ldi	r30, 0x10	; 16
			CANPAGE = cp;
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
 41a:	aa e5       	ldi	r26, 0x5A	; 90
 41c:	b1 e0       	ldi	r27, 0x01	; 1
 41e:	2d 91       	ld	r18, X+
 420:	3c 91       	ld	r19, X
 422:	11 97       	sbiw	r26, 0x01	; 1
 424:	e2 95       	swap	r30
 426:	ef 70       	andi	r30, 0x0F	; 15
 428:	e1 50       	subi	r30, 0x01	; 1
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 2e       	mov	r0, r30
 430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 43a:	82 2b       	or	r24, r18
 43c:	93 2b       	or	r25, r19
 43e:	11 96       	adiw	r26, 0x01	; 1
 440:	9c 93       	st	X, r25
 442:	8e 93       	st	-X, r24
				rx_msgbuf.msgs[bufi].msg_size = CANCDMOB & 0x0F;
 444:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 448:	8f 70       	andi	r24, 0x0F	; 15
 44a:	6e 2f       	mov	r22, r30
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	9b e0       	ldi	r25, 0x0B	; 11
 450:	e9 9f       	mul	r30, r25
 452:	f0 01       	movw	r30, r0
 454:	11 24       	eor	r1, r1
 456:	e6 5a       	subi	r30, 0xA6	; 166
 458:	fe 4f       	sbci	r31, 0xFE	; 254
 45a:	85 83       	std	Z+5, r24	; 0x05
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].msg_size; msgi++) {
 45c:	85 81       	ldd	r24, Z+5	; 0x05
 45e:	88 23       	and	r24, r24
 460:	b1 f0       	breq	.+44     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 462:	80 e0       	ldi	r24, 0x00	; 0
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
 464:	ca ef       	ldi	r28, 0xFA	; 250
 466:	d0 e0       	ldi	r29, 0x00	; 0
 468:	9b e0       	ldi	r25, 0x0B	; 11
 46a:	96 9f       	mul	r25, r22
 46c:	90 01       	movw	r18, r0
 46e:	97 9f       	mul	r25, r23
 470:	30 0d       	add	r19, r0
 472:	11 24       	eor	r1, r1
 474:	26 5a       	subi	r18, 0xA6	; 166
 476:	3e 4f       	sbci	r19, 0xFE	; 254
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
				rx_msgbuf.msgs[bufi].msg_size = CANCDMOB & 0x0F;
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].msg_size; msgi++) {
 478:	d9 01       	movw	r26, r18
 47a:	15 96       	adiw	r26, 0x05	; 5
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
 47c:	98 81       	ld	r25, Y
 47e:	f9 01       	movw	r30, r18
 480:	e8 0f       	add	r30, r24
 482:	f1 1d       	adc	r31, r1
 484:	96 83       	std	Z+6, r25	; 0x06
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
				rx_msgbuf.msgs[bufi].msg_size = CANCDMOB & 0x0F;
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].msg_size; msgi++) {
 486:	8f 5f       	subi	r24, 0xFF	; 255
 488:	9c 91       	ld	r25, X
 48a:	89 17       	cp	r24, r25
 48c:	b8 f3       	brcs	.-18     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
				}
				CANCDMOB |= _BV(CONMOB1);
 48e:	ef ee       	ldi	r30, 0xEF	; 239
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	80 68       	ori	r24, 0x80	; 128
 496:	80 83       	st	Z, r24
				break;
 498:	04 c0       	rjmp	.+8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 49a:	e0 5f       	subi	r30, 0xF0	; 240
 49c:	9e 17       	cp	r25, r30
 49e:	08 f0       	brcs	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4a0:	b6 cf       	rjmp	.-148    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				break;
			}
		}
	}

	CANSTMOB = 0x00;
 4a2:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANPAGE = cp_tmp;
 4a6:	40 93 ed 00 	sts	0x00ED, r20	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	bf 91       	pop	r27
 4b4:	af 91       	pop	r26
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	7f 91       	pop	r23
 4bc:	6f 91       	pop	r22
 4be:	4f 91       	pop	r20
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0b be       	out	0x3b, r0	; 59
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <logger_init>:

static volatile buffer_t buffer;

// --------------------------------------------------------- External Functions

void *logger_init(void) {
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	90 e0       	ldi	r25, 0x00	; 0

	uint8_t i;
	for (i = 0; i < LOGGER_LOG_SIZE; i++) {
		buffer.buffer1[i] = UINT16_MAX;
 4d6:	4f ef       	ldi	r20, 0xFF	; 255
 4d8:	5f ef       	ldi	r21, 0xFF	; 255
 4da:	9c 01       	movw	r18, r24
 4dc:	2f 5f       	subi	r18, 0xFF	; 255
 4de:	3f 4f       	sbci	r19, 0xFF	; 255
 4e0:	f9 01       	movw	r30, r18
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	e9 50       	subi	r30, 0x09	; 9
 4e8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ea:	51 83       	std	Z+1, r21	; 0x01
 4ec:	40 83       	st	Z, r20
		buffer.buffer2[i] = UINT16_MAX;
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	fc 01       	movw	r30, r24
 4f4:	e7 5f       	subi	r30, 0xF7	; 247
 4f6:	fd 4f       	sbci	r31, 0xFD	; 253
 4f8:	51 83       	std	Z+1, r21	; 0x01
 4fa:	40 83       	st	Z, r20
 4fc:	c9 01       	movw	r24, r18
// --------------------------------------------------------- External Functions

void *logger_init(void) {

	uint8_t i;
	for (i = 0; i < LOGGER_LOG_SIZE; i++) {
 4fe:	28 30       	cpi	r18, 0x08	; 8
 500:	31 05       	cpc	r19, r1
 502:	59 f7       	brne	.-42     	; 0x4da <logger_init+0x8>
		buffer.buffer1[i] = UINT16_MAX;
		buffer.buffer2[i] = UINT16_MAX;
	}
	
	buffer.writable = (void *)buffer.buffer1;
 504:	89 ef       	ldi	r24, 0xF9	; 249
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <buffer+0x1>
 50c:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <buffer>
	return (void *)buffer.buffer2;
}
 510:	89 e0       	ldi	r24, 0x09	; 9
 512:	92 e0       	ldi	r25, 0x02	; 2
 514:	08 95       	ret

00000516 <logger_log>:

void logger_log(logger_log_t type, uint16_t value) {

	*(buffer.writable+type) = value;
 516:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <buffer>
 51a:	f0 91 f8 01 	lds	r31, 0x01F8	; 0x8001f8 <buffer+0x1>
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	e8 0f       	add	r30, r24
 526:	f9 1f       	adc	r31, r25
 528:	71 83       	std	Z+1, r23	; 0x01
 52a:	60 83       	st	Z, r22
 52c:	08 95       	ret

0000052e <logger_rotate>:
}

void *logger_rotate(void) {

	if (buffer.writable == buffer.buffer1) {
 52e:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <buffer>
 532:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <buffer+0x1>
 536:	89 5f       	subi	r24, 0xF9	; 249
 538:	91 40       	sbci	r25, 0x01	; 1
 53a:	49 f4       	brne	.+18     	; 0x54e <logger_rotate+0x20>
		buffer.writable = (void *)buffer.buffer2;
 53c:	89 e0       	ldi	r24, 0x09	; 9
 53e:	92 e0       	ldi	r25, 0x02	; 2
 540:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <buffer+0x1>
 544:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <buffer>
		return (void *)buffer.buffer1;
 548:	89 ef       	ldi	r24, 0xF9	; 249
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	08 95       	ret
	} else {
		buffer.writable = (void *)buffer.buffer1;
 54e:	89 ef       	ldi	r24, 0xF9	; 249
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <buffer+0x1>
 556:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <buffer>
		return (void *)buffer.buffer2;
 55a:	89 e0       	ldi	r24, 0x09	; 9
 55c:	92 e0       	ldi	r25, 0x02	; 2
	}
 55e:	08 95       	ret

00000560 <nodereg_index_get>:

static volatile register_t nodereg = {0};

// --------------------------------------------------------- Internal Functions

static int8_t nodereg_index_get(uint16_t id) {
 560:	ac 01       	movw	r20, r24
	uint8_t node_i;

	for (node_i = 0; node_i < nodereg.nodes_size; node_i++) {
 562:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <nodereg>
 566:	88 23       	and	r24, r24
 568:	21 f1       	breq	.+72     	; 0x5b2 <nodereg_index_get+0x52>
		if (id == nodereg.nodes[node_i].id) {
 56a:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <nodereg+0x1>
 56e:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <nodereg+0x2>
 572:	48 17       	cp	r20, r24
 574:	59 07       	cpc	r21, r25
 576:	a1 f0       	breq	.+40     	; 0x5a0 <nodereg_index_get+0x40>
 578:	90 e0       	ldi	r25, 0x00	; 0
// --------------------------------------------------------- Internal Functions

static int8_t nodereg_index_get(uint16_t id) {
	uint8_t node_i;

	for (node_i = 0; node_i < nodereg.nodes_size; node_i++) {
 57a:	a9 e1       	ldi	r26, 0x19	; 25
 57c:	b2 e0       	ldi	r27, 0x02	; 2
 57e:	13 c0       	rjmp	.+38     	; 0x5a6 <nodereg_index_get+0x46>
		if (id == nodereg.nodes[node_i].id) {
 580:	e9 2f       	mov	r30, r25
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	ee 0f       	add	r30, r30
 586:	ff 1f       	adc	r31, r31
 588:	ee 0f       	add	r30, r30
 58a:	ff 1f       	adc	r31, r31
 58c:	ee 0f       	add	r30, r30
 58e:	ff 1f       	adc	r31, r31
 590:	e7 5e       	subi	r30, 0xE7	; 231
 592:	fd 4f       	sbci	r31, 0xFD	; 253
 594:	21 81       	ldd	r18, Z+1	; 0x01
 596:	32 81       	ldd	r19, Z+2	; 0x02
 598:	24 17       	cp	r18, r20
 59a:	35 07       	cpc	r19, r21
 59c:	21 f4       	brne	.+8      	; 0x5a6 <nodereg_index_get+0x46>
 59e:	01 c0       	rjmp	.+2      	; 0x5a2 <nodereg_index_get+0x42>
// --------------------------------------------------------- Internal Functions

static int8_t nodereg_index_get(uint16_t id) {
	uint8_t node_i;

	for (node_i = 0; node_i < nodereg.nodes_size; node_i++) {
 5a0:	90 e0       	ldi	r25, 0x00	; 0
		if (id == nodereg.nodes[node_i].id) {
			return node_i;
 5a2:	89 2f       	mov	r24, r25
 5a4:	08 95       	ret
// --------------------------------------------------------- Internal Functions

static int8_t nodereg_index_get(uint16_t id) {
	uint8_t node_i;

	for (node_i = 0; node_i < nodereg.nodes_size; node_i++) {
 5a6:	9f 5f       	subi	r25, 0xFF	; 255
 5a8:	2c 91       	ld	r18, X
 5aa:	92 17       	cp	r25, r18
 5ac:	48 f3       	brcs	.-46     	; 0x580 <nodereg_index_get+0x20>
		if (id == nodereg.nodes[node_i].id) {
			return node_i;
		}
	}

	return -1;
 5ae:	8f ef       	ldi	r24, 0xFF	; 255
 5b0:	08 95       	ret
 5b2:	8f ef       	ldi	r24, 0xFF	; 255
}
 5b4:	08 95       	ret

000005b6 <nodectl_node_register>:

// --------------------------------------------------------- External Functions

void nodectl_node_register(uint16_t id) {
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	9c 01       	movw	r18, r24

	if (nodereg.nodes_size >= NODECTL_REGISTER_SIZE) {
 5bc:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <nodereg>
 5c0:	9e 30       	cpi	r25, 0x0E	; 14
 5c2:	b0 f4       	brcc	.+44     	; 0x5f0 <nodectl_node_register+0x3a>
 5c4:	e9 01       	movw	r28, r18
		return;
	}
		
	if (nodereg_index_get(id) >= 0) {
 5c6:	c9 01       	movw	r24, r18
 5c8:	cb df       	rcall	.-106    	; 0x560 <nodereg_index_get>
 5ca:	88 23       	and	r24, r24
 5cc:	8c f4       	brge	.+34     	; 0x5f0 <nodectl_node_register+0x3a>
		return;
	}

	nodereg.nodes[nodereg.nodes_size++].id = id;
 5ce:	a9 e1       	ldi	r26, 0x19	; 25
 5d0:	b2 e0       	ldi	r27, 0x02	; 2
 5d2:	ec 91       	ld	r30, X
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	8e 0f       	add	r24, r30
 5d8:	8c 93       	st	X, r24
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	ee 0f       	add	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	ee 0f       	add	r30, r30
 5e2:	ff 1f       	adc	r31, r31
 5e4:	ee 0f       	add	r30, r30
 5e6:	ff 1f       	adc	r31, r31
 5e8:	e7 5e       	subi	r30, 0xE7	; 231
 5ea:	fd 4f       	sbci	r31, 0xFD	; 253
 5ec:	d2 83       	std	Z+2, r29	; 0x02
 5ee:	c1 83       	std	Z+1, r28	; 0x01
}
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	08 95       	ret

000005f6 <nodectl_handler_register>:

void nodectl_handler_register(uint16_t id, void (*handler)(void *msg, uint8_t msg_size), nodectl_handle_t type) {
 5f6:	1f 93       	push	r17
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	eb 01       	movw	r28, r22
 5fe:	14 2f       	mov	r17, r20
	int8_t node_i;

	node_i = nodereg_index_get(id);
 600:	af df       	rcall	.-162    	; 0x560 <nodereg_index_get>
	if (node_i == -1) {
 602:	8f 3f       	cpi	r24, 0xFF	; 255
 604:	01 f1       	breq	.+64     	; 0x646 <nodectl_handler_register+0x50>
		return;
	}

	switch(type) {
 606:	11 30       	cpi	r17, 0x01	; 1
 608:	69 f0       	breq	.+26     	; 0x624 <nodectl_handler_register+0x2e>
 60a:	18 f0       	brcs	.+6      	; 0x612 <nodectl_handler_register+0x1c>
 60c:	12 30       	cpi	r17, 0x02	; 2
 60e:	99 f0       	breq	.+38     	; 0x636 <nodectl_handler_register+0x40>
 610:	1a c0       	rjmp	.+52     	; 0x646 <nodectl_handler_register+0x50>
		case NODECTL_HANDLE_INIT:
			nodereg.nodes[node_i].handle_init = handler;
 612:	98 e0       	ldi	r25, 0x08	; 8
 614:	89 02       	muls	r24, r25
 616:	f0 01       	movw	r30, r0
 618:	11 24       	eor	r1, r1
 61a:	e7 5e       	subi	r30, 0xE7	; 231
 61c:	fd 4f       	sbci	r31, 0xFD	; 253
 61e:	d4 83       	std	Z+4, r29	; 0x04
 620:	c3 83       	std	Z+3, r28	; 0x03
			break;
 622:	11 c0       	rjmp	.+34     	; 0x646 <nodectl_handler_register+0x50>
		case NODECTL_HANDLE_RECEIVE:
			nodereg.nodes[node_i].handle_receive = handler;
 624:	98 e0       	ldi	r25, 0x08	; 8
 626:	89 02       	muls	r24, r25
 628:	f0 01       	movw	r30, r0
 62a:	11 24       	eor	r1, r1
 62c:	e7 5e       	subi	r30, 0xE7	; 231
 62e:	fd 4f       	sbci	r31, 0xFD	; 253
 630:	d6 83       	std	Z+6, r29	; 0x06
 632:	c5 83       	std	Z+5, r28	; 0x05
			break;
 634:	08 c0       	rjmp	.+16     	; 0x646 <nodectl_handler_register+0x50>
		case NODECTL_HANDLE_EXIT:
			nodereg.nodes[node_i].handle_exit = handler;
 636:	98 e0       	ldi	r25, 0x08	; 8
 638:	89 02       	muls	r24, r25
 63a:	f0 01       	movw	r30, r0
 63c:	11 24       	eor	r1, r1
 63e:	e7 5e       	subi	r30, 0xE7	; 231
 640:	fd 4f       	sbci	r31, 0xFD	; 253
 642:	d0 87       	std	Z+8, r29	; 0x08
 644:	c7 83       	std	Z+7, r28	; 0x07
			break;
	}
}
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	1f 91       	pop	r17
 64c:	08 95       	ret

0000064e <nodectl_handler_execute>:

void nodectl_handler_execute(uint16_t id, void *msg, uint8_t msg_size, nodectl_handle_t type) {
 64e:	0f 93       	push	r16
 650:	1f 93       	push	r17
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	eb 01       	movw	r28, r22
 658:	14 2f       	mov	r17, r20
 65a:	02 2f       	mov	r16, r18
	int8_t node_i;

	node_i = nodereg_index_get(id);
 65c:	81 df       	rcall	.-254    	; 0x560 <nodereg_index_get>
	if (node_i == -1) {
 65e:	8f 3f       	cpi	r24, 0xFF	; 255
 660:	09 f4       	brne	.+2      	; 0x664 <nodectl_handler_execute+0x16>
 662:	67 c0       	rjmp	.+206    	; 0x732 <nodectl_handler_execute+0xe4>
		return;
	}

	switch(type) {
 664:	01 30       	cpi	r16, 0x01	; 1
 666:	31 f1       	breq	.+76     	; 0x6b4 <nodectl_handler_execute+0x66>
 668:	20 f0       	brcs	.+8      	; 0x672 <nodectl_handler_execute+0x24>
 66a:	02 30       	cpi	r16, 0x02	; 2
 66c:	09 f4       	brne	.+2      	; 0x670 <nodectl_handler_execute+0x22>
 66e:	42 c0       	rjmp	.+132    	; 0x6f4 <nodectl_handler_execute+0xa6>
 670:	60 c0       	rjmp	.+192    	; 0x732 <nodectl_handler_execute+0xe4>
		case NODECTL_HANDLE_INIT:
			if (nodereg.nodes[node_i].handle_init != NULL) {
 672:	08 2e       	mov	r0, r24
 674:	00 0c       	add	r0, r0
 676:	99 0b       	sbc	r25, r25
 678:	fc 01       	movw	r30, r24
 67a:	ee 0f       	add	r30, r30
 67c:	ff 1f       	adc	r31, r31
 67e:	ee 0f       	add	r30, r30
 680:	ff 1f       	adc	r31, r31
 682:	ee 0f       	add	r30, r30
 684:	ff 1f       	adc	r31, r31
 686:	e7 5e       	subi	r30, 0xE7	; 231
 688:	fd 4f       	sbci	r31, 0xFD	; 253
 68a:	23 81       	ldd	r18, Z+3	; 0x03
 68c:	34 81       	ldd	r19, Z+4	; 0x04
 68e:	23 2b       	or	r18, r19
 690:	09 f4       	brne	.+2      	; 0x694 <nodectl_handler_execute+0x46>
 692:	4f c0       	rjmp	.+158    	; 0x732 <nodectl_handler_execute+0xe4>
				nodereg.nodes[node_i].handle_init(msg, msg_size);
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	fc 01       	movw	r30, r24
 6a2:	e7 5e       	subi	r30, 0xE7	; 231
 6a4:	fd 4f       	sbci	r31, 0xFD	; 253
 6a6:	03 80       	ldd	r0, Z+3	; 0x03
 6a8:	f4 81       	ldd	r31, Z+4	; 0x04
 6aa:	e0 2d       	mov	r30, r0
 6ac:	61 2f       	mov	r22, r17
 6ae:	ce 01       	movw	r24, r28
 6b0:	09 95       	icall
 6b2:	3f c0       	rjmp	.+126    	; 0x732 <nodectl_handler_execute+0xe4>
			}
			break;
		case NODECTL_HANDLE_RECEIVE:
			if (nodereg.nodes[node_i].handle_receive != NULL) {
 6b4:	08 2e       	mov	r0, r24
 6b6:	00 0c       	add	r0, r0
 6b8:	99 0b       	sbc	r25, r25
 6ba:	fc 01       	movw	r30, r24
 6bc:	ee 0f       	add	r30, r30
 6be:	ff 1f       	adc	r31, r31
 6c0:	ee 0f       	add	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	ee 0f       	add	r30, r30
 6c6:	ff 1f       	adc	r31, r31
 6c8:	e7 5e       	subi	r30, 0xE7	; 231
 6ca:	fd 4f       	sbci	r31, 0xFD	; 253
 6cc:	25 81       	ldd	r18, Z+5	; 0x05
 6ce:	36 81       	ldd	r19, Z+6	; 0x06
 6d0:	23 2b       	or	r18, r19
 6d2:	79 f1       	breq	.+94     	; 0x732 <nodectl_handler_execute+0xe4>
				nodereg.nodes[node_i].handle_receive(msg, msg_size);
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	fc 01       	movw	r30, r24
 6e2:	e7 5e       	subi	r30, 0xE7	; 231
 6e4:	fd 4f       	sbci	r31, 0xFD	; 253
 6e6:	05 80       	ldd	r0, Z+5	; 0x05
 6e8:	f6 81       	ldd	r31, Z+6	; 0x06
 6ea:	e0 2d       	mov	r30, r0
 6ec:	61 2f       	mov	r22, r17
 6ee:	ce 01       	movw	r24, r28
 6f0:	09 95       	icall
 6f2:	1f c0       	rjmp	.+62     	; 0x732 <nodectl_handler_execute+0xe4>
			}
			break;
		case NODECTL_HANDLE_EXIT:
			if (nodereg.nodes[node_i].handle_exit != NULL) {
 6f4:	08 2e       	mov	r0, r24
 6f6:	00 0c       	add	r0, r0
 6f8:	99 0b       	sbc	r25, r25
 6fa:	fc 01       	movw	r30, r24
 6fc:	ee 0f       	add	r30, r30
 6fe:	ff 1f       	adc	r31, r31
 700:	ee 0f       	add	r30, r30
 702:	ff 1f       	adc	r31, r31
 704:	ee 0f       	add	r30, r30
 706:	ff 1f       	adc	r31, r31
 708:	e7 5e       	subi	r30, 0xE7	; 231
 70a:	fd 4f       	sbci	r31, 0xFD	; 253
 70c:	27 81       	ldd	r18, Z+7	; 0x07
 70e:	30 85       	ldd	r19, Z+8	; 0x08
 710:	23 2b       	or	r18, r19
 712:	79 f0       	breq	.+30     	; 0x732 <nodectl_handler_execute+0xe4>
				nodereg.nodes[node_i].handle_exit(msg, msg_size);
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	fc 01       	movw	r30, r24
 722:	e7 5e       	subi	r30, 0xE7	; 231
 724:	fd 4f       	sbci	r31, 0xFD	; 253
 726:	07 80       	ldd	r0, Z+7	; 0x07
 728:	f0 85       	ldd	r31, Z+8	; 0x08
 72a:	e0 2d       	mov	r30, r0
 72c:	61 2f       	mov	r22, r17
 72e:	ce 01       	movw	r24, r28
 730:	09 95       	icall
			}
			break;
	}
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	08 95       	ret

0000073c <spi_slave_init>:
}

void spi_slave_register_txstart_handler(void (*txstart_handler)()) {

	// Register handler
	_txstart_handler = txstart_handler;
 73c:	88 e0       	ldi	r24, 0x08	; 8
 73e:	84 b9       	out	0x04, r24	; 4
 740:	8f ef       	ldi	r24, 0xFF	; 255
 742:	8e bd       	out	0x2e, r24	; 46
 744:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <_txbuffer+0x1>
 748:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <_txbuffer>
 74c:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <_txbufend>
 750:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <_txbufpos>
 754:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <_txdone_handler+0x1>
 758:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <_txdone_handler>
 75c:	80 ec       	ldi	r24, 0xC0	; 192
 75e:	8c bd       	out	0x2c, r24	; 44
 760:	08 95       	ret

00000762 <spi_slave_register_txbuffer>:
 762:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <_txbuffer+0x1>
 766:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <_txbuffer>
 76a:	61 50       	subi	r22, 0x01	; 1
 76c:	60 93 8f 02 	sts	0x028F, r22	; 0x80028f <_txbufend>
 770:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <_txbufpos>
 774:	fc 01       	movw	r30, r24
 776:	80 81       	ld	r24, Z
 778:	8e bd       	out	0x2e, r24	; 46
 77a:	08 95       	ret

0000077c <spi_slave_register_txdone_handler>:
}

void spi_slave_register_txdone_handler(void (*txdone_handler)()) {

	// Register handler
	_txdone_handler = txdone_handler;
 77c:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <_txdone_handler+0x1>
 780:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <_txdone_handler>
 784:	08 95       	ret

00000786 <__vector_20>:
}

// ------------------------------------------------- Interrupt Service Routines

ISR(SPI_STC_vect) {
 786:	1f 92       	push	r1
 788:	0f 92       	push	r0
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	0f 92       	push	r0
 78e:	11 24       	eor	r1, r1
 790:	0b b6       	in	r0, 0x3b	; 59
 792:	0f 92       	push	r0
 794:	2f 93       	push	r18
 796:	3f 93       	push	r19
 798:	4f 93       	push	r20
 79a:	5f 93       	push	r21
 79c:	6f 93       	push	r22
 79e:	7f 93       	push	r23
 7a0:	8f 93       	push	r24
 7a2:	9f 93       	push	r25
 7a4:	af 93       	push	r26
 7a6:	bf 93       	push	r27
 7a8:	ef 93       	push	r30
 7aa:	ff 93       	push	r31

	if (_txbufpos == 0) {
 7ac:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <_txbufpos>
 7b0:	81 11       	cpse	r24, r1
 7b2:	07 c0       	rjmp	.+14     	; 0x7c2 <__vector_20+0x3c>
		
		// Call tx start handler
		if (_txstart_handler != NULL) {
 7b4:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <_txstart_handler>
 7b8:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <_txstart_handler+0x1>
 7bc:	30 97       	sbiw	r30, 0x00	; 0
 7be:	09 f0       	breq	.+2      	; 0x7c2 <__vector_20+0x3c>
			(*_txstart_handler)();
 7c0:	09 95       	icall
		}
	}

	if (_txbufpos < _txbufend) {
 7c2:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <_txbufpos>
 7c6:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <_txbufend>
 7ca:	98 17       	cp	r25, r24
 7cc:	30 f4       	brcc	.+12     	; 0x7da <__vector_20+0x54>

		// Increment buffer position
		_txbufpos++;
 7ce:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <_txbufpos>
 7d2:	8f 5f       	subi	r24, 0xFF	; 255
 7d4:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <_txbufpos>
 7d8:	09 c0       	rjmp	.+18     	; 0x7ec <__vector_20+0x66>

	} else {

		// Reset buffer position
		_txbufpos = 0;
 7da:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <_txbufpos>

		// Call tx done handler
		if (_txdone_handler != NULL) {
 7de:	e0 91 8a 02 	lds	r30, 0x028A	; 0x80028a <_txdone_handler>
 7e2:	f0 91 8b 02 	lds	r31, 0x028B	; 0x80028b <_txdone_handler+0x1>
 7e6:	30 97       	sbiw	r30, 0x00	; 0
 7e8:	09 f0       	breq	.+2      	; 0x7ec <__vector_20+0x66>
			(*_txdone_handler)();
 7ea:	09 95       	icall
		}
	}

	// Copy next byte from tx buffer to controller
	if (_txbuffer != NULL) {	
 7ec:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_txbuffer>
 7f0:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <_txbuffer+0x1>
 7f4:	00 97       	sbiw	r24, 0x00	; 0
 7f6:	39 f0       	breq	.+14     	; 0x806 <__vector_20+0x80>
		SPDR = *(_txbuffer+_txbufpos);
 7f8:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <_txbufpos>
 7fc:	fc 01       	movw	r30, r24
 7fe:	e2 0f       	add	r30, r18
 800:	f1 1d       	adc	r31, r1
 802:	80 81       	ld	r24, Z
 804:	8e bd       	out	0x2e, r24	; 46
	}
 806:	ff 91       	pop	r31
 808:	ef 91       	pop	r30
 80a:	bf 91       	pop	r27
 80c:	af 91       	pop	r26
 80e:	9f 91       	pop	r25
 810:	8f 91       	pop	r24
 812:	7f 91       	pop	r23
 814:	6f 91       	pop	r22
 816:	5f 91       	pop	r21
 818:	4f 91       	pop	r20
 81a:	3f 91       	pop	r19
 81c:	2f 91       	pop	r18
 81e:	0f 90       	pop	r0
 820:	0b be       	out	0x3b, r0	; 59
 822:	0f 90       	pop	r0
 824:	0f be       	out	0x3f, r0	; 63
 826:	0f 90       	pop	r0
 828:	1f 90       	pop	r1
 82a:	18 95       	reti

0000082c <spi_rotate_log_buffer>:
#include <logger.h>
#include <nodectl.h>
#include <spi_slave.h>

void spi_rotate_log_buffer(void) {
	spi_slave_register_txbuffer(logger_rotate(), LOGGER_LOG_SIZE);
 82c:	80 de       	rcall	.-768    	; 0x52e <logger_rotate>
 82e:	68 e0       	ldi	r22, 0x08	; 8
 830:	98 cf       	rjmp	.-208    	; 0x762 <spi_slave_register_txbuffer>
 832:	08 95       	ret

00000834 <node1_handle_init>:
}

volatile const uint8_t node1_msk = 1;
volatile uint8_t node1_reg = 1;
void node1_handle_init(void *msg, uint8_t msg_size) {
 834:	fc 01       	movw	r30, r24
	DDRC |= node1_msk;
 836:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <node1_msk>
 83a:	97 b1       	in	r25, 0x07	; 7
 83c:	98 2b       	or	r25, r24
 83e:	97 b9       	out	0x07, r25	; 7
	PORTC = node1_msk | (PORTC & ~node1_msk);
 840:	38 b1       	in	r19, 0x08	; 8
 842:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <node1_msk>
 846:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <node1_msk>
 84a:	90 95       	com	r25
 84c:	93 23       	and	r25, r19
 84e:	92 2b       	or	r25, r18
 850:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_WHEEL1, *((uint16_t *)msg));
 852:	60 81       	ld	r22, Z
 854:	71 81       	ldd	r23, Z+1	; 0x01
 856:	83 e0       	ldi	r24, 0x03	; 3
 858:	5e ce       	rjmp	.-836    	; 0x516 <logger_log>
 85a:	08 95       	ret

0000085c <node1_handle_receive>:
}
void node1_handle_receive(void *msg, uint8_t msg_size) {
 85c:	fc 01       	movw	r30, r24
	node1_reg ^= node1_msk;
 85e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <node1_msk>
 862:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <node1_reg>
 866:	98 27       	eor	r25, r24
 868:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <node1_reg>
	PORTC = node1_reg | (PORTC & ~node1_msk);
 86c:	38 b1       	in	r19, 0x08	; 8
 86e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <node1_msk>
 872:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <node1_reg>
 876:	90 95       	com	r25
 878:	93 23       	and	r25, r19
 87a:	92 2b       	or	r25, r18
 87c:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_WHEEL1, *((uint16_t *)msg));
 87e:	60 81       	ld	r22, Z
 880:	71 81       	ldd	r23, Z+1	; 0x01
 882:	83 e0       	ldi	r24, 0x03	; 3
 884:	48 ce       	rjmp	.-880    	; 0x516 <logger_log>
 886:	08 95       	ret

00000888 <node2_handle_init>:
}

volatile const uint8_t node2_msk = 2;
volatile uint8_t node2_reg = 2;
void node2_handle_init(void *msg, uint8_t msg_size) {
 888:	fc 01       	movw	r30, r24
	DDRC |= node2_msk;
 88a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <node2_msk>
 88e:	97 b1       	in	r25, 0x07	; 7
 890:	98 2b       	or	r25, r24
 892:	97 b9       	out	0x07, r25	; 7
	PORTC = node2_msk | (PORTC & ~node2_msk);
 894:	38 b1       	in	r19, 0x08	; 8
 896:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <node2_msk>
 89a:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <node2_msk>
 89e:	90 95       	com	r25
 8a0:	93 23       	and	r25, r19
 8a2:	92 2b       	or	r25, r18
 8a4:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_WHEEL2, *((uint16_t *)msg));
 8a6:	60 81       	ld	r22, Z
 8a8:	71 81       	ldd	r23, Z+1	; 0x01
 8aa:	84 e0       	ldi	r24, 0x04	; 4
 8ac:	34 ce       	rjmp	.-920    	; 0x516 <logger_log>
 8ae:	08 95       	ret

000008b0 <node2_handle_receive>:
}
void node2_handle_receive(void *msg, uint8_t msg_size) {
 8b0:	fc 01       	movw	r30, r24
	node2_reg ^= node2_msk;
 8b2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <node2_msk>
 8b6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <node2_reg>
 8ba:	98 27       	eor	r25, r24
 8bc:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <node2_reg>
	PORTC = node2_reg | (PORTC & ~node2_msk);
 8c0:	38 b1       	in	r19, 0x08	; 8
 8c2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <node2_msk>
 8c6:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <node2_reg>
 8ca:	90 95       	com	r25
 8cc:	93 23       	and	r25, r19
 8ce:	92 2b       	or	r25, r18
 8d0:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_WHEEL2, *((uint16_t *)msg));
 8d2:	60 81       	ld	r22, Z
 8d4:	71 81       	ldd	r23, Z+1	; 0x01
 8d6:	84 e0       	ldi	r24, 0x04	; 4
 8d8:	1e ce       	rjmp	.-964    	; 0x516 <logger_log>
 8da:	08 95       	ret

000008dc <node3_handle_init>:
}

volatile const uint8_t node3_msk = 4;
volatile uint8_t node3_reg = 4;
void node3_handle_init(void *msg, uint8_t msg_size) {
 8dc:	fc 01       	movw	r30, r24
	DDRC |= node3_msk;
 8de:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <node3_msk>
 8e2:	97 b1       	in	r25, 0x07	; 7
 8e4:	98 2b       	or	r25, r24
 8e6:	97 b9       	out	0x07, r25	; 7
	PORTC = node3_msk | (PORTC & ~node3_msk);
 8e8:	38 b1       	in	r19, 0x08	; 8
 8ea:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <node3_msk>
 8ee:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <node3_msk>
 8f2:	90 95       	com	r25
 8f4:	93 23       	and	r25, r19
 8f6:	92 2b       	or	r25, r18
 8f8:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 8fa:	60 81       	ld	r22, Z
 8fc:	71 81       	ldd	r23, Z+1	; 0x01
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	0a ce       	rjmp	.-1004   	; 0x516 <logger_log>
 902:	08 95       	ret

00000904 <node3_handle_receive>:
}
void node3_handle_receive(void *msg, uint8_t msg_size) {
 904:	fc 01       	movw	r30, r24
	node3_reg ^= node3_msk;
 906:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <node3_msk>
 90a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <node3_reg>
 90e:	98 27       	eor	r25, r24
 910:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <node3_reg>
	PORTC = node3_reg | (PORTC & ~node3_msk);
 914:	38 b1       	in	r19, 0x08	; 8
 916:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <node3_msk>
 91a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <node3_reg>
 91e:	90 95       	com	r25
 920:	93 23       	and	r25, r19
 922:	92 2b       	or	r25, r18
 924:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 926:	60 81       	ld	r22, Z
 928:	71 81       	ldd	r23, Z+1	; 0x01
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	f4 cd       	rjmp	.-1048   	; 0x516 <logger_log>
 92e:	08 95       	ret

00000930 <node4_handle_init>:
}

volatile const uint8_t node4_msk = 8;
volatile uint8_t node4_reg = 8;
void node4_handle_init(void *msg, uint8_t msg_size) {
 930:	fc 01       	movw	r30, r24
	DDRC |= node4_msk;
 932:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <node4_msk>
 936:	97 b1       	in	r25, 0x07	; 7
 938:	98 2b       	or	r25, r24
 93a:	97 b9       	out	0x07, r25	; 7
	PORTC = node4_msk | (PORTC & ~node4_msk);
 93c:	38 b1       	in	r19, 0x08	; 8
 93e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <node4_msk>
 942:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <node4_msk>
 946:	90 95       	com	r25
 948:	93 23       	and	r25, r19
 94a:	92 2b       	or	r25, r18
 94c:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 94e:	60 81       	ld	r22, Z
 950:	71 81       	ldd	r23, Z+1	; 0x01
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	e0 cd       	rjmp	.-1088   	; 0x516 <logger_log>
 956:	08 95       	ret

00000958 <node4_handle_receive>:
}
void node4_handle_receive(void *msg, uint8_t msg_size) {
 958:	fc 01       	movw	r30, r24
	node4_reg ^= node4_msk;
 95a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <node4_msk>
 95e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <node4_reg>
 962:	98 27       	eor	r25, r24
 964:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <node4_reg>
	PORTC = node4_reg | (PORTC & ~node4_msk);
 968:	38 b1       	in	r19, 0x08	; 8
 96a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <node4_msk>
 96e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <node4_reg>
 972:	90 95       	com	r25
 974:	93 23       	and	r25, r19
 976:	92 2b       	or	r25, r18
 978:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 97a:	60 81       	ld	r22, Z
 97c:	71 81       	ldd	r23, Z+1	; 0x01
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	ca cd       	rjmp	.-1132   	; 0x516 <logger_log>
 982:	08 95       	ret

00000984 <node5_handle_init>:
}

volatile const uint8_t node5_msk = 16;
volatile uint8_t node5_reg = 16;
void node5_handle_init(void *msg, uint8_t msg_size) {
 984:	fc 01       	movw	r30, r24
	DDRC |= node5_msk;
 986:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <node5_msk>
 98a:	97 b1       	in	r25, 0x07	; 7
 98c:	98 2b       	or	r25, r24
 98e:	97 b9       	out	0x07, r25	; 7
	PORTC = node5_msk | (PORTC & ~node5_msk);
 990:	38 b1       	in	r19, 0x08	; 8
 992:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <node5_msk>
 996:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <node5_msk>
 99a:	90 95       	com	r25
 99c:	93 23       	and	r25, r19
 99e:	92 2b       	or	r25, r18
 9a0:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 9a2:	60 81       	ld	r22, Z
 9a4:	71 81       	ldd	r23, Z+1	; 0x01
 9a6:	81 e0       	ldi	r24, 0x01	; 1
 9a8:	b6 cd       	rjmp	.-1172   	; 0x516 <logger_log>
 9aa:	08 95       	ret

000009ac <node5_handle_receive>:
}
void node5_handle_receive(void *msg, uint8_t msg_size) {
 9ac:	fc 01       	movw	r30, r24
	node5_reg ^= node5_msk;
 9ae:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <node5_msk>
 9b2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <node5_reg>
 9b6:	98 27       	eor	r25, r24
 9b8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <node5_reg>
	PORTC = node5_reg | (PORTC & ~node5_msk);
 9bc:	38 b1       	in	r19, 0x08	; 8
 9be:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <node5_msk>
 9c2:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <node5_reg>
 9c6:	90 95       	com	r25
 9c8:	93 23       	and	r25, r19
 9ca:	92 2b       	or	r25, r18
 9cc:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 9ce:	60 81       	ld	r22, Z
 9d0:	71 81       	ldd	r23, Z+1	; 0x01
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	a0 cd       	rjmp	.-1216   	; 0x516 <logger_log>
 9d6:	08 95       	ret

000009d8 <node6_handle_init>:
}

volatile const uint8_t node6_msk = 32;
volatile uint8_t node6_reg = 32;
void node6_handle_init(void *msg, uint8_t msg_size) {
 9d8:	fc 01       	movw	r30, r24
	DDRC |= node6_msk;
 9da:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <node6_msk>
 9de:	97 b1       	in	r25, 0x07	; 7
 9e0:	98 2b       	or	r25, r24
 9e2:	97 b9       	out	0x07, r25	; 7
	PORTC = node6_msk | (PORTC & ~node6_msk);
 9e4:	38 b1       	in	r19, 0x08	; 8
 9e6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <node6_msk>
 9ea:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <node6_msk>
 9ee:	90 95       	com	r25
 9f0:	93 23       	and	r25, r19
 9f2:	92 2b       	or	r25, r18
 9f4:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 9f6:	60 81       	ld	r22, Z
 9f8:	71 81       	ldd	r23, Z+1	; 0x01
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	8c cd       	rjmp	.-1256   	; 0x516 <logger_log>
 9fe:	08 95       	ret

00000a00 <node6_handle_receive>:
}
void node6_handle_receive(void *msg, uint8_t msg_size) {
 a00:	fc 01       	movw	r30, r24
	node6_reg ^= node6_msk;
 a02:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <node6_msk>
 a06:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <node6_reg>
 a0a:	98 27       	eor	r25, r24
 a0c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <node6_reg>
	PORTC = node6_reg | (PORTC & ~node6_msk);
 a10:	38 b1       	in	r19, 0x08	; 8
 a12:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <node6_msk>
 a16:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <node6_reg>
 a1a:	90 95       	com	r25
 a1c:	93 23       	and	r25, r19
 a1e:	92 2b       	or	r25, r18
 a20:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 a22:	60 81       	ld	r22, Z
 a24:	71 81       	ldd	r23, Z+1	; 0x01
 a26:	81 e0       	ldi	r24, 0x01	; 1
 a28:	76 cd       	rjmp	.-1300   	; 0x516 <logger_log>
 a2a:	08 95       	ret

00000a2c <node7_handle_init>:
}

volatile const uint8_t node7_msk = 64;
volatile uint8_t node7_reg = 64;
void node7_handle_init(void *msg, uint8_t msg_size) {
 a2c:	fc 01       	movw	r30, r24
	DDRC |= node7_msk;
 a2e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <node7_msk>
 a32:	97 b1       	in	r25, 0x07	; 7
 a34:	98 2b       	or	r25, r24
 a36:	97 b9       	out	0x07, r25	; 7
	PORTC = node7_msk | (PORTC & ~node7_msk);
 a38:	38 b1       	in	r19, 0x08	; 8
 a3a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <node7_msk>
 a3e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <node7_msk>
 a42:	90 95       	com	r25
 a44:	93 23       	and	r25, r19
 a46:	92 2b       	or	r25, r18
 a48:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 a4a:	60 81       	ld	r22, Z
 a4c:	71 81       	ldd	r23, Z+1	; 0x01
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	62 cd       	rjmp	.-1340   	; 0x516 <logger_log>
 a52:	08 95       	ret

00000a54 <node7_handle_receive>:
}
void node7_handle_receive(void *msg, uint8_t msg_size) {
 a54:	fc 01       	movw	r30, r24
	node7_reg ^= node7_msk;
 a56:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <node7_msk>
 a5a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <node7_reg>
 a5e:	98 27       	eor	r25, r24
 a60:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <node7_reg>
	PORTC = node7_reg | (PORTC & ~node7_msk);
 a64:	38 b1       	in	r19, 0x08	; 8
 a66:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <node7_msk>
 a6a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <node7_reg>
 a6e:	90 95       	com	r25
 a70:	93 23       	and	r25, r19
 a72:	92 2b       	or	r25, r18
 a74:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 a76:	60 81       	ld	r22, Z
 a78:	71 81       	ldd	r23, Z+1	; 0x01
 a7a:	81 e0       	ldi	r24, 0x01	; 1
 a7c:	4c cd       	rjmp	.-1384   	; 0x516 <logger_log>
 a7e:	08 95       	ret

00000a80 <node8_handle_init>:
}

volatile const uint8_t node8_msk = 128;
volatile uint8_t node8_reg = 128;
void node8_handle_init(void *msg, uint8_t msg_size) {
 a80:	fc 01       	movw	r30, r24
	DDRC |= node8_msk;
 a82:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <node8_msk>
 a86:	97 b1       	in	r25, 0x07	; 7
 a88:	98 2b       	or	r25, r24
 a8a:	97 b9       	out	0x07, r25	; 7
	PORTC = node8_msk | (PORTC & ~node8_msk);
 a8c:	38 b1       	in	r19, 0x08	; 8
 a8e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <node8_msk>
 a92:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <node8_msk>
 a96:	90 95       	com	r25
 a98:	93 23       	and	r25, r19
 a9a:	92 2b       	or	r25, r18
 a9c:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 a9e:	60 81       	ld	r22, Z
 aa0:	71 81       	ldd	r23, Z+1	; 0x01
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	38 cd       	rjmp	.-1424   	; 0x516 <logger_log>
 aa6:	08 95       	ret

00000aa8 <node8_handle_receive>:
}
void node8_handle_receive(void *msg, uint8_t msg_size) {
 aa8:	fc 01       	movw	r30, r24
	node8_reg ^= node8_msk;
 aaa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <node8_msk>
 aae:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 ab2:	98 27       	eor	r25, r24
 ab4:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTC = node8_reg | (PORTC & ~node8_msk);
 ab8:	38 b1       	in	r19, 0x08	; 8
 aba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <node8_msk>
 abe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 ac2:	90 95       	com	r25
 ac4:	93 23       	and	r25, r19
 ac6:	92 2b       	or	r25, r18
 ac8:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 aca:	60 81       	ld	r22, Z
 acc:	71 81       	ldd	r23, Z+1	; 0x01
 ace:	81 e0       	ldi	r24, 0x01	; 1
 ad0:	22 cd       	rjmp	.-1468   	; 0x516 <logger_log>
 ad2:	08 95       	ret

00000ad4 <main>:
}

int main(void) {
 ad4:	cf 93       	push	r28
 ad6:	df 93       	push	r29
 ad8:	cd b7       	in	r28, 0x3d	; 61
 ada:	de b7       	in	r29, 0x3e	; 62
 adc:	2d 97       	sbiw	r28, 0x0d	; 13
 ade:	0f b6       	in	r0, 0x3f	; 63
 ae0:	f8 94       	cli
 ae2:	de bf       	out	0x3e, r29	; 62
 ae4:	0f be       	out	0x3f, r0	; 63
 ae6:	cd bf       	out	0x3d, r28	; 61
	const uint16_t node_init_val = 0x7FFF;
 ae8:	8f ef       	ldi	r24, 0xFF	; 255
 aea:	9f e7       	ldi	r25, 0x7F	; 127
 aec:	9a 83       	std	Y+2, r25	; 0x02
 aee:	89 83       	std	Y+1, r24	; 0x01
	uint16_t can_id;
	uint8_t can_msg[8], can_msg_size;

	spi_slave_init();
 af0:	25 de       	rcall	.-950    	; 0x73c <spi_slave_init>
	spi_slave_register_txbuffer(logger_init(), LOGGER_LOG_SIZE);
 af2:	ef dc       	rcall	.-1570   	; 0x4d2 <logger_init>
 af4:	68 e0       	ldi	r22, 0x08	; 8
 af6:	35 de       	rcall	.-918    	; 0x762 <spi_slave_register_txbuffer>
 af8:	86 e1       	ldi	r24, 0x16	; 22
	spi_slave_register_txdone_handler(spi_rotate_log_buffer);
 afa:	94 e0       	ldi	r25, 0x04	; 4
 afc:	3f de       	rcall	.-898    	; 0x77c <spi_slave_register_txdone_handler>
 afe:	80 e0       	ldi	r24, 0x00	; 0

	can_init(0);
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	e6 da       	rcall	.-2612   	; 0xd0 <can_init>
 b04:	88 e0       	ldi	r24, 0x08	; 8
	can_filter(8);
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	4f db       	rcall	.-2402   	; 0x1a8 <can_filter>
 b0a:	88 e0       	ldi	r24, 0x08	; 8
	nodectl_node_register(8);
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	53 dd       	rcall	.-1370   	; 0x5b6 <nodectl_node_register>
 b10:	40 e0       	ldi	r20, 0x00	; 0
	nodectl_handler_register(8, node1_handle_init, NODECTL_HANDLE_INIT);
 b12:	6a e1       	ldi	r22, 0x1A	; 26
 b14:	74 e0       	ldi	r23, 0x04	; 4
 b16:	88 e0       	ldi	r24, 0x08	; 8
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	6d dd       	rcall	.-1318   	; 0x5f6 <nodectl_handler_register>
 b1c:	41 e0       	ldi	r20, 0x01	; 1
	nodectl_handler_register(8, node1_handle_receive, NODECTL_HANDLE_RECEIVE);
 b1e:	6e e2       	ldi	r22, 0x2E	; 46
 b20:	74 e0       	ldi	r23, 0x04	; 4
 b22:	88 e0       	ldi	r24, 0x08	; 8
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	67 dd       	rcall	.-1330   	; 0x5f6 <nodectl_handler_register>
 b28:	20 e0       	ldi	r18, 0x00	; 0
	nodectl_handler_execute(8, (void *)&node_init_val, 2, NODECTL_HANDLE_INIT);
 b2a:	42 e0       	ldi	r20, 0x02	; 2
 b2c:	be 01       	movw	r22, r28
 b2e:	6f 5f       	subi	r22, 0xFF	; 255
 b30:	7f 4f       	sbci	r23, 0xFF	; 255
 b32:	88 e0       	ldi	r24, 0x08	; 8
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	8b dd       	rcall	.-1258   	; 0x64e <nodectl_handler_execute>

	can_filter(16);
 b38:	80 e1       	ldi	r24, 0x10	; 16
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	35 db       	rcall	.-2454   	; 0x1a8 <can_filter>
	nodectl_node_register(16);
 b3e:	80 e1       	ldi	r24, 0x10	; 16
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	39 dd       	rcall	.-1422   	; 0x5b6 <nodectl_node_register>
	nodectl_handler_register(16, node2_handle_init, NODECTL_HANDLE_INIT);
 b44:	40 e0       	ldi	r20, 0x00	; 0
 b46:	64 e4       	ldi	r22, 0x44	; 68
 b48:	74 e0       	ldi	r23, 0x04	; 4
 b4a:	80 e1       	ldi	r24, 0x10	; 16
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	53 dd       	rcall	.-1370   	; 0x5f6 <nodectl_handler_register>
 b50:	41 e0       	ldi	r20, 0x01	; 1
	nodectl_handler_register(16, node2_handle_receive, NODECTL_HANDLE_RECEIVE);
 b52:	68 e5       	ldi	r22, 0x58	; 88
 b54:	74 e0       	ldi	r23, 0x04	; 4
 b56:	80 e1       	ldi	r24, 0x10	; 16
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	4d dd       	rcall	.-1382   	; 0x5f6 <nodectl_handler_register>
	nodectl_handler_execute(16, (void *)&node_init_val, 2, NODECTL_HANDLE_INIT);
 b5c:	20 e0       	ldi	r18, 0x00	; 0
 b5e:	42 e0       	ldi	r20, 0x02	; 2
 b60:	be 01       	movw	r22, r28
 b62:	6f 5f       	subi	r22, 0xFF	; 255
 b64:	7f 4f       	sbci	r23, 0xFF	; 255
 b66:	80 e1       	ldi	r24, 0x10	; 16
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	71 dd       	rcall	.-1310   	; 0x64e <nodectl_handler_execute>

	can_filter(32);
 b6c:	80 e2       	ldi	r24, 0x20	; 32
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	1b db       	rcall	.-2506   	; 0x1a8 <can_filter>
	nodectl_node_register(32);
 b72:	80 e2       	ldi	r24, 0x20	; 32
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	1f dd       	rcall	.-1474   	; 0x5b6 <nodectl_node_register>
 b78:	40 e0       	ldi	r20, 0x00	; 0
	nodectl_handler_register(32, node3_handle_init, NODECTL_HANDLE_INIT);
 b7a:	6e e6       	ldi	r22, 0x6E	; 110
 b7c:	74 e0       	ldi	r23, 0x04	; 4
 b7e:	80 e2       	ldi	r24, 0x20	; 32
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	39 dd       	rcall	.-1422   	; 0x5f6 <nodectl_handler_register>
	nodectl_handler_register(32, node3_handle_receive, NODECTL_HANDLE_RECEIVE);
 b84:	41 e0       	ldi	r20, 0x01	; 1
 b86:	62 e8       	ldi	r22, 0x82	; 130
 b88:	74 e0       	ldi	r23, 0x04	; 4
 b8a:	80 e2       	ldi	r24, 0x20	; 32
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	33 dd       	rcall	.-1434   	; 0x5f6 <nodectl_handler_register>
	nodectl_handler_execute(32, (void *)&node_init_val, 2, NODECTL_HANDLE_INIT);
 b90:	20 e0       	ldi	r18, 0x00	; 0
 b92:	42 e0       	ldi	r20, 0x02	; 2
 b94:	be 01       	movw	r22, r28
 b96:	6f 5f       	subi	r22, 0xFF	; 255
 b98:	7f 4f       	sbci	r23, 0xFF	; 255
 b9a:	80 e2       	ldi	r24, 0x20	; 32
 b9c:	90 e0       	ldi	r25, 0x00	; 0

	can_filter(64);
 b9e:	57 dd       	rcall	.-1362   	; 0x64e <nodectl_handler_execute>
 ba0:	80 e4       	ldi	r24, 0x40	; 64
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	01 db       	rcall	.-2558   	; 0x1a8 <can_filter>
	nodectl_node_register(64);
 ba6:	80 e4       	ldi	r24, 0x40	; 64
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	05 dd       	rcall	.-1526   	; 0x5b6 <nodectl_node_register>
	nodectl_handler_register(64, node4_handle_init, NODECTL_HANDLE_INIT);
 bac:	40 e0       	ldi	r20, 0x00	; 0
 bae:	68 e9       	ldi	r22, 0x98	; 152
 bb0:	74 e0       	ldi	r23, 0x04	; 4
 bb2:	80 e4       	ldi	r24, 0x40	; 64
 bb4:	90 e0       	ldi	r25, 0x00	; 0
	nodectl_handler_register(64, node4_handle_receive, NODECTL_HANDLE_RECEIVE);
 bb6:	1f dd       	rcall	.-1474   	; 0x5f6 <nodectl_handler_register>
 bb8:	41 e0       	ldi	r20, 0x01	; 1
 bba:	6c ea       	ldi	r22, 0xAC	; 172
 bbc:	74 e0       	ldi	r23, 0x04	; 4
 bbe:	80 e4       	ldi	r24, 0x40	; 64
 bc0:	90 e0       	ldi	r25, 0x00	; 0
	nodectl_handler_execute(64, (void *)&node_init_val, 2, NODECTL_HANDLE_INIT);
 bc2:	19 dd       	rcall	.-1486   	; 0x5f6 <nodectl_handler_register>
 bc4:	20 e0       	ldi	r18, 0x00	; 0
 bc6:	42 e0       	ldi	r20, 0x02	; 2
 bc8:	be 01       	movw	r22, r28
 bca:	6f 5f       	subi	r22, 0xFF	; 255
 bcc:	7f 4f       	sbci	r23, 0xFF	; 255
 bce:	80 e4       	ldi	r24, 0x40	; 64
 bd0:	90 e0       	ldi	r25, 0x00	; 0

	can_filter(128);
 bd2:	3d dd       	rcall	.-1414   	; 0x64e <nodectl_handler_execute>
 bd4:	80 e8       	ldi	r24, 0x80	; 128
 bd6:	90 e0       	ldi	r25, 0x00	; 0
	nodectl_node_register(128);
 bd8:	e7 da       	rcall	.-2610   	; 0x1a8 <can_filter>
 bda:	80 e8       	ldi	r24, 0x80	; 128
 bdc:	90 e0       	ldi	r25, 0x00	; 0
	nodectl_handler_register(128, node5_handle_init, NODECTL_HANDLE_INIT);
 bde:	eb dc       	rcall	.-1578   	; 0x5b6 <nodectl_node_register>
 be0:	40 e0       	ldi	r20, 0x00	; 0
 be2:	62 ec       	ldi	r22, 0xC2	; 194
 be4:	74 e0       	ldi	r23, 0x04	; 4
 be6:	80 e8       	ldi	r24, 0x80	; 128
 be8:	90 e0       	ldi	r25, 0x00	; 0
	nodectl_handler_register(128, node5_handle_receive, NODECTL_HANDLE_RECEIVE);
 bea:	05 dd       	rcall	.-1526   	; 0x5f6 <nodectl_handler_register>
 bec:	41 e0       	ldi	r20, 0x01	; 1
 bee:	66 ed       	ldi	r22, 0xD6	; 214
 bf0:	74 e0       	ldi	r23, 0x04	; 4
 bf2:	80 e8       	ldi	r24, 0x80	; 128
 bf4:	90 e0       	ldi	r25, 0x00	; 0
	nodectl_handler_execute(128, (void *)&node_init_val, 2, NODECTL_HANDLE_INIT);
 bf6:	ff dc       	rcall	.-1538   	; 0x5f6 <nodectl_handler_register>
 bf8:	20 e0       	ldi	r18, 0x00	; 0
 bfa:	42 e0       	ldi	r20, 0x02	; 2
 bfc:	be 01       	movw	r22, r28
 bfe:	6f 5f       	subi	r22, 0xFF	; 255
 c00:	7f 4f       	sbci	r23, 0xFF	; 255
 c02:	80 e8       	ldi	r24, 0x80	; 128

	can_filter(256);
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	23 dd       	rcall	.-1466   	; 0x64e <nodectl_handler_execute>
 c08:	80 e0       	ldi	r24, 0x00	; 0
	nodectl_node_register(256);
 c0a:	91 e0       	ldi	r25, 0x01	; 1
 c0c:	cd da       	rcall	.-2662   	; 0x1a8 <can_filter>
 c0e:	80 e0       	ldi	r24, 0x00	; 0
	nodectl_handler_register(256, node6_handle_init, NODECTL_HANDLE_INIT);
 c10:	91 e0       	ldi	r25, 0x01	; 1
 c12:	d1 dc       	rcall	.-1630   	; 0x5b6 <nodectl_node_register>
 c14:	40 e0       	ldi	r20, 0x00	; 0
 c16:	6c ee       	ldi	r22, 0xEC	; 236
 c18:	74 e0       	ldi	r23, 0x04	; 4
 c1a:	80 e0       	ldi	r24, 0x00	; 0
	nodectl_handler_register(256, node6_handle_receive, NODECTL_HANDLE_RECEIVE);
 c1c:	91 e0       	ldi	r25, 0x01	; 1
 c1e:	eb dc       	rcall	.-1578   	; 0x5f6 <nodectl_handler_register>
 c20:	41 e0       	ldi	r20, 0x01	; 1
 c22:	60 e0       	ldi	r22, 0x00	; 0
 c24:	75 e0       	ldi	r23, 0x05	; 5
 c26:	80 e0       	ldi	r24, 0x00	; 0
	nodectl_handler_execute(256, (void *)&node_init_val, 2, NODECTL_HANDLE_INIT);
 c28:	91 e0       	ldi	r25, 0x01	; 1
 c2a:	e5 dc       	rcall	.-1590   	; 0x5f6 <nodectl_handler_register>
 c2c:	20 e0       	ldi	r18, 0x00	; 0
 c2e:	42 e0       	ldi	r20, 0x02	; 2
 c30:	be 01       	movw	r22, r28
 c32:	6f 5f       	subi	r22, 0xFF	; 255
 c34:	7f 4f       	sbci	r23, 0xFF	; 255

	can_filter(512);
 c36:	80 e0       	ldi	r24, 0x00	; 0
 c38:	91 e0       	ldi	r25, 0x01	; 1
 c3a:	09 dd       	rcall	.-1518   	; 0x64e <nodectl_handler_execute>
	nodectl_node_register(512);
 c3c:	80 e0       	ldi	r24, 0x00	; 0
 c3e:	92 e0       	ldi	r25, 0x02	; 2
 c40:	b3 da       	rcall	.-2714   	; 0x1a8 <can_filter>
 c42:	80 e0       	ldi	r24, 0x00	; 0
	nodectl_handler_register(512, node7_handle_init, NODECTL_HANDLE_INIT);
 c44:	92 e0       	ldi	r25, 0x02	; 2
 c46:	b7 dc       	rcall	.-1682   	; 0x5b6 <nodectl_node_register>
 c48:	40 e0       	ldi	r20, 0x00	; 0
 c4a:	66 e1       	ldi	r22, 0x16	; 22
 c4c:	75 e0       	ldi	r23, 0x05	; 5
 c4e:	80 e0       	ldi	r24, 0x00	; 0
	nodectl_handler_register(512, node7_handle_receive, NODECTL_HANDLE_RECEIVE);
 c50:	92 e0       	ldi	r25, 0x02	; 2
 c52:	d1 dc       	rcall	.-1630   	; 0x5f6 <nodectl_handler_register>
 c54:	41 e0       	ldi	r20, 0x01	; 1
 c56:	6a e2       	ldi	r22, 0x2A	; 42
 c58:	75 e0       	ldi	r23, 0x05	; 5
 c5a:	80 e0       	ldi	r24, 0x00	; 0
	nodectl_handler_execute(512, (void *)&node_init_val, 2, NODECTL_HANDLE_INIT);
 c5c:	92 e0       	ldi	r25, 0x02	; 2
 c5e:	cb dc       	rcall	.-1642   	; 0x5f6 <nodectl_handler_register>
 c60:	20 e0       	ldi	r18, 0x00	; 0
 c62:	42 e0       	ldi	r20, 0x02	; 2
 c64:	be 01       	movw	r22, r28
 c66:	6f 5f       	subi	r22, 0xFF	; 255
 c68:	7f 4f       	sbci	r23, 0xFF	; 255
 c6a:	80 e0       	ldi	r24, 0x00	; 0

	can_filter(1024);
 c6c:	92 e0       	ldi	r25, 0x02	; 2
 c6e:	ef dc       	rcall	.-1570   	; 0x64e <nodectl_handler_execute>
 c70:	80 e0       	ldi	r24, 0x00	; 0
 c72:	94 e0       	ldi	r25, 0x04	; 4
	nodectl_node_register(1024);
 c74:	99 da       	rcall	.-2766   	; 0x1a8 <can_filter>
 c76:	80 e0       	ldi	r24, 0x00	; 0
	nodectl_handler_register(1024, node8_handle_init, NODECTL_HANDLE_INIT);
 c78:	94 e0       	ldi	r25, 0x04	; 4
 c7a:	9d dc       	rcall	.-1734   	; 0x5b6 <nodectl_node_register>
 c7c:	40 e0       	ldi	r20, 0x00	; 0
 c7e:	60 e4       	ldi	r22, 0x40	; 64
 c80:	75 e0       	ldi	r23, 0x05	; 5
 c82:	80 e0       	ldi	r24, 0x00	; 0
 c84:	94 e0       	ldi	r25, 0x04	; 4
	nodectl_handler_register(1024, node8_handle_receive, NODECTL_HANDLE_RECEIVE);
 c86:	b7 dc       	rcall	.-1682   	; 0x5f6 <nodectl_handler_register>
 c88:	41 e0       	ldi	r20, 0x01	; 1
 c8a:	64 e5       	ldi	r22, 0x54	; 84
 c8c:	75 e0       	ldi	r23, 0x05	; 5
 c8e:	80 e0       	ldi	r24, 0x00	; 0
 c90:	94 e0       	ldi	r25, 0x04	; 4
 c92:	b1 dc       	rcall	.-1694   	; 0x5f6 <nodectl_handler_register>
	nodectl_handler_execute(1024, (void *)&node_init_val, 2, NODECTL_HANDLE_INIT);
 c94:	20 e0       	ldi	r18, 0x00	; 0
 c96:	42 e0       	ldi	r20, 0x02	; 2
 c98:	be 01       	movw	r22, r28
 c9a:	6f 5f       	subi	r22, 0xFF	; 255
 c9c:	7f 4f       	sbci	r23, 0xFF	; 255
 c9e:	80 e0       	ldi	r24, 0x00	; 0
 ca0:	94 e0       	ldi	r25, 0x04	; 4
 ca2:	d5 dc       	rcall	.-1622   	; 0x64e <nodectl_handler_execute>
 ca4:	78 94       	sei
	
	sei();
 ca6:	11 c0       	rjmp	.+34     	; 0xcca <main+0x1f6>
 ca8:	ae 01       	movw	r20, r28
	while (1) {

		/* Get received node messages and hand them
		 * to the corresponding node handler. */
		while (can_message_available()) {
			can_receive(&can_id, can_msg, &can_msg_size);
 caa:	43 5f       	subi	r20, 0xF3	; 243
 cac:	5f 4f       	sbci	r21, 0xFF	; 255
 cae:	be 01       	movw	r22, r28
 cb0:	6b 5f       	subi	r22, 0xFB	; 251
 cb2:	7f 4f       	sbci	r23, 0xFF	; 255
 cb4:	ce 01       	movw	r24, r28
 cb6:	03 96       	adiw	r24, 0x03	; 3
 cb8:	bc da       	rcall	.-2696   	; 0x232 <can_receive>
 cba:	21 e0       	ldi	r18, 0x01	; 1
 cbc:	4d 85       	ldd	r20, Y+13	; 0x0d
			nodectl_handler_execute(can_id, can_msg, can_msg_size, NODECTL_HANDLE_RECEIVE);
 cbe:	be 01       	movw	r22, r28
 cc0:	6b 5f       	subi	r22, 0xFB	; 251
 cc2:	7f 4f       	sbci	r23, 0xFF	; 255
 cc4:	8b 81       	ldd	r24, Y+3	; 0x03
 cc6:	9c 81       	ldd	r25, Y+4	; 0x04
 cc8:	c2 dc       	rcall	.-1660   	; 0x64e <nodectl_handler_execute>
 cca:	aa da       	rcall	.-2732   	; 0x220 <can_message_available>
 ccc:	81 11       	cpse	r24, r1
 cce:	ec cf       	rjmp	.-40     	; 0xca8 <main+0x1d4>
	// Main loop
	while (1) {

		/* Get received node messages and hand them
		 * to the corresponding node handler. */
		while (can_message_available()) {
 cd0:	fc cf       	rjmp	.-8      	; 0xcca <main+0x1f6>

00000cd2 <_exit>:
 cd2:	f8 94       	cli

00000cd4 <__stop_program>:
 cd4:	ff cf       	rjmp	.-2      	; 0xcd4 <__stop_program>
