
atmelstudio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ce2  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b2d  00000000  00000000  0000101e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000477  00000000  00000000  00001b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000561  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000285  00000000  00000000  000025f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000287a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	4f c0       	rjmp	.+158    	; 0xa4 <__bad_interrupt>
   6:	00 00       	nop
   8:	4d c0       	rjmp	.+154    	; 0xa4 <__bad_interrupt>
   a:	00 00       	nop
   c:	4b c0       	rjmp	.+150    	; 0xa4 <__bad_interrupt>
   e:	00 00       	nop
  10:	49 c0       	rjmp	.+146    	; 0xa4 <__bad_interrupt>
  12:	00 00       	nop
  14:	47 c0       	rjmp	.+142    	; 0xa4 <__bad_interrupt>
  16:	00 00       	nop
  18:	45 c0       	rjmp	.+138    	; 0xa4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	43 c0       	rjmp	.+134    	; 0xa4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	41 c0       	rjmp	.+130    	; 0xa4 <__bad_interrupt>
  22:	00 00       	nop
  24:	3f c0       	rjmp	.+126    	; 0xa4 <__bad_interrupt>
  26:	00 00       	nop
  28:	3d c0       	rjmp	.+122    	; 0xa4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3b c0       	rjmp	.+118    	; 0xa4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	39 c0       	rjmp	.+114    	; 0xa4 <__bad_interrupt>
  32:	00 00       	nop
  34:	37 c0       	rjmp	.+110    	; 0xa4 <__bad_interrupt>
  36:	00 00       	nop
  38:	35 c0       	rjmp	.+106    	; 0xa4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	33 c0       	rjmp	.+102    	; 0xa4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	31 c0       	rjmp	.+98     	; 0xa4 <__bad_interrupt>
  42:	00 00       	nop
  44:	2f c0       	rjmp	.+94     	; 0xa4 <__bad_interrupt>
  46:	00 00       	nop
  48:	2d c0       	rjmp	.+90     	; 0xa4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2b c0       	rjmp	.+86     	; 0xa4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	29 c0       	rjmp	.+82     	; 0xa4 <__bad_interrupt>
  52:	00 00       	nop
  54:	27 c0       	rjmp	.+78     	; 0xa4 <__bad_interrupt>
  56:	00 00       	nop
  58:	25 c0       	rjmp	.+74     	; 0xa4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	23 c0       	rjmp	.+70     	; 0xa4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	21 c0       	rjmp	.+66     	; 0xa4 <__bad_interrupt>
  62:	00 00       	nop
  64:	1f c0       	rjmp	.+62     	; 0xa4 <__bad_interrupt>
  66:	00 00       	nop
  68:	1d c0       	rjmp	.+58     	; 0xa4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1b c0       	rjmp	.+54     	; 0xa4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	19 c0       	rjmp	.+50     	; 0xa4 <__bad_interrupt>
  72:	00 00       	nop
  74:	17 c0       	rjmp	.+46     	; 0xa4 <__bad_interrupt>
  76:	00 00       	nop
  78:	15 c0       	rjmp	.+42     	; 0xa4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	13 c0       	rjmp	.+38     	; 0xa4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	11 c0       	rjmp	.+34     	; 0xa4 <__bad_interrupt>
  82:	00 00       	nop
  84:	0f c0       	rjmp	.+30     	; 0xa4 <__bad_interrupt>
  86:	00 00       	nop
  88:	0d c0       	rjmp	.+26     	; 0xa4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	0b c0       	rjmp	.+22     	; 0xa4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	09 c0       	rjmp	.+18     	; 0xa4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	a6 d0       	rcall	.+332    	; 0x1ee <main>
  a2:	bb c0       	rjmp	.+374    	; 0x21a <_exit>

000000a4 <__bad_interrupt>:
  a4:	ad cf       	rjmp	.-166    	; 0x0 <__vectors>

000000a6 <can_init>:
			// TODO: CANCDMOB/CONMOB needed to reenable reception?
			CANSTMOB &= ~_BV(RXOK);
			break;
		}
	}
}
  a6:	af 92       	push	r10
  a8:	bf 92       	push	r11
  aa:	cf 92       	push	r12
  ac:	df 92       	push	r13
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  c0:	94 e0       	ldi	r25, 0x04	; 4
  c2:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
  c6:	93 e1       	ldi	r25, 0x13	; 19
  c8:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
  cc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  d0:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
  d4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
  d8:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	a0 e0       	ldi	r26, 0x00	; 0
  e2:	b0 ef       	ldi	r27, 0xF0	; 240
  e4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
  e8:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
  ec:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
  f0:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	ed ee       	ldi	r30, 0xED	; 237
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	0e ee       	ldi	r16, 0xEE	; 238
  fe:	10 e0       	ldi	r17, 0x00	; 0
 100:	6f ee       	ldi	r22, 0xEF	; 239
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	50 e8       	ldi	r21, 0x80	; 128
 106:	c0 ef       	ldi	r28, 0xF0	; 240
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	0f 2e       	mov	r0, r31
 10c:	f4 ef       	ldi	r31, 0xF4	; 244
 10e:	af 2e       	mov	r10, r31
 110:	b1 2c       	mov	r11, r1
 112:	f0 2d       	mov	r31, r0
 114:	cc 24       	eor	r12, r12
 116:	ca 94       	dec	r12
 118:	dc 2c       	mov	r13, r12
 11a:	76 01       	movw	r14, r12
 11c:	40 81       	ld	r20, Z
 11e:	9c 01       	movw	r18, r24
 120:	22 95       	swap	r18
 122:	32 95       	swap	r19
 124:	30 7f       	andi	r19, 0xF0	; 240
 126:	32 27       	eor	r19, r18
 128:	20 7f       	andi	r18, 0xF0	; 240
 12a:	32 27       	eor	r19, r18
 12c:	34 2f       	mov	r19, r20
 12e:	3f 70       	andi	r19, 0x0F	; 15
 130:	23 2b       	or	r18, r19
 132:	20 83       	st	Z, r18
 134:	d8 01       	movw	r26, r16
 136:	1c 92       	st	X, r1
 138:	db 01       	movw	r26, r22
 13a:	5c 93       	st	X, r21
 13c:	18 82       	st	Y, r1
 13e:	19 82       	std	Y+1, r1	; 0x01
 140:	1a 82       	std	Y+2, r1	; 0x02
 142:	1b 82       	std	Y+3, r1	; 0x03
 144:	d5 01       	movw	r26, r10
 146:	cd 92       	st	X+, r12
 148:	dd 92       	st	X+, r13
 14a:	ed 92       	st	X+, r14
 14c:	fc 92       	st	X, r15
 14e:	13 97       	sbiw	r26, 0x03	; 3
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	8e 30       	cpi	r24, 0x0E	; 14
 154:	91 05       	cpc	r25, r1
 156:	11 f7       	brne	.-60     	; 0x11c <can_init+0x76>
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	ff 90       	pop	r15
 162:	ef 90       	pop	r14
 164:	df 90       	pop	r13
 166:	cf 90       	pop	r12
 168:	bf 90       	pop	r11
 16a:	af 90       	pop	r10
 16c:	08 95       	ret

0000016e <can_filter>:
 16e:	ed ee       	ldi	r30, 0xED	; 237
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	90 81       	ld	r25, Z
 174:	9f 70       	andi	r25, 0x0F	; 15
 176:	90 61       	ori	r25, 0x10	; 16
 178:	90 83       	st	Z, r25
 17a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 17e:	99 23       	and	r25, r25
 180:	99 f0       	breq	.+38     	; 0x1a8 <can_filter+0x3a>
 182:	42 e0       	ldi	r20, 0x02	; 2
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	a3 ef       	ldi	r26, 0xF3	; 243
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	20 81       	ld	r18, Z
 18c:	92 2f       	mov	r25, r18
 18e:	9f 70       	andi	r25, 0x0F	; 15
 190:	9a 01       	movw	r18, r20
 192:	22 95       	swap	r18
 194:	32 95       	swap	r19
 196:	30 7f       	andi	r19, 0xF0	; 240
 198:	32 27       	eor	r19, r18
 19a:	20 7f       	andi	r18, 0xF0	; 240
 19c:	32 27       	eor	r19, r18
 19e:	29 2b       	or	r18, r25
 1a0:	20 83       	st	Z, r18
 1a2:	9c 91       	ld	r25, X
 1a4:	91 11       	cpse	r25, r1
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <can_filter+0x40>
 1a8:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1ac:	08 95       	ret
 1ae:	4f 5f       	subi	r20, 0xFF	; 255
 1b0:	5f 4f       	sbci	r21, 0xFF	; 255
 1b2:	4e 30       	cpi	r20, 0x0E	; 14
 1b4:	51 05       	cpc	r21, r1
 1b6:	49 f7       	brne	.-46     	; 0x18a <can_filter+0x1c>
 1b8:	08 95       	ret

000001ba <can_send>:

void can_send(uint8_t *dat, uint8_t len) {

	// Select MOb0
	CANPAGE = 0x00;
 1ba:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	// Set message
	uint8_t dat_i;
	for (dat_i = 0; dat_i < len; dat_i++) {
 1be:	66 23       	and	r22, r22
 1c0:	79 f0       	breq	.+30     	; 0x1e0 <can_send+0x26>
 1c2:	fc 01       	movw	r30, r24
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	26 0f       	add	r18, r22
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	2f 5f       	subi	r18, 0xFF	; 255
 1cc:	3f 4f       	sbci	r19, 0xFF	; 255
 1ce:	28 0f       	add	r18, r24
 1d0:	39 1f       	adc	r19, r25
		CANMSG = *(dat+dat_i);
 1d2:	aa ef       	ldi	r26, 0xFA	; 250
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	91 91       	ld	r25, Z+
 1d8:	9c 93       	st	X, r25
	// Select MOb0
	CANPAGE = 0x00;

	// Set message
	uint8_t dat_i;
	for (dat_i = 0; dat_i < len; dat_i++) {
 1da:	e2 17       	cp	r30, r18
 1dc:	f3 07       	cpc	r31, r19
 1de:	d9 f7       	brne	.-10     	; 0x1d6 <can_send+0x1c>
		CANMSG = *(dat+dat_i);
	}

	// Set message length and start transmission
	CANCDMOB = _BV(CONMOB0) | (len & 0x0F);
 1e0:	6f 70       	andi	r22, 0x0F	; 15
 1e2:	60 64       	ori	r22, 0x40	; 64
 1e4:	ef ee       	ldi	r30, 0xEF	; 239
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	60 83       	st	Z, r22
	CANCDMOB = 0x00;
 1ea:	10 82       	st	Z, r1
 1ec:	08 95       	ret

000001ee <main>:
#include <can.h>
#include <logger.h>
#include <nodeman.h>
#include <spi.h>

int main (void) {
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <main+0x6>
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <main+0x8>
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
	
	can_init();
 1fa:	55 df       	rcall	.-342    	; 0xa6 <can_init>
	can_filter(1);
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	b7 df       	rcall	.-146    	; 0x16e <can_filter>

	uint8_t dat[4] = {1,2,3,4};
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	8a 83       	std	Y+2, r24	; 0x02
 208:	83 e0       	ldi	r24, 0x03	; 3
 20a:	8b 83       	std	Y+3, r24	; 0x03
 20c:	84 e0       	ldi	r24, 0x04	; 4
 20e:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t len = 4;
	can_send(dat, len);
 210:	64 e0       	ldi	r22, 0x04	; 4
 212:	ce 01       	movw	r24, r28
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	d1 df       	rcall	.-94     	; 0x1ba <can_send>
 218:	ff cf       	rjmp	.-2      	; 0x218 <main+0x2a>

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
