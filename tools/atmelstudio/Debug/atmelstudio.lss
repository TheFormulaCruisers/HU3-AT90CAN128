
atmelstudio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000320  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d8d  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b31  00000000  00000000  000011c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f0  00000000  00000000  00001cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000021ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000057c  00000000  00000000  000022b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000310  00000000  00000000  00002830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	4f c0       	rjmp	.+158    	; 0xa4 <__bad_interrupt>
   6:	00 00       	nop
   8:	4d c0       	rjmp	.+154    	; 0xa4 <__bad_interrupt>
   a:	00 00       	nop
   c:	4b c0       	rjmp	.+150    	; 0xa4 <__bad_interrupt>
   e:	00 00       	nop
  10:	49 c0       	rjmp	.+146    	; 0xa4 <__bad_interrupt>
  12:	00 00       	nop
  14:	47 c0       	rjmp	.+142    	; 0xa4 <__bad_interrupt>
  16:	00 00       	nop
  18:	45 c0       	rjmp	.+138    	; 0xa4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	43 c0       	rjmp	.+134    	; 0xa4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	41 c0       	rjmp	.+130    	; 0xa4 <__bad_interrupt>
  22:	00 00       	nop
  24:	3f c0       	rjmp	.+126    	; 0xa4 <__bad_interrupt>
  26:	00 00       	nop
  28:	3d c0       	rjmp	.+122    	; 0xa4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3b c0       	rjmp	.+118    	; 0xa4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	39 c0       	rjmp	.+114    	; 0xa4 <__bad_interrupt>
  32:	00 00       	nop
  34:	37 c0       	rjmp	.+110    	; 0xa4 <__bad_interrupt>
  36:	00 00       	nop
  38:	35 c0       	rjmp	.+106    	; 0xa4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	33 c0       	rjmp	.+102    	; 0xa4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	31 c0       	rjmp	.+98     	; 0xa4 <__bad_interrupt>
  42:	00 00       	nop
  44:	2f c0       	rjmp	.+94     	; 0xa4 <__bad_interrupt>
  46:	00 00       	nop
  48:	2d c0       	rjmp	.+90     	; 0xa4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2b c0       	rjmp	.+86     	; 0xa4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	29 c0       	rjmp	.+82     	; 0xa4 <__bad_interrupt>
  52:	00 00       	nop
  54:	27 c0       	rjmp	.+78     	; 0xa4 <__bad_interrupt>
  56:	00 00       	nop
  58:	25 c0       	rjmp	.+74     	; 0xa4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	23 c0       	rjmp	.+70     	; 0xa4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	21 c0       	rjmp	.+66     	; 0xa4 <__bad_interrupt>
  62:	00 00       	nop
  64:	1f c0       	rjmp	.+62     	; 0xa4 <__bad_interrupt>
  66:	00 00       	nop
  68:	1d c0       	rjmp	.+58     	; 0xa4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1b c0       	rjmp	.+54     	; 0xa4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	19 c0       	rjmp	.+50     	; 0xa4 <__bad_interrupt>
  72:	00 00       	nop
  74:	17 c0       	rjmp	.+46     	; 0xa4 <__bad_interrupt>
  76:	00 00       	nop
  78:	15 c0       	rjmp	.+42     	; 0xa4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	13 c0       	rjmp	.+38     	; 0xa4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	11 c0       	rjmp	.+34     	; 0xa4 <__bad_interrupt>
  82:	00 00       	nop
  84:	0f c0       	rjmp	.+30     	; 0xa4 <__bad_interrupt>
  86:	00 00       	nop
  88:	0d c0       	rjmp	.+26     	; 0xa4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	0b c0       	rjmp	.+22     	; 0xa4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	09 c0       	rjmp	.+18     	; 0xa4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	07 d1       	rcall	.+526    	; 0x2b0 <main>
  a2:	3c c1       	rjmp	.+632    	; 0x31c <_exit>

000000a4 <__bad_interrupt>:
  a4:	ad cf       	rjmp	.-166    	; 0x0 <__vectors>

000000a6 <can_init>:
		(uint32_t)(uint8_t)(id << 3) | 
		(uint32_t)(uint8_t)(id >> 5) << 8 |
		(uint32_t)(uint8_t)(id >> 13) << 16;
}

void can_init(uint16_t id) {
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	
	// Reset CAN controller
	CANGCON = _BV(SWRES);
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	
	// Set CAN timing bits
	CANBT1 = 0x02;
  b8:	32 e0       	ldi	r19, 0x02	; 2
  ba:	30 93 e2 00 	sts	0x00E2, r19	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x04;
  be:	34 e0       	ldi	r19, 0x04	; 4
  c0:	30 93 e3 00 	sts	0x00E3, r19	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x13;
  c4:	33 e1       	ldi	r19, 0x13	; 19
  c6:	30 93 e4 00 	sts	0x00E4, r19	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	
	// Enable interrupt(s)
	CANIE2 = _BV(IEMOB0);
  ca:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	CANGIE = _BV(ENIT);
  ce:	20 e8       	ldi	r18, 0x80	; 128
  d0:	20 93 db 00 	sts	0x00DB, r18	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Initialize MOb0 (tx)
	CANPAGE = 0x00;
  d4:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	CANSTMOB = 0x00;
  d8:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
  dc:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	CANIDM = 0xFFFFFFFF;
  e0:	4f ef       	ldi	r20, 0xFF	; 255
  e2:	5f ef       	ldi	r21, 0xFF	; 255
  e4:	ba 01       	movw	r22, r20
  e6:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
  ea:	50 93 f5 00 	sts	0x00F5, r21	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
  ee:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
  f2:	70 93 f7 00 	sts	0x00F7, r23	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
#include <can.h>

// Convert an ID to the CAN revision 2.0A IDT-register format.
static uint32_t _id_to_idt_2a(uint16_t id) {
	return
		(uint32_t)(uint8_t)(id << 5) << 16 | 
  f6:	28 2f       	mov	r18, r24
  f8:	22 95       	swap	r18
  fa:	22 0f       	add	r18, r18
  fc:	20 7e       	andi	r18, 0xE0	; 224
  fe:	96 95       	lsr	r25
 100:	87 95       	ror	r24
 102:	96 95       	lsr	r25
 104:	87 95       	ror	r24
 106:	96 95       	lsr	r25
 108:	87 95       	ror	r24
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	b8 2f       	mov	r27, r24
 112:	aa 27       	eor	r26, r26
 114:	99 27       	eor	r25, r25
 116:	88 27       	eor	r24, r24
 118:	a2 2b       	or	r26, r18
	// Initialize MOb0 (tx)
	CANPAGE = 0x00;
	CANSTMOB = 0x00;
	CANCDMOB = 0x00;
	CANIDM = 0xFFFFFFFF;
	CANIDT = _id_to_idt_2a(id);
 11a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 11e:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 122:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 126:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Initialize MOb1 to MOb14 (rx)
	// CAN revision 2.0A
	uint8_t dat_i;
	for (dat_i = 1; dat_i < 14; dat_i++) {
 12a:	81 e0       	ldi	r24, 0x01	; 1
		CANPAGE = dat_i << 4;
 12c:	0d ee       	ldi	r16, 0xED	; 237
 12e:	10 e0       	ldi	r17, 0x00	; 0
		CANSTMOB = 0x00;
 130:	2e ee       	ldi	r18, 0xEE	; 238
 132:	30 e0       	ldi	r19, 0x00	; 0
		CANCDMOB = 0x00;
 134:	cf ee       	ldi	r28, 0xEF	; 239
 136:	d0 e0       	ldi	r29, 0x00	; 0
		CANIDM = 0xFFFFFFFF;
 138:	a4 ef       	ldi	r26, 0xF4	; 244
 13a:	b0 e0       	ldi	r27, 0x00	; 0
		CANIDT = 0x00000000;
 13c:	0f 2e       	mov	r0, r31
 13e:	f0 ef       	ldi	r31, 0xF0	; 240
 140:	ef 2e       	mov	r14, r31
 142:	f1 2c       	mov	r15, r1
 144:	f0 2d       	mov	r31, r0

	// Initialize MOb1 to MOb14 (rx)
	// CAN revision 2.0A
	uint8_t dat_i;
	for (dat_i = 1; dat_i < 14; dat_i++) {
		CANPAGE = dat_i << 4;
 146:	98 2f       	mov	r25, r24
 148:	92 95       	swap	r25
 14a:	90 7f       	andi	r25, 0xF0	; 240
 14c:	f8 01       	movw	r30, r16
 14e:	90 83       	st	Z, r25
		CANSTMOB = 0x00;
 150:	f9 01       	movw	r30, r18
 152:	10 82       	st	Z, r1
		CANCDMOB = 0x00;
 154:	18 82       	st	Y, r1
		CANIDM = 0xFFFFFFFF;
 156:	4d 93       	st	X+, r20
 158:	5d 93       	st	X+, r21
 15a:	6d 93       	st	X+, r22
 15c:	7c 93       	st	X, r23
 15e:	13 97       	sbiw	r26, 0x03	; 3
		CANIDT = 0x00000000;
 160:	f7 01       	movw	r30, r14
 162:	10 82       	st	Z, r1
 164:	11 82       	std	Z+1, r1	; 0x01
 166:	12 82       	std	Z+2, r1	; 0x02
 168:	13 82       	std	Z+3, r1	; 0x03
	CANIDT = _id_to_idt_2a(id);

	// Initialize MOb1 to MOb14 (rx)
	// CAN revision 2.0A
	uint8_t dat_i;
	for (dat_i = 1; dat_i < 14; dat_i++) {
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	8e 30       	cpi	r24, 0x0E	; 14
 16e:	59 f7       	brne	.-42     	; 0x146 <can_init+0xa0>
		CANIDM = 0xFFFFFFFF;
		CANIDT = 0x00000000;
	}

	// Enable CAN controller
	CANGCON = _BV(ENASTB);
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	ff 90       	pop	r15
 180:	ef 90       	pop	r14
 182:	08 95       	ret

00000184 <can_filter>:

void can_filter(uint16_t id) {
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	ec 01       	movw	r28, r24
    
	uint8_t dat_i;
	for (dat_i = 1; dat_i < 14; dat_i++) {

		// Select MOb[i]
		CANPAGE = dat_i << 4;
 18a:	80 e1       	ldi	r24, 0x10	; 16
 18c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Use MOb[i] if its id is zero (i.e. not yet set)
		if (CANIDT == 0x00000000) {
 190:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 194:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 198:	a0 91 f2 00 	lds	r26, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 19c:	b0 91 f3 00 	lds	r27, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1a0:	89 2b       	or	r24, r25
 1a2:	8a 2b       	or	r24, r26
 1a4:	8b 2b       	or	r24, r27
 1a6:	89 f0       	breq	.+34     	; 0x1ca <can_filter+0x46>
 1a8:	92 e0       	ldi	r25, 0x02	; 2
    
	uint8_t dat_i;
	for (dat_i = 1; dat_i < 14; dat_i++) {

		// Select MOb[i]
		CANPAGE = dat_i << 4;
 1aa:	ad ee       	ldi	r26, 0xED	; 237
 1ac:	b0 e0       	ldi	r27, 0x00	; 0

		// Use MOb[i] if its id is zero (i.e. not yet set)
		if (CANIDT == 0x00000000) {
 1ae:	e0 ef       	ldi	r30, 0xF0	; 240
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
    
	uint8_t dat_i;
	for (dat_i = 1; dat_i < 14; dat_i++) {

		// Select MOb[i]
		CANPAGE = dat_i << 4;
 1b2:	29 2f       	mov	r18, r25
 1b4:	22 95       	swap	r18
 1b6:	20 7f       	andi	r18, 0xF0	; 240
 1b8:	2c 93       	st	X, r18

		// Use MOb[i] if its id is zero (i.e. not yet set)
		if (CANIDT == 0x00000000) {
 1ba:	40 81       	ld	r20, Z
 1bc:	51 81       	ldd	r21, Z+1	; 0x01
 1be:	62 81       	ldd	r22, Z+2	; 0x02
 1c0:	73 81       	ldd	r23, Z+3	; 0x03
 1c2:	45 2b       	or	r20, r21
 1c4:	46 2b       	or	r20, r22
 1c6:	47 2b       	or	r20, r23
 1c8:	f9 f4       	brne	.+62     	; 0x208 <can_filter+0x84>
#include <can.h>

// Convert an ID to the CAN revision 2.0A IDT-register format.
static uint32_t _id_to_idt_2a(uint16_t id) {
	return
		(uint32_t)(uint8_t)(id << 5) << 16 | 
 1ca:	2c 2f       	mov	r18, r28
 1cc:	22 95       	swap	r18
 1ce:	22 0f       	add	r18, r18
 1d0:	20 7e       	andi	r18, 0xE0	; 224
 1d2:	ce 01       	movw	r24, r28
 1d4:	96 95       	lsr	r25
 1d6:	87 95       	ror	r24
 1d8:	96 95       	lsr	r25
 1da:	87 95       	ror	r24
 1dc:	96 95       	lsr	r25
 1de:	87 95       	ror	r24
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	a0 e0       	ldi	r26, 0x00	; 0
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	b8 2f       	mov	r27, r24
 1e8:	aa 27       	eor	r26, r26
 1ea:	99 27       	eor	r25, r25
 1ec:	88 27       	eor	r24, r24
 1ee:	a2 2b       	or	r26, r18
		// Select MOb[i]
		CANPAGE = dat_i << 4;

		// Use MOb[i] if its id is zero (i.e. not yet set)
		if (CANIDT == 0x00000000) {
			CANIDT = _id_to_idt_2a(id);
 1f0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1f4:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 1f8:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 1fc:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
			CANCDMOB = _BV(CONMOB1);
 200:	80 e8       	ldi	r24, 0x80	; 128
 202:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			break;
 206:	03 c0       	rjmp	.+6      	; 0x20e <can_filter+0x8a>
}

void can_filter(uint16_t id) {
    
	uint8_t dat_i;
	for (dat_i = 1; dat_i < 14; dat_i++) {
 208:	9f 5f       	subi	r25, 0xFF	; 255
 20a:	9e 30       	cpi	r25, 0x0E	; 14
 20c:	91 f6       	brne	.-92     	; 0x1b2 <can_filter+0x2e>
			CANIDT = _id_to_idt_2a(id);
			CANCDMOB = _BV(CONMOB1);
			break;
		}
	}
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <can_receive>:

void can_receive(uint16_t *id, uint8_t *dat, uint8_t *len) {
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	8c 01       	movw	r16, r24
 21e:	ea 01       	movw	r28, r20

	uint8_t mob_i;
	for (mob_i = 1; mob_i < 14; mob_i++) {

		// Select MOb[i]
		CANPAGE = mob_i << 4;
 220:	80 e1       	ldi	r24, 0x10	; 16
 222:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Read MOb[i] if its reception bit has been set
		if (CANSTMOB & _BV(RXOK)) {
 226:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 22a:	85 fd       	sbrc	r24, 5
 22c:	0c c0       	rjmp	.+24     	; 0x246 <can_receive+0x32>
 22e:	92 e0       	ldi	r25, 0x02	; 2

	uint8_t mob_i;
	for (mob_i = 1; mob_i < 14; mob_i++) {

		// Select MOb[i]
		CANPAGE = mob_i << 4;
 230:	ad ee       	ldi	r26, 0xED	; 237
 232:	b0 e0       	ldi	r27, 0x00	; 0

		// Read MOb[i] if its reception bit has been set
		if (CANSTMOB & _BV(RXOK)) {
 234:	ee ee       	ldi	r30, 0xEE	; 238
 236:	f0 e0       	ldi	r31, 0x00	; 0

	uint8_t mob_i;
	for (mob_i = 1; mob_i < 14; mob_i++) {

		// Select MOb[i]
		CANPAGE = mob_i << 4;
 238:	29 2f       	mov	r18, r25
 23a:	22 95       	swap	r18
 23c:	20 7f       	andi	r18, 0xF0	; 240
 23e:	2c 93       	st	X, r18

		// Read MOb[i] if its reception bit has been set
		if (CANSTMOB & _BV(RXOK)) {
 240:	20 81       	ld	r18, Z
 242:	25 ff       	sbrs	r18, 5
 244:	2d c0       	rjmp	.+90     	; 0x2a0 <can_receive+0x8c>

			// Get id
			*id = CANIDT2 >> 5 | CANIDT1 << 3;
 246:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 24a:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 24e:	82 95       	swap	r24
 250:	86 95       	lsr	r24
 252:	87 70       	andi	r24, 0x07	; 7
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	22 0f       	add	r18, r18
 258:	33 1f       	adc	r19, r19
 25a:	22 0f       	add	r18, r18
 25c:	33 1f       	adc	r19, r19
 25e:	22 0f       	add	r18, r18
 260:	33 1f       	adc	r19, r19
 262:	28 2b       	or	r18, r24
 264:	f8 01       	movw	r30, r16
 266:	31 83       	std	Z+1, r19	; 0x01
 268:	20 83       	st	Z, r18

			// Get message length
			*len = CANCDMOB & 0x0F;
 26a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 26e:	8f 70       	andi	r24, 0x0F	; 15
 270:	88 83       	st	Y, r24

			// Get message
			uint8_t dat_i;
			for (dat_i = 0; dat_i < *len; dat_i++) {
 272:	88 23       	and	r24, r24
 274:	61 f0       	breq	.+24     	; 0x28e <can_receive+0x7a>
 276:	80 e0       	ldi	r24, 0x00	; 0
				*(dat+dat_i) = CANMSG;
 278:	aa ef       	ldi	r26, 0xFA	; 250
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	9c 91       	ld	r25, X
 27e:	fb 01       	movw	r30, r22
 280:	e8 0f       	add	r30, r24
 282:	f1 1d       	adc	r31, r1
 284:	90 83       	st	Z, r25
			// Get message length
			*len = CANCDMOB & 0x0F;

			// Get message
			uint8_t dat_i;
			for (dat_i = 0; dat_i < *len; dat_i++) {
 286:	8f 5f       	subi	r24, 0xFF	; 255
 288:	98 81       	ld	r25, Y
 28a:	89 17       	cp	r24, r25
 28c:	b8 f3       	brcs	.-18     	; 0x27c <can_receive+0x68>
				*(dat+dat_i) = CANMSG;
			}

			// Reset reception bit and re-enable reception
			CANSTMOB &= ~_BV(RXOK);
 28e:	ee ee       	ldi	r30, 0xEE	; 238
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	8f 7d       	andi	r24, 0xDF	; 223
 296:	80 83       	st	Z, r24
			CANCDMOB = _BV(CONMOB1);
 298:	80 e8       	ldi	r24, 0x80	; 128
 29a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			break;
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <can_receive+0x92>
}

void can_receive(uint16_t *id, uint8_t *dat, uint8_t *len) {

	uint8_t mob_i;
	for (mob_i = 1; mob_i < 14; mob_i++) {
 2a0:	9f 5f       	subi	r25, 0xFF	; 255
 2a2:	9e 30       	cpi	r25, 0x0E	; 14
 2a4:	49 f6       	brne	.-110    	; 0x238 <can_receive+0x24>
			CANSTMOB &= ~_BV(RXOK);
			CANCDMOB = _BV(CONMOB1);
			break;
		}
	}
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17
 2ac:	0f 91       	pop	r16
 2ae:	08 95       	ret

000002b0 <main>:
#include <can.h>
#include <logger.h>
#include <nodeman.h>
#include <spi.h>

int main(void) {
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	2b 97       	sbiw	r28, 0x0b	; 11
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
	
	can_init(1);
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	ee de       	rcall	.-548    	; 0xa6 <can_init>
	can_filter(0);
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	5a df       	rcall	.-332    	; 0x184 <can_filter>
	sei();
 2d0:	78 94       	sei

	DDRC |= 0x30;
 2d2:	87 b1       	in	r24, 0x07	; 7
 2d4:	80 63       	ori	r24, 0x30	; 48
 2d6:	87 b9       	out	0x07, r24	; 7
	PORTC |= 0x30;
 2d8:	88 b1       	in	r24, 0x08	; 8
 2da:	80 63       	ori	r24, 0x30	; 48
 2dc:	88 b9       	out	0x08, r24	; 8
	uint16_t id;
	uint8_t dat[8];
	uint8_t len;

	while(1) {
		CANPAGE = 0x10;
 2de:	0f 2e       	mov	r0, r31
 2e0:	fd ee       	ldi	r31, 0xED	; 237
 2e2:	ef 2e       	mov	r14, r31
 2e4:	f1 2c       	mov	r15, r1
 2e6:	f0 2d       	mov	r31, r0
 2e8:	68 94       	set
 2ea:	dd 24       	eor	r13, r13
 2ec:	d4 f8       	bld	r13, 4
		while(!(CANSTMOB & _BV(RXOK)));
 2ee:	0e ee       	ldi	r16, 0xEE	; 238
 2f0:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t id;
	uint8_t dat[8];
	uint8_t len;

	while(1) {
		CANPAGE = 0x10;
 2f2:	f7 01       	movw	r30, r14
 2f4:	d0 82       	st	Z, r13
		while(!(CANSTMOB & _BV(RXOK)));
 2f6:	f8 01       	movw	r30, r16
 2f8:	80 81       	ld	r24, Z
 2fa:	85 ff       	sbrs	r24, 5
 2fc:	fc cf       	rjmp	.-8      	; 0x2f6 <main+0x46>
		can_receive(&id, dat, &len);
 2fe:	ae 01       	movw	r20, r28
 300:	45 5f       	subi	r20, 0xF5	; 245
 302:	5f 4f       	sbci	r21, 0xFF	; 255
 304:	be 01       	movw	r22, r28
 306:	6d 5f       	subi	r22, 0xFD	; 253
 308:	7f 4f       	sbci	r23, 0xFF	; 255
 30a:	ce 01       	movw	r24, r28
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	82 df       	rcall	.-252    	; 0x214 <can_receive>
		PORTC |= dat[0] & 0x30;
 310:	98 b1       	in	r25, 0x08	; 8
 312:	8b 81       	ldd	r24, Y+3	; 0x03
 314:	80 73       	andi	r24, 0x30	; 48
 316:	89 2b       	or	r24, r25
 318:	88 b9       	out	0x08, r24	; 8
	}
 31a:	eb cf       	rjmp	.-42     	; 0x2f2 <main+0x42>

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
