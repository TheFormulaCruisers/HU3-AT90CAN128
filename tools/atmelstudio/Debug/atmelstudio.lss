
atmelstudio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d12  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b2b  00000000  00000000  00001006  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f3  00000000  00000000  00001b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00002024  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000581  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000343  00000000  00000000  0000266d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000029b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	4f c0       	rjmp	.+158    	; 0xa4 <__bad_interrupt>
   6:	00 00       	nop
   8:	4d c0       	rjmp	.+154    	; 0xa4 <__bad_interrupt>
   a:	00 00       	nop
   c:	4b c0       	rjmp	.+150    	; 0xa4 <__bad_interrupt>
   e:	00 00       	nop
  10:	49 c0       	rjmp	.+146    	; 0xa4 <__bad_interrupt>
  12:	00 00       	nop
  14:	47 c0       	rjmp	.+142    	; 0xa4 <__bad_interrupt>
  16:	00 00       	nop
  18:	45 c0       	rjmp	.+138    	; 0xa4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	43 c0       	rjmp	.+134    	; 0xa4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	41 c0       	rjmp	.+130    	; 0xa4 <__bad_interrupt>
  22:	00 00       	nop
  24:	3f c0       	rjmp	.+126    	; 0xa4 <__bad_interrupt>
  26:	00 00       	nop
  28:	3d c0       	rjmp	.+122    	; 0xa4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3b c0       	rjmp	.+118    	; 0xa4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	39 c0       	rjmp	.+114    	; 0xa4 <__bad_interrupt>
  32:	00 00       	nop
  34:	37 c0       	rjmp	.+110    	; 0xa4 <__bad_interrupt>
  36:	00 00       	nop
  38:	35 c0       	rjmp	.+106    	; 0xa4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	33 c0       	rjmp	.+102    	; 0xa4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	31 c0       	rjmp	.+98     	; 0xa4 <__bad_interrupt>
  42:	00 00       	nop
  44:	2f c0       	rjmp	.+94     	; 0xa4 <__bad_interrupt>
  46:	00 00       	nop
  48:	2d c0       	rjmp	.+90     	; 0xa4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2b c0       	rjmp	.+86     	; 0xa4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	29 c0       	rjmp	.+82     	; 0xa4 <__bad_interrupt>
  52:	00 00       	nop
  54:	27 c0       	rjmp	.+78     	; 0xa4 <__bad_interrupt>
  56:	00 00       	nop
  58:	25 c0       	rjmp	.+74     	; 0xa4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	23 c0       	rjmp	.+70     	; 0xa4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	21 c0       	rjmp	.+66     	; 0xa4 <__bad_interrupt>
  62:	00 00       	nop
  64:	1f c0       	rjmp	.+62     	; 0xa4 <__bad_interrupt>
  66:	00 00       	nop
  68:	1d c0       	rjmp	.+58     	; 0xa4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1b c0       	rjmp	.+54     	; 0xa4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	19 c0       	rjmp	.+50     	; 0xa4 <__bad_interrupt>
  72:	00 00       	nop
  74:	17 c0       	rjmp	.+46     	; 0xa4 <__bad_interrupt>
  76:	00 00       	nop
  78:	15 c0       	rjmp	.+42     	; 0xa4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	13 c0       	rjmp	.+38     	; 0xa4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	11 c0       	rjmp	.+34     	; 0xa4 <__bad_interrupt>
  82:	00 00       	nop
  84:	0f c0       	rjmp	.+30     	; 0xa4 <__bad_interrupt>
  86:	00 00       	nop
  88:	0d c0       	rjmp	.+26     	; 0xa4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	0b c0       	rjmp	.+22     	; 0xa4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	09 c0       	rjmp	.+18     	; 0xa4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	65 d0       	rcall	.+202    	; 0x16c <main>
  a2:	97 c0       	rjmp	.+302    	; 0x1d2 <_exit>

000000a4 <__bad_interrupt>:
  a4:	ad cf       	rjmp	.-166    	; 0x0 <__vectors>

000000a6 <can_init>:
			CANSTMOB &= ~_BV(RXOK);
			CANCDMOB = _BV(CONMOB1);
			break;
		}
	}
}
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  b8:	92 e0       	ldi	r25, 0x02	; 2
  ba:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  be:	94 e0       	ldi	r25, 0x04	; 4
  c0:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
  c4:	93 e1       	ldi	r25, 0x13	; 19
  c6:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
  ca:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0d ee       	ldi	r16, 0xED	; 237
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	2e ee       	ldi	r18, 0xEE	; 238
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	cf ee       	ldi	r28, 0xEF	; 239
  e0:	d0 e0       	ldi	r29, 0x00	; 0
  e2:	a4 ef       	ldi	r26, 0xF4	; 244
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	4f ef       	ldi	r20, 0xFF	; 255
  e8:	5f ef       	ldi	r21, 0xFF	; 255
  ea:	ba 01       	movw	r22, r20
  ec:	0f 2e       	mov	r0, r31
  ee:	f0 ef       	ldi	r31, 0xF0	; 240
  f0:	ef 2e       	mov	r14, r31
  f2:	f1 2c       	mov	r15, r1
  f4:	f0 2d       	mov	r31, r0
  f6:	98 2f       	mov	r25, r24
  f8:	92 95       	swap	r25
  fa:	90 7f       	andi	r25, 0xF0	; 240
  fc:	f8 01       	movw	r30, r16
  fe:	90 83       	st	Z, r25
 100:	f9 01       	movw	r30, r18
 102:	10 82       	st	Z, r1
 104:	18 82       	st	Y, r1
 106:	4d 93       	st	X+, r20
 108:	5d 93       	st	X+, r21
 10a:	6d 93       	st	X+, r22
 10c:	7c 93       	st	X, r23
 10e:	13 97       	sbiw	r26, 0x03	; 3
 110:	f7 01       	movw	r30, r14
 112:	10 82       	st	Z, r1
 114:	11 82       	std	Z+1, r1	; 0x01
 116:	12 82       	std	Z+2, r1	; 0x02
 118:	13 82       	std	Z+3, r1	; 0x03
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	8e 30       	cpi	r24, 0x0E	; 14
 11e:	59 f7       	brne	.-42     	; 0xf6 <can_init+0x50>
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	ff 90       	pop	r15
 130:	ef 90       	pop	r14
 132:	08 95       	ret

00000134 <can_transmit>:

void can_transmit(uint8_t *dat, uint8_t len) {

	// Select MOb0
	CANPAGE = 0x00;
 134:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	// Set message
	uint8_t dat_i;
	for (dat_i = 0; dat_i < len; dat_i++) {
 138:	66 23       	and	r22, r22
 13a:	79 f0       	breq	.+30     	; 0x15a <can_transmit+0x26>
 13c:	fc 01       	movw	r30, r24
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	26 0f       	add	r18, r22
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	2f 5f       	subi	r18, 0xFF	; 255
 146:	3f 4f       	sbci	r19, 0xFF	; 255
 148:	28 0f       	add	r18, r24
 14a:	39 1f       	adc	r19, r25
		CANMSG = *(dat+dat_i);
 14c:	aa ef       	ldi	r26, 0xFA	; 250
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	91 91       	ld	r25, Z+
 152:	9c 93       	st	X, r25
	// Select MOb0
	CANPAGE = 0x00;

	// Set message
	uint8_t dat_i;
	for (dat_i = 0; dat_i < len; dat_i++) {
 154:	e2 17       	cp	r30, r18
 156:	f3 07       	cpc	r31, r19
 158:	d9 f7       	brne	.-10     	; 0x150 <can_transmit+0x1c>
		CANMSG = *(dat+dat_i);
	}

	// Set message length and start transmission
	CANCDMOB = (CANCDMOB & _BV(IDE)) | _BV(CONMOB0) | (len & 0x0F);
 15a:	ef ee       	ldi	r30, 0xEF	; 239
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	80 71       	andi	r24, 0x10	; 16
 162:	80 64       	ori	r24, 0x40	; 64
 164:	6f 70       	andi	r22, 0x0F	; 15
 166:	68 2b       	or	r22, r24
 168:	60 83       	st	Z, r22
 16a:	08 95       	ret

0000016c <main>:
#include <can.h>
#include <logger.h>
#include <nodeman.h>
#include <spi.h>

int main(void) {
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
 174:	28 97       	sbiw	r28, 0x08	; 8
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	cd bf       	out	0x3d, r28	; 61
	
	can_init();
 180:	92 df       	rcall	.-220    	; 0xa6 <can_init>
	sei();
 182:	78 94       	sei

	uint8_t dat[8] = {0xAA};
 184:	fe 01       	movw	r30, r28
 186:	31 96       	adiw	r30, 0x01	; 1
 188:	88 e0       	ldi	r24, 0x08	; 8
 18a:	df 01       	movw	r26, r30
 18c:	1d 92       	st	X+, r1
 18e:	8a 95       	dec	r24
 190:	e9 f7       	brne	.-6      	; 0x18c <main+0x20>
	const uint32_t duration = 1000000;
	uint32_t ledi;
	uint8_t leds = 0x01;
	uint8_t dir = 0;
	DDRC = 0xFF;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	87 b9       	out	0x07, r24	; 7

	uint8_t dat[8] = {0xAA};
	const uint32_t duration = 1000000;
	uint32_t ledi;
	uint8_t leds = 0x01;
	uint8_t dir = 0;
 196:	00 e0       	ldi	r16, 0x00	; 0
	sei();

	uint8_t dat[8] = {0xAA};
	const uint32_t duration = 1000000;
	uint32_t ledi;
	uint8_t leds = 0x01;
 198:	11 e0       	ldi	r17, 0x01	; 1
			dir = 0;
		}
		if (dir) {
			leds >>= 1;
			} else {
			leds <<= 1;
 19a:	f1 2c       	mov	r15, r1
	uint8_t dir = 0;
	DDRC = 0xFF;
	
	while (1) {
		
		dat[0] = leds; 
 19c:	19 83       	std	Y+1, r17	; 0x01
		can_transmit(dat, 1);
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	ce 01       	movw	r24, r28
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	c7 df       	rcall	.-114    	; 0x134 <can_transmit>
 1a6:	80 e4       	ldi	r24, 0x40	; 64
 1a8:	92 e4       	ldi	r25, 0x42	; 66
 1aa:	af e0       	ldi	r26, 0x0F	; 15
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	a1 09       	sbc	r26, r1
 1b2:	b1 09       	sbc	r27, r1
		
		for (ledi = 0; ledi < duration; ledi++);
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0x42>
		if (leds == 0x80) {
 1b6:	10 38       	cpi	r17, 0x80	; 128
 1b8:	29 f0       	breq	.+10     	; 0x1c4 <main+0x58>
			dir = 1;
			} else if (leds == 0x01) {
 1ba:	11 30       	cpi	r17, 0x01	; 1
 1bc:	31 f0       	breq	.+12     	; 0x1ca <main+0x5e>
			dir = 0;
		}
		if (dir) {
 1be:	00 23       	and	r16, r16
 1c0:	21 f0       	breq	.+8      	; 0x1ca <main+0x5e>
 1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <main+0x5a>
		dat[0] = leds; 
		can_transmit(dat, 1);
		
		for (ledi = 0; ledi < duration; ledi++);
		if (leds == 0x80) {
			dir = 1;
 1c4:	01 e0       	ldi	r16, 0x01	; 1
			} else if (leds == 0x01) {
			dir = 0;
		}
		if (dir) {
			leds >>= 1;
 1c6:	16 95       	lsr	r17
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <main+0x62>
			} else {
			leds <<= 1;
 1ca:	11 0f       	add	r17, r17
 1cc:	0f 2d       	mov	r16, r15
		}
		PORTC = leds;
 1ce:	18 b9       	out	0x08, r17	; 8
	}
 1d0:	e5 cf       	rjmp	.-54     	; 0x19c <main+0x30>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
