
atmelstudio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d7d  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b65  00000000  00000000  000010c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000514  00000000  00000000  00001c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00002140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f7  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000394  00000000  00000000  000027ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002b93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	4f c0       	rjmp	.+158    	; 0xa4 <__bad_interrupt>
   6:	00 00       	nop
   8:	4d c0       	rjmp	.+154    	; 0xa4 <__bad_interrupt>
   a:	00 00       	nop
   c:	4b c0       	rjmp	.+150    	; 0xa4 <__bad_interrupt>
   e:	00 00       	nop
  10:	49 c0       	rjmp	.+146    	; 0xa4 <__bad_interrupt>
  12:	00 00       	nop
  14:	47 c0       	rjmp	.+142    	; 0xa4 <__bad_interrupt>
  16:	00 00       	nop
  18:	45 c0       	rjmp	.+138    	; 0xa4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	43 c0       	rjmp	.+134    	; 0xa4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	41 c0       	rjmp	.+130    	; 0xa4 <__bad_interrupt>
  22:	00 00       	nop
  24:	3f c0       	rjmp	.+126    	; 0xa4 <__bad_interrupt>
  26:	00 00       	nop
  28:	3d c0       	rjmp	.+122    	; 0xa4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3b c0       	rjmp	.+118    	; 0xa4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	39 c0       	rjmp	.+114    	; 0xa4 <__bad_interrupt>
  32:	00 00       	nop
  34:	37 c0       	rjmp	.+110    	; 0xa4 <__bad_interrupt>
  36:	00 00       	nop
  38:	35 c0       	rjmp	.+106    	; 0xa4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	33 c0       	rjmp	.+102    	; 0xa4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	31 c0       	rjmp	.+98     	; 0xa4 <__bad_interrupt>
  42:	00 00       	nop
  44:	2f c0       	rjmp	.+94     	; 0xa4 <__bad_interrupt>
  46:	00 00       	nop
  48:	2d c0       	rjmp	.+90     	; 0xa4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2b c0       	rjmp	.+86     	; 0xa4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	29 c0       	rjmp	.+82     	; 0xa4 <__bad_interrupt>
  52:	00 00       	nop
  54:	27 c0       	rjmp	.+78     	; 0xa4 <__bad_interrupt>
  56:	00 00       	nop
  58:	25 c0       	rjmp	.+74     	; 0xa4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	23 c0       	rjmp	.+70     	; 0xa4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	21 c0       	rjmp	.+66     	; 0xa4 <__bad_interrupt>
  62:	00 00       	nop
  64:	1f c0       	rjmp	.+62     	; 0xa4 <__bad_interrupt>
  66:	00 00       	nop
  68:	1d c0       	rjmp	.+58     	; 0xa4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1b c0       	rjmp	.+54     	; 0xa4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	19 c0       	rjmp	.+50     	; 0xa4 <__bad_interrupt>
  72:	00 00       	nop
  74:	17 c0       	rjmp	.+46     	; 0xa4 <__bad_interrupt>
  76:	00 00       	nop
  78:	15 c0       	rjmp	.+42     	; 0xa4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	13 c0       	rjmp	.+38     	; 0xa4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	11 c0       	rjmp	.+34     	; 0xa4 <__bad_interrupt>
  82:	00 00       	nop
  84:	0f c0       	rjmp	.+30     	; 0xa4 <__bad_interrupt>
  86:	00 00       	nop
  88:	0d c0       	rjmp	.+26     	; 0xa4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	0b c0       	rjmp	.+22     	; 0xa4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	09 c0       	rjmp	.+18     	; 0xa4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	8d d0       	rcall	.+282    	; 0x1bc <main>
  a2:	c1 c0       	rjmp	.+386    	; 0x226 <_exit>

000000a4 <__bad_interrupt>:
  a4:	ad cf       	rjmp	.-166    	; 0x0 <__vectors>

000000a6 <can_init>:
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  b8:	32 e0       	ldi	r19, 0x02	; 2
  ba:	30 93 e2 00 	sts	0x00E2, r19	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  be:	34 e0       	ldi	r19, 0x04	; 4
  c0:	30 93 e3 00 	sts	0x00E3, r19	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
  c4:	33 e1       	ldi	r19, 0x13	; 19
  c6:	30 93 e4 00 	sts	0x00E4, r19	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
  ca:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
  ce:	20 e8       	ldi	r18, 0x80	; 128
  d0:	20 93 db 00 	sts	0x00DB, r18	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
  d4:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
  d8:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
  dc:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
  e0:	4f ef       	ldi	r20, 0xFF	; 255
  e2:	5f ef       	ldi	r21, 0xFF	; 255
  e4:	ba 01       	movw	r22, r20
  e6:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
  ea:	50 93 f5 00 	sts	0x00F5, r21	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
  ee:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
  f2:	70 93 f7 00 	sts	0x00F7, r23	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
  f6:	28 2f       	mov	r18, r24
  f8:	22 95       	swap	r18
  fa:	22 0f       	add	r18, r18
  fc:	20 7e       	andi	r18, 0xE0	; 224
  fe:	96 95       	lsr	r25
 100:	87 95       	ror	r24
 102:	96 95       	lsr	r25
 104:	87 95       	ror	r24
 106:	96 95       	lsr	r25
 108:	87 95       	ror	r24
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	b8 2f       	mov	r27, r24
 112:	aa 27       	eor	r26, r26
 114:	99 27       	eor	r25, r25
 116:	88 27       	eor	r24, r24
 118:	a2 2b       	or	r26, r18
 11a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 11e:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 122:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 126:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0d ee       	ldi	r16, 0xED	; 237
 12e:	10 e0       	ldi	r17, 0x00	; 0
 130:	2e ee       	ldi	r18, 0xEE	; 238
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	cf ee       	ldi	r28, 0xEF	; 239
 136:	d0 e0       	ldi	r29, 0x00	; 0
 138:	a4 ef       	ldi	r26, 0xF4	; 244
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	0f 2e       	mov	r0, r31
 13e:	f0 ef       	ldi	r31, 0xF0	; 240
 140:	ef 2e       	mov	r14, r31
 142:	f1 2c       	mov	r15, r1
 144:	f0 2d       	mov	r31, r0
 146:	98 2f       	mov	r25, r24
 148:	92 95       	swap	r25
 14a:	90 7f       	andi	r25, 0xF0	; 240
 14c:	f8 01       	movw	r30, r16
 14e:	90 83       	st	Z, r25
 150:	f9 01       	movw	r30, r18
 152:	10 82       	st	Z, r1
 154:	18 82       	st	Y, r1
 156:	4d 93       	st	X+, r20
 158:	5d 93       	st	X+, r21
 15a:	6d 93       	st	X+, r22
 15c:	7c 93       	st	X, r23
 15e:	13 97       	sbiw	r26, 0x03	; 3
 160:	f7 01       	movw	r30, r14
 162:	10 82       	st	Z, r1
 164:	11 82       	std	Z+1, r1	; 0x01
 166:	12 82       	std	Z+2, r1	; 0x02
 168:	13 82       	std	Z+3, r1	; 0x03
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	8e 30       	cpi	r24, 0x0E	; 14
 16e:	59 f7       	brne	.-42     	; 0x146 <can_init+0xa0>
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	ff 90       	pop	r15
 180:	ef 90       	pop	r14
 182:	08 95       	ret

00000184 <can_transmit>:
 184:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 188:	66 23       	and	r22, r22
 18a:	79 f0       	breq	.+30     	; 0x1aa <can_transmit+0x26>
 18c:	fc 01       	movw	r30, r24
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	26 0f       	add	r18, r22
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	2f 5f       	subi	r18, 0xFF	; 255
 196:	3f 4f       	sbci	r19, 0xFF	; 255
 198:	28 0f       	add	r18, r24
 19a:	39 1f       	adc	r19, r25
 19c:	aa ef       	ldi	r26, 0xFA	; 250
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	91 91       	ld	r25, Z+
 1a2:	9c 93       	st	X, r25
 1a4:	e2 17       	cp	r30, r18
 1a6:	f3 07       	cpc	r31, r19
 1a8:	d9 f7       	brne	.-10     	; 0x1a0 <can_transmit+0x1c>
 1aa:	ef ee       	ldi	r30, 0xEF	; 239
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 71       	andi	r24, 0x10	; 16
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	6f 70       	andi	r22, 0x0F	; 15
 1b6:	68 2b       	or	r22, r24
 1b8:	60 83       	st	Z, r22
 1ba:	08 95       	ret

000001bc <main>:
#include <can.h>
#include <logger.h>
#include <nodeman.h>
#include <spi.h>

int main(void) {
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
 1c4:	28 97       	sbiw	r28, 0x08	; 8
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	de bf       	out	0x3e, r29	; 62
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	cd bf       	out	0x3d, r28	; 61
	
	can_init(0);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	68 df       	rcall	.-304    	; 0xa6 <can_init>
	sei();
 1d6:	78 94       	sei

	uint8_t dat[8] = {0xAA};
 1d8:	fe 01       	movw	r30, r28
 1da:	31 96       	adiw	r30, 0x01	; 1
 1dc:	88 e0       	ldi	r24, 0x08	; 8
 1de:	df 01       	movw	r26, r30
 1e0:	1d 92       	st	X+, r1
 1e2:	8a 95       	dec	r24
 1e4:	e9 f7       	brne	.-6      	; 0x1e0 <main+0x24>
	const uint32_t duration = 1000000;
	uint32_t ledi;
	uint8_t leds = 0x01;
	uint8_t dir = 0;
	DDRC = 0xFF;
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	87 b9       	out	0x07, r24	; 7

	uint8_t dat[8] = {0xAA};
	const uint32_t duration = 1000000;
	uint32_t ledi;
	uint8_t leds = 0x01;
	uint8_t dir = 0;
 1ea:	00 e0       	ldi	r16, 0x00	; 0
	sei();

	uint8_t dat[8] = {0xAA};
	const uint32_t duration = 1000000;
	uint32_t ledi;
	uint8_t leds = 0x01;
 1ec:	11 e0       	ldi	r17, 0x01	; 1
			dir = 0;
		}
		if (dir) {
			leds >>= 1;
			} else {
			leds <<= 1;
 1ee:	f1 2c       	mov	r15, r1
	uint8_t dir = 0;
	DDRC = 0xFF;
	
	while (1) {
		
		dat[0] = leds;
 1f0:	19 83       	std	Y+1, r17	; 0x01
		can_transmit(dat, 1);
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	ce 01       	movw	r24, r28
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	c5 df       	rcall	.-118    	; 0x184 <can_transmit>
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	92 e4       	ldi	r25, 0x42	; 66
 1fe:	af e0       	ldi	r26, 0x0F	; 15
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	a1 09       	sbc	r26, r1
 206:	b1 09       	sbc	r27, r1
		
		for (ledi = 0; ledi < duration; ledi++);
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0x46>
		if (leds == 0x80) {
 20a:	10 38       	cpi	r17, 0x80	; 128
 20c:	29 f0       	breq	.+10     	; 0x218 <main+0x5c>
			dir = 1;
			} else if (leds == 0x01) {
 20e:	11 30       	cpi	r17, 0x01	; 1
 210:	31 f0       	breq	.+12     	; 0x21e <main+0x62>
			dir = 0;
		}
		if (dir) {
 212:	00 23       	and	r16, r16
 214:	21 f0       	breq	.+8      	; 0x21e <main+0x62>
 216:	01 c0       	rjmp	.+2      	; 0x21a <main+0x5e>
		dat[0] = leds;
		can_transmit(dat, 1);
		
		for (ledi = 0; ledi < duration; ledi++);
		if (leds == 0x80) {
			dir = 1;
 218:	01 e0       	ldi	r16, 0x01	; 1
			} else if (leds == 0x01) {
			dir = 0;
		}
		if (dir) {
			leds >>= 1;
 21a:	16 95       	lsr	r17
 21c:	02 c0       	rjmp	.+4      	; 0x222 <main+0x66>
			} else {
			leds <<= 1;
 21e:	11 0f       	add	r17, r17
 220:	0f 2d       	mov	r16, r15
		}
		PORTC = leds;
 222:	18 b9       	out	0x08, r17	; 8
	}
 224:	e5 cf       	rjmp	.-54     	; 0x1f0 <main+0x34>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
