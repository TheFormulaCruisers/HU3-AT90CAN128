
hu3-c3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000a74  00000b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000121  00800110  00800110  00000b18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b0f  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de8  00000000  00000000  000027f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d12  00000000  00000000  000035df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  000042f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d1  00000000  00000000  00004668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d13  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005d4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	73 c1       	rjmp	.+742    	; 0x330 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	d6 c2       	rjmp	.+1452   	; 0x5fe <__vector_20>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e4 e7       	ldi	r30, 0x74	; 116
  a8:	fa e0       	ldi	r31, 0x0A	; 10
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 31       	cpi	r26, 0x10	; 16
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	22 e0       	ldi	r18, 0x02	; 2
  bc:	a0 e1       	ldi	r26, 0x10	; 16
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a1 33       	cpi	r26, 0x31	; 49
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	40 d4       	rcall	.+2176   	; 0x94c <main>
  cc:	d1 c4       	rjmp	.+2466   	; 0xa70 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <can_init>:
			tx_msgbuf.write_pos = 0;
		}
	}
	
	CANPAGE = cp_tmp;
}
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
  ee:	83 e1       	ldi	r24, 0x13	; 19
  f0:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
  f4:	8f e7       	ldi	r24, 0x7F	; 127
  f6:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 100:	80 eb       	ldi	r24, 0xB0	; 176
 102:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0d ee       	ldi	r16, 0xED	; 237
 10a:	10 e0       	ldi	r17, 0x00	; 0
 10c:	2e ee       	ldi	r18, 0xEE	; 238
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	c4 ef       	ldi	r28, 0xF4	; 244
 112:	d0 e0       	ldi	r29, 0x00	; 0
 114:	4f ef       	ldi	r20, 0xFF	; 255
 116:	5f ef       	ldi	r21, 0xFF	; 255
 118:	ba 01       	movw	r22, r20
 11a:	a0 ef       	ldi	r26, 0xF0	; 240
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	0f 2e       	mov	r0, r31
 120:	ff ee       	ldi	r31, 0xEF	; 239
 122:	ef 2e       	mov	r14, r31
 124:	f1 2c       	mov	r15, r1
 126:	f0 2d       	mov	r31, r0
 128:	f8 01       	movw	r30, r16
 12a:	80 83       	st	Z, r24
 12c:	f9 01       	movw	r30, r18
 12e:	10 82       	st	Z, r1
 130:	48 83       	st	Y, r20
 132:	59 83       	std	Y+1, r21	; 0x01
 134:	6a 83       	std	Y+2, r22	; 0x02
 136:	7b 83       	std	Y+3, r23	; 0x03
 138:	1d 92       	st	X+, r1
 13a:	1d 92       	st	X+, r1
 13c:	1d 92       	st	X+, r1
 13e:	1c 92       	st	X, r1
 140:	13 97       	sbiw	r26, 0x03	; 3
 142:	f7 01       	movw	r30, r14
 144:	10 82       	st	Z, r1
 146:	80 5f       	subi	r24, 0xF0	; 240
 148:	80 3f       	cpi	r24, 0xF0	; 240
 14a:	71 f7       	brne	.-36     	; 0x128 <can_init+0x58>
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	ff 90       	pop	r15
 15c:	ef 90       	pop	r14
 15e:	08 95       	ret

00000160 <can_filter>:
 160:	cf 92       	push	r12
 162:	df 92       	push	r13
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 16c:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <rx_msgbuf+0x2>
 170:	3e 30       	cpi	r19, 0x0E	; 14
 172:	08 f0       	brcs	.+2      	; 0x176 <can_filter+0x16>
 174:	52 c0       	rjmp	.+164    	; 0x21a <can_filter+0xba>
 176:	aa e6       	ldi	r26, 0x6A	; 106
 178:	b1 e0       	ldi	r27, 0x01	; 1
 17a:	12 96       	adiw	r26, 0x02	; 2
 17c:	ec 91       	ld	r30, X
 17e:	12 97       	sbiw	r26, 0x02	; 2
 180:	3b e0       	ldi	r19, 0x0B	; 11
 182:	e3 9f       	mul	r30, r19
 184:	f0 01       	movw	r30, r0
 186:	11 24       	eor	r1, r1
 188:	e6 59       	subi	r30, 0x96	; 150
 18a:	fe 4f       	sbci	r31, 0xFE	; 254
 18c:	94 83       	std	Z+4, r25	; 0x04
 18e:	83 83       	std	Z+3, r24	; 0x03
 190:	12 96       	adiw	r26, 0x02	; 2
 192:	3c 91       	ld	r19, X
 194:	12 97       	sbiw	r26, 0x02	; 2
 196:	3f 5f       	subi	r19, 0xFF	; 255
 198:	12 96       	adiw	r26, 0x02	; 2
 19a:	3c 93       	st	X, r19
 19c:	12 97       	sbiw	r26, 0x02	; 2
 19e:	12 96       	adiw	r26, 0x02	; 2
 1a0:	3c 91       	ld	r19, X
 1a2:	32 95       	swap	r19
 1a4:	30 7f       	andi	r19, 0xF0	; 240
 1a6:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1aa:	e4 ef       	ldi	r30, 0xF4	; 244
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	c0 80       	ld	r12, Z
 1b0:	d1 80       	ldd	r13, Z+1	; 0x01
 1b2:	e2 80       	ldd	r14, Z+2	; 0x02
 1b4:	f3 80       	ldd	r15, Z+3	; 0x03
 1b6:	60 95       	com	r22
 1b8:	70 95       	com	r23
 1ba:	ab 01       	movw	r20, r22
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	44 0f       	add	r20, r20
 1c2:	55 1f       	adc	r21, r21
 1c4:	66 1f       	adc	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	44 0f       	add	r20, r20
 1ca:	55 1f       	adc	r21, r21
 1cc:	66 1f       	adc	r22, r22
 1ce:	77 1f       	adc	r23, r23
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	66 1f       	adc	r22, r22
 1d6:	77 1f       	adc	r23, r23
 1d8:	4c 25       	eor	r20, r12
 1da:	5d 25       	eor	r21, r13
 1dc:	6e 25       	eor	r22, r14
 1de:	7f 25       	eor	r23, r15
 1e0:	40 83       	st	Z, r20
 1e2:	51 83       	std	Z+1, r21	; 0x01
 1e4:	62 83       	std	Z+2, r22	; 0x02
 1e6:	73 83       	std	Z+3, r23	; 0x03
 1e8:	a0 e0       	ldi	r26, 0x00	; 0
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	aa 1f       	adc	r26, r26
 1f2:	bb 1f       	adc	r27, r27
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	aa 1f       	adc	r26, r26
 1fa:	bb 1f       	adc	r27, r27
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	aa 1f       	adc	r26, r26
 202:	bb 1f       	adc	r27, r27
 204:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 208:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 20c:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 210:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 214:	80 e9       	ldi	r24, 0x90	; 144
 216:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 21a:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	df 90       	pop	r13
 224:	cf 90       	pop	r12
 226:	08 95       	ret

00000228 <can_message_available>:
 228:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <rx_msgbuf>
 22c:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <rx_msgbuf+0x1>
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	23 2b       	or	r18, r19
 234:	09 f4       	brne	.+2      	; 0x238 <can_message_available+0x10>
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	08 95       	ret

0000023a <can_receive>:
 23a:	8f 92       	push	r8
 23c:	9f 92       	push	r9
 23e:	af 92       	push	r10
 240:	bf 92       	push	r11
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <rx_msgbuf+0x2>
 256:	22 23       	and	r18, r18
 258:	09 f4       	brne	.+2      	; 0x25c <can_receive+0x22>
 25a:	5d c0       	rjmp	.+186    	; 0x316 <can_receive+0xdc>
 25c:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <rx_msgbuf>
 260:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <rx_msgbuf+0x1>
 264:	20 fd       	sbrc	r18, 0
 266:	0e c0       	rjmp	.+28     	; 0x284 <can_receive+0x4a>
 268:	a0 e0       	ldi	r26, 0x00	; 0
 26a:	01 e0       	ldi	r16, 0x01	; 1
 26c:	10 e0       	ldi	r17, 0x00	; 0
 26e:	ea e6       	ldi	r30, 0x6A	; 106
 270:	f1 e0       	ldi	r31, 0x01	; 1
 272:	4a c0       	rjmp	.+148    	; 0x308 <can_receive+0xce>
 274:	20 81       	ld	r18, Z
 276:	31 81       	ldd	r19, Z+1	; 0x01
 278:	20 23       	and	r18, r16
 27a:	31 23       	and	r19, r17
 27c:	23 2b       	or	r18, r19
 27e:	09 f4       	brne	.+2      	; 0x282 <can_receive+0x48>
 280:	43 c0       	rjmp	.+134    	; 0x308 <can_receive+0xce>
 282:	03 c0       	rjmp	.+6      	; 0x28a <can_receive+0x50>
 284:	a0 e0       	ldi	r26, 0x00	; 0
 286:	01 e0       	ldi	r16, 0x01	; 1
 288:	10 e0       	ldi	r17, 0x00	; 0
 28a:	0f 2e       	mov	r0, r31
 28c:	fa e6       	ldi	r31, 0x6A	; 106
 28e:	ef 2e       	mov	r14, r31
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	ff 2e       	mov	r15, r31
 294:	f0 2d       	mov	r31, r0
 296:	68 01       	movw	r12, r16
 298:	c0 94       	com	r12
 29a:	d0 94       	com	r13
 29c:	2b e0       	ldi	r18, 0x0B	; 11
 29e:	a2 9f       	mul	r26, r18
 2a0:	d0 01       	movw	r26, r0
 2a2:	11 24       	eor	r1, r1
 2a4:	a6 59       	subi	r26, 0x96	; 150
 2a6:	be 4f       	sbci	r27, 0xFE	; 254
 2a8:	5d 01       	movw	r10, r26
 2aa:	e3 e0       	ldi	r30, 0x03	; 3
 2ac:	ae 0e       	add	r10, r30
 2ae:	b1 1c       	adc	r11, r1
 2b0:	ed 01       	movw	r28, r26
 2b2:	25 96       	adiw	r28, 0x05	; 5
 2b4:	f7 01       	movw	r30, r14
 2b6:	20 81       	ld	r18, Z
 2b8:	31 81       	ldd	r19, Z+1	; 0x01
 2ba:	2c 21       	and	r18, r12
 2bc:	3d 21       	and	r19, r13
 2be:	31 83       	std	Z+1, r19	; 0x01
 2c0:	20 83       	st	Z, r18
 2c2:	f5 01       	movw	r30, r10
 2c4:	20 81       	ld	r18, Z
 2c6:	31 81       	ldd	r19, Z+1	; 0x01
 2c8:	fc 01       	movw	r30, r24
 2ca:	31 83       	std	Z+1, r19	; 0x01
 2cc:	20 83       	st	Z, r18
 2ce:	28 81       	ld	r18, Y
 2d0:	fa 01       	movw	r30, r20
 2d2:	20 83       	st	Z, r18
 2d4:	28 81       	ld	r18, Y
 2d6:	22 23       	and	r18, r18
 2d8:	79 f0       	breq	.+30     	; 0x2f8 <can_receive+0xbe>
 2da:	91 2c       	mov	r9, r1
 2dc:	29 2d       	mov	r18, r9
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	fd 01       	movw	r30, r26
 2e2:	e2 0f       	add	r30, r18
 2e4:	f3 1f       	adc	r31, r19
 2e6:	86 80       	ldd	r8, Z+6	; 0x06
 2e8:	26 0f       	add	r18, r22
 2ea:	37 1f       	adc	r19, r23
 2ec:	f9 01       	movw	r30, r18
 2ee:	80 82       	st	Z, r8
 2f0:	93 94       	inc	r9
 2f2:	28 81       	ld	r18, Y
 2f4:	92 16       	cp	r9, r18
 2f6:	90 f3       	brcs	.-28     	; 0x2dc <can_receive+0xa2>
 2f8:	f7 01       	movw	r30, r14
 2fa:	20 81       	ld	r18, Z
 2fc:	31 81       	ldd	r19, Z+1	; 0x01
 2fe:	20 23       	and	r18, r16
 300:	31 23       	and	r19, r17
 302:	23 2b       	or	r18, r19
 304:	b9 f6       	brne	.-82     	; 0x2b4 <can_receive+0x7a>
 306:	07 c0       	rjmp	.+14     	; 0x316 <can_receive+0xdc>
 308:	00 0f       	add	r16, r16
 30a:	11 1f       	adc	r17, r17
 30c:	af 5f       	subi	r26, 0xFF	; 255
 30e:	22 81       	ldd	r18, Z+2	; 0x02
 310:	a2 17       	cp	r26, r18
 312:	08 f4       	brcc	.+2      	; 0x316 <can_receive+0xdc>
 314:	af cf       	rjmp	.-162    	; 0x274 <can_receive+0x3a>
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	ff 90       	pop	r15
 320:	ef 90       	pop	r14
 322:	df 90       	pop	r13
 324:	cf 90       	pop	r12
 326:	bf 90       	pop	r11
 328:	af 90       	pop	r10
 32a:	9f 90       	pop	r9
 32c:	8f 90       	pop	r8
 32e:	08 95       	ret

00000330 <__vector_18>:

// ------------------------------------------------- Interrupt Service Routines

#if defined CANIT_vect
ISR(CANIT_vect) {
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	0b b6       	in	r0, 0x3b	; 59
 33c:	0f 92       	push	r0
 33e:	2f 93       	push	r18
 340:	3f 93       	push	r19
 342:	4f 93       	push	r20
 344:	5f 93       	push	r21
 346:	6f 93       	push	r22
 348:	7f 93       	push	r23
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
 34e:	af 93       	push	r26
 350:	bf 93       	push	r27
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
#elif defined CAN_INT_vect
ISR(CAN_INT_vect) {
#endif
	const uint8_t cp_tmp = CANPAGE;
 35a:	ed ee       	ldi	r30, 0xED	; 237
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	40 81       	ld	r20, Z
	uint8_t bufi, cp_max, cp, msgi;

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
 360:	10 82       	st	Z, r1
	bufi = tx_msgbuf.read_pos;
 362:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <__data_end+0x1>
	if (CANSTMOB & _BV(TXOK) && bufi != tx_msgbuf.write_pos) {
 366:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 36a:	86 ff       	sbrs	r24, 6
 36c:	53 c0       	rjmp	.+166    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 36e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 372:	58 17       	cp	r21, r24
 374:	09 f4       	brne	.+2      	; 0x378 <__vector_18+0x48>
 376:	4e c0       	rjmp	.+156    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].size; msgi++) {
 378:	65 2f       	mov	r22, r21
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	2b e0       	ldi	r18, 0x0B	; 11
 37e:	52 9f       	mul	r21, r18
 380:	f0 01       	movw	r30, r0
 382:	11 24       	eor	r1, r1
 384:	e0 5f       	subi	r30, 0xF0	; 240
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	84 81       	ldd	r24, Z+4	; 0x04
 38a:	88 23       	and	r24, r24
 38c:	b1 f0       	breq	.+44     	; 0x3ba <__vector_18+0x8a>
 38e:	80 e0       	ldi	r24, 0x00	; 0
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
 390:	9b e0       	ldi	r25, 0x0B	; 11
 392:	96 9f       	mul	r25, r22
 394:	90 01       	movw	r18, r0
 396:	97 9f       	mul	r25, r23
 398:	30 0d       	add	r19, r0
 39a:	11 24       	eor	r1, r1
 39c:	20 5f       	subi	r18, 0xF0	; 240
 39e:	3e 4f       	sbci	r19, 0xFE	; 254
 3a0:	ca ef       	ldi	r28, 0xFA	; 250
 3a2:	d0 e0       	ldi	r29, 0x00	; 0

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
	bufi = tx_msgbuf.read_pos;
	if (CANSTMOB & _BV(TXOK) && bufi != tx_msgbuf.write_pos) {
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].size; msgi++) {
 3a4:	d9 01       	movw	r26, r18
 3a6:	14 96       	adiw	r26, 0x04	; 4
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
 3a8:	f9 01       	movw	r30, r18
 3aa:	e8 0f       	add	r30, r24
 3ac:	f1 1d       	adc	r31, r1
 3ae:	95 81       	ldd	r25, Z+5	; 0x05
 3b0:	98 83       	st	Y, r25

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
	bufi = tx_msgbuf.read_pos;
	if (CANSTMOB & _BV(TXOK) && bufi != tx_msgbuf.write_pos) {
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].size; msgi++) {
 3b2:	8f 5f       	subi	r24, 0xFF	; 255
 3b4:	9c 91       	ld	r25, X
 3b6:	89 17       	cp	r24, r25
 3b8:	b8 f3       	brcs	.-18     	; 0x3a8 <__vector_18+0x78>
		}
#if defined CAN_REV_2A
		CANIDT = _ID_TO_IDT_2A(tx_msgbuf.msgs[bufi].id);
		CANCDMOB = _BV(CONMOB0) | tx_msgbuf.msgs[bufi].size;
#elif defined CAN_REV_2B
		CANIDT = _ID_TO_IDT_2B(tx_msgbuf.msgs[bufi].id);
 3ba:	8b e0       	ldi	r24, 0x0B	; 11
 3bc:	86 9f       	mul	r24, r22
 3be:	f0 01       	movw	r30, r0
 3c0:	87 9f       	mul	r24, r23
 3c2:	f0 0d       	add	r31, r0
 3c4:	11 24       	eor	r1, r1
 3c6:	e0 5f       	subi	r30, 0xF0	; 240
 3c8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ca:	82 81       	ldd	r24, Z+2	; 0x02
 3cc:	93 81       	ldd	r25, Z+3	; 0x03
 3ce:	a0 e0       	ldi	r26, 0x00	; 0
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	aa 1f       	adc	r26, r26
 3d8:	bb 1f       	adc	r27, r27
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	aa 1f       	adc	r26, r26
 3e0:	bb 1f       	adc	r27, r27
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	aa 1f       	adc	r26, r26
 3e8:	bb 1f       	adc	r27, r27
 3ea:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 3ee:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 3f2:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 3f6:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANCDMOB = _BV(CONMOB0) | _BV(IDE) | tx_msgbuf.msgs[bufi].size;
 3fa:	84 81       	ldd	r24, Z+4	; 0x04
 3fc:	80 65       	ori	r24, 0x50	; 80
 3fe:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
#endif
		if (bufi < CAN_TX_MSGBUF_SIZE-1) {
 402:	57 30       	cpi	r21, 0x07	; 7
 404:	20 f4       	brcc	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			tx_msgbuf.read_pos = bufi + 1;
 406:	5f 5f       	subi	r21, 0xFF	; 255
 408:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <__data_end+0x1>
 40c:	73 c0       	rjmp	.+230    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
		} else {
			tx_msgbuf.read_pos = 0;
 40e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 412:	70 c0       	rjmp	.+224    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
 414:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <rx_msgbuf+0x2>
 418:	92 95       	swap	r25
 41a:	90 7f       	andi	r25, 0xF0	; 240
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 41c:	90 31       	cpi	r25, 0x10	; 16
 41e:	08 f4       	brcc	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	69 c0       	rjmp	.+210    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			CANPAGE = cp;
 422:	80 e1       	ldi	r24, 0x10	; 16
 424:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 428:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 42c:	85 fd       	sbrc	r24, 5
 42e:	0b c0       	rjmp	.+22     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 430:	e0 e1       	ldi	r30, 0x10	; 16

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
			CANPAGE = cp;
 432:	cd ee       	ldi	r28, 0xED	; 237
 434:	d0 e0       	ldi	r29, 0x00	; 0
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 436:	ae ee       	ldi	r26, 0xEE	; 238
 438:	b0 e0       	ldi	r27, 0x00	; 0
 43a:	58 c0       	rjmp	.+176    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
			CANPAGE = cp;
 43c:	e8 83       	st	Y, r30
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 43e:	8c 91       	ld	r24, X
 440:	85 ff       	sbrs	r24, 5
 442:	54 c0       	rjmp	.+168    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 444:	01 c0       	rjmp	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 446:	e0 e1       	ldi	r30, 0x10	; 16
			CANPAGE = cp;
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
 448:	aa e6       	ldi	r26, 0x6A	; 106
 44a:	b1 e0       	ldi	r27, 0x01	; 1
 44c:	2d 91       	ld	r18, X+
 44e:	3c 91       	ld	r19, X
 450:	11 97       	sbiw	r26, 0x01	; 1
 452:	e2 95       	swap	r30
 454:	ef 70       	andi	r30, 0x0F	; 15
 456:	e1 50       	subi	r30, 0x01	; 1
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 2e       	mov	r0, r30
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 468:	82 2b       	or	r24, r18
 46a:	93 2b       	or	r25, r19
 46c:	11 96       	adiw	r26, 0x01	; 1
 46e:	9c 93       	st	X, r25
 470:	8e 93       	st	-X, r24
#if defined CAN_REV_2A
				rx_msgbuf.msgs[bufi].id = _IDT_2A_TO_ID(CANIDT);
#elif defined CAN_REV_2B
				rx_msgbuf.msgs[bufi].id = _IDT_2B_TO_ID(CANIDT);
 472:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 476:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 47a:	a0 91 f2 00 	lds	r26, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 47e:	b0 91 f3 00 	lds	r27, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 482:	68 94       	set
 484:	12 f8       	bld	r1, 2
 486:	b6 95       	lsr	r27
 488:	a7 95       	ror	r26
 48a:	97 95       	ror	r25
 48c:	87 95       	ror	r24
 48e:	16 94       	lsr	r1
 490:	d1 f7       	brne	.-12     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 492:	6e 2f       	mov	r22, r30
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	2b e0       	ldi	r18, 0x0B	; 11
 498:	e2 9f       	mul	r30, r18
 49a:	f0 01       	movw	r30, r0
 49c:	11 24       	eor	r1, r1
 49e:	e6 59       	subi	r30, 0x96	; 150
 4a0:	fe 4f       	sbci	r31, 0xFE	; 254
 4a2:	94 83       	std	Z+4, r25	; 0x04
 4a4:	83 83       	std	Z+3, r24	; 0x03
#endif
				rx_msgbuf.msgs[bufi].size = CANCDMOB & 0x0F;
 4a6:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 4aa:	8f 70       	andi	r24, 0x0F	; 15
 4ac:	85 83       	std	Z+5, r24	; 0x05
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].size; msgi++) {
 4ae:	85 81       	ldd	r24, Z+5	; 0x05
 4b0:	88 23       	and	r24, r24
 4b2:	b1 f0       	breq	.+44     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4b4:	80 e0       	ldi	r24, 0x00	; 0
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
 4b6:	ca ef       	ldi	r28, 0xFA	; 250
 4b8:	d0 e0       	ldi	r29, 0x00	; 0
 4ba:	9b e0       	ldi	r25, 0x0B	; 11
 4bc:	96 9f       	mul	r25, r22
 4be:	90 01       	movw	r18, r0
 4c0:	97 9f       	mul	r25, r23
 4c2:	30 0d       	add	r19, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	26 59       	subi	r18, 0x96	; 150
 4c8:	3e 4f       	sbci	r19, 0xFE	; 254
				rx_msgbuf.msgs[bufi].id = _IDT_2A_TO_ID(CANIDT);
#elif defined CAN_REV_2B
				rx_msgbuf.msgs[bufi].id = _IDT_2B_TO_ID(CANIDT);
#endif
				rx_msgbuf.msgs[bufi].size = CANCDMOB & 0x0F;
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].size; msgi++) {
 4ca:	d9 01       	movw	r26, r18
 4cc:	15 96       	adiw	r26, 0x05	; 5
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
 4ce:	98 81       	ld	r25, Y
 4d0:	f9 01       	movw	r30, r18
 4d2:	e8 0f       	add	r30, r24
 4d4:	f1 1d       	adc	r31, r1
 4d6:	96 83       	std	Z+6, r25	; 0x06
				rx_msgbuf.msgs[bufi].id = _IDT_2A_TO_ID(CANIDT);
#elif defined CAN_REV_2B
				rx_msgbuf.msgs[bufi].id = _IDT_2B_TO_ID(CANIDT);
#endif
				rx_msgbuf.msgs[bufi].size = CANCDMOB & 0x0F;
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].size; msgi++) {
 4d8:	8f 5f       	subi	r24, 0xFF	; 255
 4da:	9c 91       	ld	r25, X
 4dc:	89 17       	cp	r24, r25
 4de:	b8 f3       	brcs	.-18     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
				}
				CANCDMOB |= _BV(CONMOB1);
 4e0:	ef ee       	ldi	r30, 0xEF	; 239
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	80 68       	ori	r24, 0x80	; 128
 4e8:	80 83       	st	Z, r24
				break;
 4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 4ec:	e0 5f       	subi	r30, 0xF0	; 240
 4ee:	9e 17       	cp	r25, r30
 4f0:	08 f0       	brcs	.+2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4f2:	a4 cf       	rjmp	.-184    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
				break;
			}
		}
	}

	CANSTMOB = 0x00;
 4f4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANPAGE = cp_tmp;
 4f8:	40 93 ed 00 	sts	0x00ED, r20	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 4fc:	ff 91       	pop	r31
 4fe:	ef 91       	pop	r30
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	bf 91       	pop	r27
 506:	af 91       	pop	r26
 508:	9f 91       	pop	r25
 50a:	8f 91       	pop	r24
 50c:	7f 91       	pop	r23
 50e:	6f 91       	pop	r22
 510:	5f 91       	pop	r21
 512:	4f 91       	pop	r20
 514:	3f 91       	pop	r19
 516:	2f 91       	pop	r18
 518:	0f 90       	pop	r0
 51a:	0b be       	out	0x3b, r0	; 59
 51c:	0f 90       	pop	r0
 51e:	0f be       	out	0x3f, r0	; 63
 520:	0f 90       	pop	r0
 522:	1f 90       	pop	r1
 524:	18 95       	reti

00000526 <logger_init>:

static volatile buffer_t buffer;

// --------------------------------------------------------- External Functions

void *logger_init(void) {
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0

	uint8_t i;
	for (i = 0; i < LOGGER_LOG_SIZE; i++) {
		buffer.buffer1[i] = UINT16_MAX;
 52a:	4f ef       	ldi	r20, 0xFF	; 255
 52c:	5f ef       	ldi	r21, 0xFF	; 255
 52e:	9c 01       	movw	r18, r24
 530:	2f 5f       	subi	r18, 0xFF	; 255
 532:	3f 4f       	sbci	r19, 0xFF	; 255
 534:	f9 01       	movw	r30, r18
 536:	ee 0f       	add	r30, r30
 538:	ff 1f       	adc	r31, r31
 53a:	e9 5f       	subi	r30, 0xF9	; 249
 53c:	fd 4f       	sbci	r31, 0xFD	; 253
 53e:	51 83       	std	Z+1, r21	; 0x01
 540:	40 83       	st	Z, r20
		buffer.buffer2[i] = UINT16_MAX;
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	fc 01       	movw	r30, r24
 548:	e7 5e       	subi	r30, 0xE7	; 231
 54a:	fd 4f       	sbci	r31, 0xFD	; 253
 54c:	51 83       	std	Z+1, r21	; 0x01
 54e:	40 83       	st	Z, r20
 550:	c9 01       	movw	r24, r18
// --------------------------------------------------------- External Functions

void *logger_init(void) {

	uint8_t i;
	for (i = 0; i < LOGGER_LOG_SIZE; i++) {
 552:	28 30       	cpi	r18, 0x08	; 8
 554:	31 05       	cpc	r19, r1
 556:	59 f7       	brne	.-42     	; 0x52e <logger_init+0x8>
		buffer.buffer1[i] = UINT16_MAX;
		buffer.buffer2[i] = UINT16_MAX;
	}
	
	buffer.writable = (void *)buffer.buffer1;
 558:	89 e0       	ldi	r24, 0x09	; 9
 55a:	92 e0       	ldi	r25, 0x02	; 2
 55c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <buffer+0x1>
 560:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <buffer>
	return (void *)buffer.buffer2;
}
 564:	89 e1       	ldi	r24, 0x19	; 25
 566:	92 e0       	ldi	r25, 0x02	; 2
 568:	08 95       	ret

0000056a <logger_log>:

void logger_log(logger_log_t type, uint16_t value) {

	*(buffer.writable+type) = value;
 56a:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <buffer>
 56e:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <buffer+0x1>
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	e8 0f       	add	r30, r24
 57a:	f9 1f       	adc	r31, r25
 57c:	71 83       	std	Z+1, r23	; 0x01
 57e:	60 83       	st	Z, r22
 580:	08 95       	ret

00000582 <logger_rotate>:
}

void *logger_rotate(void) {

	if (buffer.writable == buffer.buffer1) {
 582:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <buffer>
 586:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <buffer+0x1>
 58a:	89 50       	subi	r24, 0x09	; 9
 58c:	92 40       	sbci	r25, 0x02	; 2
 58e:	49 f4       	brne	.+18     	; 0x5a2 <logger_rotate+0x20>
		buffer.writable = (void *)buffer.buffer2;
 590:	89 e1       	ldi	r24, 0x19	; 25
 592:	92 e0       	ldi	r25, 0x02	; 2
 594:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <buffer+0x1>
 598:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <buffer>
		return (void *)buffer.buffer1;
 59c:	89 e0       	ldi	r24, 0x09	; 9
 59e:	92 e0       	ldi	r25, 0x02	; 2
 5a0:	08 95       	ret
	} else {
		buffer.writable = (void *)buffer.buffer1;
 5a2:	89 e0       	ldi	r24, 0x09	; 9
 5a4:	92 e0       	ldi	r25, 0x02	; 2
 5a6:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <buffer+0x1>
 5aa:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <buffer>
		return (void *)buffer.buffer2;
 5ae:	89 e1       	ldi	r24, 0x19	; 25
 5b0:	92 e0       	ldi	r25, 0x02	; 2
	}
 5b2:	08 95       	ret

000005b4 <spi_slave_init>:
}

void spi_slave_register_txstart_handler(void (*txstart_handler)()) {

	// Register handler
	_txstart_handler = txstart_handler;
 5b4:	88 e0       	ldi	r24, 0x08	; 8
 5b6:	84 b9       	out	0x04, r24	; 4
 5b8:	8f ef       	ldi	r24, 0xFF	; 255
 5ba:	8e bd       	out	0x2e, r24	; 46
 5bc:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <_txbuffer+0x1>
 5c0:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <_txbuffer>
 5c4:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <_txbufend>
 5c8:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <_txbufpos>
 5cc:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <_txdone_handler+0x1>
 5d0:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <_txdone_handler>
 5d4:	80 ec       	ldi	r24, 0xC0	; 192
 5d6:	8c bd       	out	0x2c, r24	; 44
 5d8:	08 95       	ret

000005da <spi_slave_register_txbuffer>:
 5da:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <_txbuffer+0x1>
 5de:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <_txbuffer>
 5e2:	61 50       	subi	r22, 0x01	; 1
 5e4:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <_txbufend>
 5e8:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <_txbufpos>
 5ec:	fc 01       	movw	r30, r24
 5ee:	80 81       	ld	r24, Z
 5f0:	8e bd       	out	0x2e, r24	; 46
 5f2:	08 95       	ret

000005f4 <spi_slave_register_txdone_handler>:
}

void spi_slave_register_txdone_handler(void (*txdone_handler)()) {

	// Register handler
	_txdone_handler = txdone_handler;
 5f4:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <_txdone_handler+0x1>
 5f8:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <_txdone_handler>
 5fc:	08 95       	ret

000005fe <__vector_20>:
}

// ------------------------------------------------- Interrupt Service Routines

ISR(SPI_STC_vect) {
 5fe:	1f 92       	push	r1
 600:	0f 92       	push	r0
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	0f 92       	push	r0
 606:	11 24       	eor	r1, r1
 608:	0b b6       	in	r0, 0x3b	; 59
 60a:	0f 92       	push	r0
 60c:	2f 93       	push	r18
 60e:	3f 93       	push	r19
 610:	4f 93       	push	r20
 612:	5f 93       	push	r21
 614:	6f 93       	push	r22
 616:	7f 93       	push	r23
 618:	8f 93       	push	r24
 61a:	9f 93       	push	r25
 61c:	af 93       	push	r26
 61e:	bf 93       	push	r27
 620:	ef 93       	push	r30
 622:	ff 93       	push	r31

	if (_txbufpos == 0) {
 624:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <_txbufpos>
 628:	81 11       	cpse	r24, r1
 62a:	07 c0       	rjmp	.+14     	; 0x63a <__vector_20+0x3c>
		
		// Call tx start handler
		if (_txstart_handler != NULL) {
 62c:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <_txstart_handler>
 630:	f0 91 2c 02 	lds	r31, 0x022C	; 0x80022c <_txstart_handler+0x1>
 634:	30 97       	sbiw	r30, 0x00	; 0
 636:	09 f0       	breq	.+2      	; 0x63a <__vector_20+0x3c>
			(*_txstart_handler)();
 638:	09 95       	icall
		}
	}

	if (_txbufpos < _txbufend) {
 63a:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <_txbufpos>
 63e:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <_txbufend>
 642:	98 17       	cp	r25, r24
 644:	30 f4       	brcc	.+12     	; 0x652 <__vector_20+0x54>

		// Increment buffer position
		_txbufpos++;
 646:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <_txbufpos>
 64a:	8f 5f       	subi	r24, 0xFF	; 255
 64c:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <_txbufpos>
 650:	09 c0       	rjmp	.+18     	; 0x664 <__vector_20+0x66>

	} else {

		// Reset buffer position
		_txbufpos = 0;
 652:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <_txbufpos>

		// Call tx done handler
		if (_txdone_handler != NULL) {
 656:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <_txdone_handler>
 65a:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <_txdone_handler+0x1>
 65e:	30 97       	sbiw	r30, 0x00	; 0
 660:	09 f0       	breq	.+2      	; 0x664 <__vector_20+0x66>
			(*_txdone_handler)();
 662:	09 95       	icall
		}
	}

	// Copy next byte from tx buffer to controller
	if (_txbuffer != NULL) {	
 664:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <_txbuffer>
 668:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <_txbuffer+0x1>
 66c:	00 97       	sbiw	r24, 0x00	; 0
 66e:	39 f0       	breq	.+14     	; 0x67e <__vector_20+0x80>
		SPDR = *(_txbuffer+_txbufpos);
 670:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <_txbufpos>
 674:	fc 01       	movw	r30, r24
 676:	e2 0f       	add	r30, r18
 678:	f1 1d       	adc	r31, r1
 67a:	80 81       	ld	r24, Z
 67c:	8e bd       	out	0x2e, r24	; 46
	}
 67e:	ff 91       	pop	r31
 680:	ef 91       	pop	r30
 682:	bf 91       	pop	r27
 684:	af 91       	pop	r26
 686:	9f 91       	pop	r25
 688:	8f 91       	pop	r24
 68a:	7f 91       	pop	r23
 68c:	6f 91       	pop	r22
 68e:	5f 91       	pop	r21
 690:	4f 91       	pop	r20
 692:	3f 91       	pop	r19
 694:	2f 91       	pop	r18
 696:	0f 90       	pop	r0
 698:	0b be       	out	0x3b, r0	; 59
 69a:	0f 90       	pop	r0
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	0f 90       	pop	r0
 6a0:	1f 90       	pop	r1
 6a2:	18 95       	reti

000006a4 <spi_txdone_log_rotate>:
#include "nodes/node6.c"
#include "nodes/node7.c"
#include "nodes/node8.c"

void spi_txdone_log_rotate(void) {
	spi_slave_register_txbuffer(logger_rotate(), LOGGER_LOG_SIZE);
 6a4:	6e df       	rcall	.-292    	; 0x582 <logger_rotate>
 6a6:	68 e0       	ldi	r22, 0x08	; 8
 6a8:	98 cf       	rjmp	.-208    	; 0x5da <spi_slave_register_txbuffer>
 6aa:	08 95       	ret

000006ac <node1_init>:
#include <logger.h>

volatile const uint8_t node1_msk = 1;
volatile uint8_t node1_reg = 1;

void node1_init(void *msg, uint8_t msg_size) {
 6ac:	fc 01       	movw	r30, r24
	DDRC |= node1_msk;
 6ae:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <node1_msk>
 6b2:	97 b1       	in	r25, 0x07	; 7
 6b4:	98 2b       	or	r25, r24
 6b6:	97 b9       	out	0x07, r25	; 7
	PORTC = node1_msk | (PORTC & ~node1_msk);
 6b8:	38 b1       	in	r19, 0x08	; 8
 6ba:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <node1_msk>
 6be:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <node1_msk>
 6c2:	90 95       	com	r25
 6c4:	93 23       	and	r25, r19
 6c6:	92 2b       	or	r25, r18
 6c8:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_WHEEL1, *((uint16_t *)msg));
 6ca:	60 81       	ld	r22, Z
 6cc:	71 81       	ldd	r23, Z+1	; 0x01
 6ce:	83 e0       	ldi	r24, 0x03	; 3
 6d0:	4c cf       	rjmp	.-360    	; 0x56a <logger_log>
 6d2:	08 95       	ret

000006d4 <node1_receive>:
}

void node1_receive(void *msg, uint8_t msg_size) {
 6d4:	fc 01       	movw	r30, r24
	node1_reg ^= node1_msk;
 6d6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <node1_msk>
 6da:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <node1_reg>
 6de:	98 27       	eor	r25, r24
 6e0:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <node1_reg>
	PORTC = node1_reg | (PORTC & ~node1_msk);
 6e4:	38 b1       	in	r19, 0x08	; 8
 6e6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <node1_msk>
 6ea:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <node1_reg>
 6ee:	90 95       	com	r25
 6f0:	93 23       	and	r25, r19
 6f2:	92 2b       	or	r25, r18
 6f4:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_WHEEL1, *((uint16_t *)msg));
 6f6:	60 81       	ld	r22, Z
 6f8:	71 81       	ldd	r23, Z+1	; 0x01
 6fa:	83 e0       	ldi	r24, 0x03	; 3
 6fc:	36 cf       	rjmp	.-404    	; 0x56a <logger_log>
 6fe:	08 95       	ret

00000700 <node2_init>:
#include <logger.h>

volatile const uint8_t node2_msk = 2;
volatile uint8_t node2_reg = 2;

void node2_init(void *msg, uint8_t msg_size) {
 700:	fc 01       	movw	r30, r24
	DDRC |= node2_msk;
 702:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <node2_msk>
 706:	97 b1       	in	r25, 0x07	; 7
 708:	98 2b       	or	r25, r24
 70a:	97 b9       	out	0x07, r25	; 7
	PORTC = node2_msk | (PORTC & ~node2_msk);
 70c:	38 b1       	in	r19, 0x08	; 8
 70e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <node2_msk>
 712:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <node2_msk>
 716:	90 95       	com	r25
 718:	93 23       	and	r25, r19
 71a:	92 2b       	or	r25, r18
 71c:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_WHEEL2, *((uint16_t *)msg));
 71e:	60 81       	ld	r22, Z
 720:	71 81       	ldd	r23, Z+1	; 0x01
 722:	84 e0       	ldi	r24, 0x04	; 4
 724:	22 cf       	rjmp	.-444    	; 0x56a <logger_log>
 726:	08 95       	ret

00000728 <node2_receive>:
}

void node2_receive(void *msg, uint8_t msg_size) {
 728:	fc 01       	movw	r30, r24
	node2_reg ^= node2_msk;
 72a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <node2_msk>
 72e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <node2_reg>
 732:	98 27       	eor	r25, r24
 734:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <node2_reg>
	PORTC = node2_reg | (PORTC & ~node2_msk);
 738:	38 b1       	in	r19, 0x08	; 8
 73a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <node2_msk>
 73e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <node2_reg>
 742:	90 95       	com	r25
 744:	93 23       	and	r25, r19
 746:	92 2b       	or	r25, r18
 748:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_WHEEL2, *((uint16_t *)msg));
 74a:	60 81       	ld	r22, Z
 74c:	71 81       	ldd	r23, Z+1	; 0x01
 74e:	84 e0       	ldi	r24, 0x04	; 4
 750:	0c cf       	rjmp	.-488    	; 0x56a <logger_log>
 752:	08 95       	ret

00000754 <node3_init>:
#include <logger.h>

volatile const uint8_t node3_msk = 4;
volatile uint8_t node3_reg = 4;

void node3_init(void *msg, uint8_t msg_size) {
 754:	fc 01       	movw	r30, r24
	DDRC |= node3_msk;
 756:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <node3_msk>
 75a:	97 b1       	in	r25, 0x07	; 7
 75c:	98 2b       	or	r25, r24
 75e:	97 b9       	out	0x07, r25	; 7
	PORTC = node3_msk | (PORTC & ~node3_msk);
 760:	38 b1       	in	r19, 0x08	; 8
 762:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <node3_msk>
 766:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <node3_msk>
 76a:	90 95       	com	r25
 76c:	93 23       	and	r25, r19
 76e:	92 2b       	or	r25, r18
 770:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 772:	60 81       	ld	r22, Z
 774:	71 81       	ldd	r23, Z+1	; 0x01
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	f8 ce       	rjmp	.-528    	; 0x56a <logger_log>
 77a:	08 95       	ret

0000077c <node3_receive>:
}

void node3_receive(void *msg, uint8_t msg_size) {
 77c:	fc 01       	movw	r30, r24
	node3_reg ^= node3_msk;
 77e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <node3_msk>
 782:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <node3_reg>
 786:	98 27       	eor	r25, r24
 788:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <node3_reg>
	PORTC = node3_reg | (PORTC & ~node3_msk);
 78c:	38 b1       	in	r19, 0x08	; 8
 78e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <node3_msk>
 792:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <node3_reg>
 796:	90 95       	com	r25
 798:	93 23       	and	r25, r19
 79a:	92 2b       	or	r25, r18
 79c:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 79e:	60 81       	ld	r22, Z
 7a0:	71 81       	ldd	r23, Z+1	; 0x01
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	e2 ce       	rjmp	.-572    	; 0x56a <logger_log>
 7a6:	08 95       	ret

000007a8 <node4_init>:
#include <logger.h>

volatile const uint8_t node4_msk = 8;
volatile uint8_t node4_reg = 8;

void node4_init(void *msg, uint8_t msg_size) {
 7a8:	fc 01       	movw	r30, r24
	DDRC |= node4_msk;
 7aa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <node4_msk>
 7ae:	97 b1       	in	r25, 0x07	; 7
 7b0:	98 2b       	or	r25, r24
 7b2:	97 b9       	out	0x07, r25	; 7
	PORTC = node4_msk | (PORTC & ~node4_msk);
 7b4:	38 b1       	in	r19, 0x08	; 8
 7b6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <node4_msk>
 7ba:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <node4_msk>
 7be:	90 95       	com	r25
 7c0:	93 23       	and	r25, r19
 7c2:	92 2b       	or	r25, r18
 7c4:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 7c6:	60 81       	ld	r22, Z
 7c8:	71 81       	ldd	r23, Z+1	; 0x01
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	ce ce       	rjmp	.-612    	; 0x56a <logger_log>
 7ce:	08 95       	ret

000007d0 <node4_receive>:
}

void node4_receive(void *msg, uint8_t msg_size) {
 7d0:	fc 01       	movw	r30, r24
	node4_reg ^= node4_msk;
 7d2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <node4_msk>
 7d6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <node4_reg>
 7da:	98 27       	eor	r25, r24
 7dc:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <node4_reg>
	PORTC = node4_reg | (PORTC & ~node4_msk);
 7e0:	38 b1       	in	r19, 0x08	; 8
 7e2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <node4_msk>
 7e6:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <node4_reg>
 7ea:	90 95       	com	r25
 7ec:	93 23       	and	r25, r19
 7ee:	92 2b       	or	r25, r18
 7f0:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 7f2:	60 81       	ld	r22, Z
 7f4:	71 81       	ldd	r23, Z+1	; 0x01
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	b8 ce       	rjmp	.-656    	; 0x56a <logger_log>
 7fa:	08 95       	ret

000007fc <node5_init>:
#include <logger.h>

volatile const uint8_t node5_msk = 16;
volatile uint8_t node5_reg = 16;

void node5_init(void *msg, uint8_t msg_size) {
 7fc:	fc 01       	movw	r30, r24
	DDRC |= node5_msk;
 7fe:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <node5_msk>
 802:	97 b1       	in	r25, 0x07	; 7
 804:	98 2b       	or	r25, r24
 806:	97 b9       	out	0x07, r25	; 7
	PORTC = node5_msk | (PORTC & ~node5_msk);
 808:	38 b1       	in	r19, 0x08	; 8
 80a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <node5_msk>
 80e:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <node5_msk>
 812:	90 95       	com	r25
 814:	93 23       	and	r25, r19
 816:	92 2b       	or	r25, r18
 818:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 81a:	60 81       	ld	r22, Z
 81c:	71 81       	ldd	r23, Z+1	; 0x01
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	a4 ce       	rjmp	.-696    	; 0x56a <logger_log>
 822:	08 95       	ret

00000824 <node5_receive>:
}

void node5_receive(void *msg, uint8_t msg_size) {
 824:	fc 01       	movw	r30, r24
	node5_reg ^= node5_msk;
 826:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <node5_msk>
 82a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <node5_reg>
 82e:	98 27       	eor	r25, r24
 830:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <node5_reg>
	PORTC = node5_reg | (PORTC & ~node5_msk);
 834:	38 b1       	in	r19, 0x08	; 8
 836:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <node5_msk>
 83a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <node5_reg>
 83e:	90 95       	com	r25
 840:	93 23       	and	r25, r19
 842:	92 2b       	or	r25, r18
 844:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	8e ce       	rjmp	.-740    	; 0x56a <logger_log>
 84e:	08 95       	ret

00000850 <node6_init>:
#include <logger.h>

volatile const uint8_t node6_msk = 32;
volatile uint8_t node6_reg = 32;

void node6_init(void *msg, uint8_t msg_size) {
 850:	fc 01       	movw	r30, r24
	DDRC |= node6_msk;
 852:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <node6_msk>
 856:	97 b1       	in	r25, 0x07	; 7
 858:	98 2b       	or	r25, r24
 85a:	97 b9       	out	0x07, r25	; 7
	PORTC = node6_msk | (PORTC & ~node6_msk);
 85c:	38 b1       	in	r19, 0x08	; 8
 85e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <node6_msk>
 862:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <node6_msk>
 866:	90 95       	com	r25
 868:	93 23       	and	r25, r19
 86a:	92 2b       	or	r25, r18
 86c:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 86e:	60 81       	ld	r22, Z
 870:	71 81       	ldd	r23, Z+1	; 0x01
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	7a ce       	rjmp	.-780    	; 0x56a <logger_log>
 876:	08 95       	ret

00000878 <node6_receive>:
}

void node6_receive(void *msg, uint8_t msg_size) {
 878:	fc 01       	movw	r30, r24
	node6_reg ^= node6_msk;
 87a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <node6_msk>
 87e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <node6_reg>
 882:	98 27       	eor	r25, r24
 884:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <node6_reg>
	PORTC = node6_reg | (PORTC & ~node6_msk);
 888:	38 b1       	in	r19, 0x08	; 8
 88a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <node6_msk>
 88e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <node6_reg>
 892:	90 95       	com	r25
 894:	93 23       	and	r25, r19
 896:	92 2b       	or	r25, r18
 898:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 89a:	60 81       	ld	r22, Z
 89c:	71 81       	ldd	r23, Z+1	; 0x01
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	64 ce       	rjmp	.-824    	; 0x56a <logger_log>
 8a2:	08 95       	ret

000008a4 <node7_init>:
#include <logger.h>

volatile const uint8_t node7_msk = 64;
volatile uint8_t node7_reg = 64;

void node7_init(void *msg, uint8_t msg_size) {
 8a4:	fc 01       	movw	r30, r24
	DDRC |= node7_msk;
 8a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <node7_msk>
 8aa:	97 b1       	in	r25, 0x07	; 7
 8ac:	98 2b       	or	r25, r24
 8ae:	97 b9       	out	0x07, r25	; 7
	PORTC = node7_msk | (PORTC & ~node7_msk);
 8b0:	38 b1       	in	r19, 0x08	; 8
 8b2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <node7_msk>
 8b6:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <node7_msk>
 8ba:	90 95       	com	r25
 8bc:	93 23       	and	r25, r19
 8be:	92 2b       	or	r25, r18
 8c0:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 8c2:	60 81       	ld	r22, Z
 8c4:	71 81       	ldd	r23, Z+1	; 0x01
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	50 ce       	rjmp	.-864    	; 0x56a <logger_log>
 8ca:	08 95       	ret

000008cc <node7_receive>:
}

void node7_receive(void *msg, uint8_t msg_size) {
 8cc:	fc 01       	movw	r30, r24
	node7_reg ^= node7_msk;
 8ce:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <node7_msk>
 8d2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <node7_reg>
 8d6:	98 27       	eor	r25, r24
 8d8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <node7_reg>
	PORTC = node7_reg | (PORTC & ~node7_msk);
 8dc:	38 b1       	in	r19, 0x08	; 8
 8de:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <node7_msk>
 8e2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <node7_reg>
 8e6:	90 95       	com	r25
 8e8:	93 23       	and	r25, r19
 8ea:	92 2b       	or	r25, r18
 8ec:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 8ee:	60 81       	ld	r22, Z
 8f0:	71 81       	ldd	r23, Z+1	; 0x01
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	3a ce       	rjmp	.-908    	; 0x56a <logger_log>
 8f6:	08 95       	ret

000008f8 <node8_init>:
#include <logger.h>

volatile const uint8_t node8_msk = 128;
volatile uint8_t node8_reg = 128;

void node8_init(void *msg, uint8_t msg_size) {
 8f8:	fc 01       	movw	r30, r24
	DDRC |= node8_msk;
 8fa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <node8_msk>
 8fe:	97 b1       	in	r25, 0x07	; 7
 900:	98 2b       	or	r25, r24
 902:	97 b9       	out	0x07, r25	; 7
	PORTC = node8_msk | (PORTC & ~node8_msk);
 904:	38 b1       	in	r19, 0x08	; 8
 906:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <node8_msk>
 90a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <node8_msk>
 90e:	90 95       	com	r25
 910:	93 23       	and	r25, r19
 912:	92 2b       	or	r25, r18
 914:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 916:	60 81       	ld	r22, Z
 918:	71 81       	ldd	r23, Z+1	; 0x01
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	26 ce       	rjmp	.-948    	; 0x56a <logger_log>
 91e:	08 95       	ret

00000920 <node8_receive>:
}

void node8_receive(void *msg, uint8_t msg_size) {
 920:	fc 01       	movw	r30, r24
	node8_reg ^= node8_msk;
 922:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <node8_msk>
 926:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 92a:	98 27       	eor	r25, r24
 92c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTC = node8_reg | (PORTC & ~node8_msk);
 930:	38 b1       	in	r19, 0x08	; 8
 932:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <node8_msk>
 936:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 93a:	90 95       	com	r25
 93c:	93 23       	and	r25, r19
 93e:	92 2b       	or	r25, r18
 940:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 942:	60 81       	ld	r22, Z
 944:	71 81       	ldd	r23, Z+1	; 0x01
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	10 ce       	rjmp	.-992    	; 0x56a <logger_log>
 94a:	08 95       	ret

0000094c <main>:
}

int main(void) {
 94c:	cf 93       	push	r28
 94e:	df 93       	push	r29
 950:	cd b7       	in	r28, 0x3d	; 61
 952:	de b7       	in	r29, 0x3e	; 62
 954:	2d 97       	sbiw	r28, 0x0d	; 13
 956:	0f b6       	in	r0, 0x3f	; 63
 958:	f8 94       	cli
 95a:	de bf       	out	0x3e, r29	; 62
 95c:	0f be       	out	0x3f, r0	; 63
 95e:	cd bf       	out	0x3d, r28	; 61
	const uint16_t node_init_val = 0x7FFF;
 960:	8f ef       	ldi	r24, 0xFF	; 255
 962:	9f e7       	ldi	r25, 0x7F	; 127
 964:	9a 83       	std	Y+2, r25	; 0x02
 966:	89 83       	std	Y+1, r24	; 0x01
	uint16_t can_msg_id;//, adc_val;
	uint8_t can_msg[8], can_msg_size;//, adc_pin;

	// Initialize SPI and logger
	spi_slave_init();
 968:	25 de       	rcall	.-950    	; 0x5b4 <spi_slave_init>
	spi_slave_register_txbuffer(logger_init(), LOGGER_LOG_SIZE);
 96a:	dd dd       	rcall	.-1094   	; 0x526 <logger_init>
 96c:	68 e0       	ldi	r22, 0x08	; 8
 96e:	35 de       	rcall	.-918    	; 0x5da <spi_slave_register_txbuffer>
 970:	82 e5       	ldi	r24, 0x52	; 82
	spi_slave_register_txdone_handler(spi_txdone_log_rotate);
 972:	93 e0       	ldi	r25, 0x03	; 3
 974:	3f de       	rcall	.-898    	; 0x5f4 <spi_slave_register_txdone_handler>
 976:	ac db       	rcall	.-2216   	; 0xd0 <can_init>

	// Initialize CAN
	can_init();
 978:	60 e0       	ldi	r22, 0x00	; 0
	can_filter(0, 0x0000);
 97a:	70 e0       	ldi	r23, 0x00	; 0
 97c:	80 e0       	ldi	r24, 0x00	; 0
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	ef db       	rcall	.-2082   	; 0x160 <can_filter>
 982:	62 e0       	ldi	r22, 0x02	; 2
	// can_filter(256, 0xFFFF);
	// can_filter(512, 0xFFFF);
	// can_filter(1024, 0xFFFF);

	// Initialize nodes
	node1_init((void *)&node_init_val, 2);
 984:	ce 01       	movw	r24, r28
 986:	01 96       	adiw	r24, 0x01	; 1
 988:	91 de       	rcall	.-734    	; 0x6ac <node1_init>
 98a:	62 e0       	ldi	r22, 0x02	; 2
	node2_init((void *)&node_init_val, 2);
 98c:	ce 01       	movw	r24, r28
 98e:	01 96       	adiw	r24, 0x01	; 1
 990:	b7 de       	rcall	.-658    	; 0x700 <node2_init>
 992:	62 e0       	ldi	r22, 0x02	; 2
	node3_init((void *)&node_init_val, 2);
 994:	ce 01       	movw	r24, r28
 996:	01 96       	adiw	r24, 0x01	; 1
 998:	dd de       	rcall	.-582    	; 0x754 <node3_init>
 99a:	62 e0       	ldi	r22, 0x02	; 2
	node4_init((void *)&node_init_val, 2);
 99c:	ce 01       	movw	r24, r28
 99e:	01 96       	adiw	r24, 0x01	; 1
 9a0:	03 df       	rcall	.-506    	; 0x7a8 <node4_init>
 9a2:	62 e0       	ldi	r22, 0x02	; 2
	node5_init((void *)&node_init_val, 2);
 9a4:	ce 01       	movw	r24, r28
 9a6:	01 96       	adiw	r24, 0x01	; 1
 9a8:	29 df       	rcall	.-430    	; 0x7fc <node5_init>
 9aa:	62 e0       	ldi	r22, 0x02	; 2
	node6_init((void *)&node_init_val, 2);
 9ac:	ce 01       	movw	r24, r28
 9ae:	01 96       	adiw	r24, 0x01	; 1
 9b0:	4f df       	rcall	.-354    	; 0x850 <node6_init>
 9b2:	62 e0       	ldi	r22, 0x02	; 2
	node7_init((void *)&node_init_val, 2);
 9b4:	ce 01       	movw	r24, r28
 9b6:	01 96       	adiw	r24, 0x01	; 1
 9b8:	75 df       	rcall	.-278    	; 0x8a4 <node7_init>
 9ba:	62 e0       	ldi	r22, 0x02	; 2
 9bc:	ce 01       	movw	r24, r28
	node8_init((void *)&node_init_val, 2);
 9be:	01 96       	adiw	r24, 0x01	; 1
 9c0:	9b df       	rcall	.-202    	; 0x8f8 <node8_init>
 9c2:	78 94       	sei
 9c4:	51 c0       	rjmp	.+162    	; 0xa68 <main+0x11c>

	// Initialize ADC
	//adc_init(0xFF);
	
	// Initialize system
	sei();
 9c6:	ae 01       	movw	r20, r28
 9c8:	43 5f       	subi	r20, 0xF3	; 243
	// Main loop
	while (1) {

		// Receive and handle node messages.
		while (can_message_available()) {
			can_receive(&can_msg_id, can_msg, &can_msg_size);
 9ca:	5f 4f       	sbci	r21, 0xFF	; 255
 9cc:	be 01       	movw	r22, r28
 9ce:	6b 5f       	subi	r22, 0xFB	; 251
 9d0:	7f 4f       	sbci	r23, 0xFF	; 255
 9d2:	ce 01       	movw	r24, r28
 9d4:	03 96       	adiw	r24, 0x03	; 3
 9d6:	31 dc       	rcall	.-1950   	; 0x23a <can_receive>
 9d8:	8b 81       	ldd	r24, Y+3	; 0x03
 9da:	9c 81       	ldd	r25, Y+4	; 0x04
 9dc:	80 34       	cpi	r24, 0x40	; 64
			switch (can_msg_id) {
 9de:	91 05       	cpc	r25, r1
 9e0:	59 f1       	breq	.+86     	; 0xa38 <main+0xec>
 9e2:	50 f4       	brcc	.+20     	; 0x9f8 <main+0xac>
 9e4:	80 31       	cpi	r24, 0x10	; 16
 9e6:	91 05       	cpc	r25, r1
 9e8:	e9 f0       	breq	.+58     	; 0xa24 <main+0xd8>
 9ea:	80 32       	cpi	r24, 0x20	; 32
 9ec:	91 05       	cpc	r25, r1
 9ee:	f9 f0       	breq	.+62     	; 0xa2e <main+0xe2>
 9f0:	08 97       	sbiw	r24, 0x08	; 8
 9f2:	09 f0       	breq	.+2      	; 0x9f6 <main+0xaa>
 9f4:	39 c0       	rjmp	.+114    	; 0xa68 <main+0x11c>
 9f6:	11 c0       	rjmp	.+34     	; 0xa1a <main+0xce>
 9f8:	81 15       	cp	r24, r1
 9fa:	21 e0       	ldi	r18, 0x01	; 1
 9fc:	92 07       	cpc	r25, r18
 9fe:	31 f1       	breq	.+76     	; 0xa4c <main+0x100>
 a00:	20 f4       	brcc	.+8      	; 0xa0a <main+0xbe>
 a02:	80 38       	cpi	r24, 0x80	; 128
 a04:	91 05       	cpc	r25, r1
 a06:	e9 f0       	breq	.+58     	; 0xa42 <main+0xf6>
 a08:	2f c0       	rjmp	.+94     	; 0xa68 <main+0x11c>
 a0a:	81 15       	cp	r24, r1
 a0c:	22 e0       	ldi	r18, 0x02	; 2
 a0e:	92 07       	cpc	r25, r18
 a10:	11 f1       	breq	.+68     	; 0xa56 <main+0x10a>
 a12:	81 15       	cp	r24, r1
 a14:	94 40       	sbci	r25, 0x04	; 4
 a16:	21 f1       	breq	.+72     	; 0xa60 <main+0x114>
 a18:	27 c0       	rjmp	.+78     	; 0xa68 <main+0x11c>
 a1a:	6d 85       	ldd	r22, Y+13	; 0x0d
				case 8:
					node1_receive(&can_msg_id, can_msg_size);
 a1c:	ce 01       	movw	r24, r28
 a1e:	03 96       	adiw	r24, 0x03	; 3
 a20:	59 de       	rcall	.-846    	; 0x6d4 <node1_receive>
 a22:	22 c0       	rjmp	.+68     	; 0xa68 <main+0x11c>
					break;
 a24:	6d 85       	ldd	r22, Y+13	; 0x0d
				case 16:
					node2_receive(&can_msg_id, can_msg_size);
 a26:	ce 01       	movw	r24, r28
 a28:	03 96       	adiw	r24, 0x03	; 3
 a2a:	7e de       	rcall	.-772    	; 0x728 <node2_receive>
 a2c:	1d c0       	rjmp	.+58     	; 0xa68 <main+0x11c>
					break;
 a2e:	6d 85       	ldd	r22, Y+13	; 0x0d
				case 32:
					node3_receive(&can_msg_id, can_msg_size);
 a30:	ce 01       	movw	r24, r28
 a32:	03 96       	adiw	r24, 0x03	; 3
 a34:	a3 de       	rcall	.-698    	; 0x77c <node3_receive>
 a36:	18 c0       	rjmp	.+48     	; 0xa68 <main+0x11c>
					break;
 a38:	6d 85       	ldd	r22, Y+13	; 0x0d
				case 64:
					node4_receive(&can_msg_id, can_msg_size);
 a3a:	ce 01       	movw	r24, r28
 a3c:	03 96       	adiw	r24, 0x03	; 3
 a3e:	c8 de       	rcall	.-624    	; 0x7d0 <node4_receive>
 a40:	13 c0       	rjmp	.+38     	; 0xa68 <main+0x11c>
					break;
				case 128:
					node5_receive(&can_msg_id, can_msg_size);
 a42:	6d 85       	ldd	r22, Y+13	; 0x0d
 a44:	ce 01       	movw	r24, r28
 a46:	03 96       	adiw	r24, 0x03	; 3
 a48:	ed de       	rcall	.-550    	; 0x824 <node5_receive>
					break;
 a4a:	0e c0       	rjmp	.+28     	; 0xa68 <main+0x11c>
				case 256:
					node6_receive(&can_msg_id, can_msg_size);
 a4c:	6d 85       	ldd	r22, Y+13	; 0x0d
 a4e:	ce 01       	movw	r24, r28
 a50:	03 96       	adiw	r24, 0x03	; 3
 a52:	12 df       	rcall	.-476    	; 0x878 <node6_receive>
 a54:	09 c0       	rjmp	.+18     	; 0xa68 <main+0x11c>
					break;
 a56:	6d 85       	ldd	r22, Y+13	; 0x0d
				case 512:
					node7_receive(&can_msg_id, can_msg_size);
 a58:	ce 01       	movw	r24, r28
 a5a:	03 96       	adiw	r24, 0x03	; 3
 a5c:	37 df       	rcall	.-402    	; 0x8cc <node7_receive>
 a5e:	04 c0       	rjmp	.+8      	; 0xa68 <main+0x11c>
 a60:	6d 85       	ldd	r22, Y+13	; 0x0d
					break;
 a62:	ce 01       	movw	r24, r28
				case 1024:
					node8_receive(&can_msg_id, can_msg_size);
 a64:	03 96       	adiw	r24, 0x03	; 3
 a66:	5c df       	rcall	.-328    	; 0x920 <node8_receive>
 a68:	df db       	rcall	.-2114   	; 0x228 <can_message_available>
 a6a:	81 11       	cpse	r24, r1
 a6c:	ac cf       	rjmp	.-168    	; 0x9c6 <main+0x7a>

	// Main loop
	while (1) {

		// Receive and handle node messages.
		while (can_message_available()) {
 a6e:	fc cf       	rjmp	.-8      	; 0xa68 <main+0x11c>

00000a70 <_exit>:
 a70:	f8 94       	cli

00000a72 <__stop_program>:
 a72:	ff cf       	rjmp	.-2      	; 0xa72 <__stop_program>
