
hu3-c3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000a4a  00000ade  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000111  00800110  00800110  00000aee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bd7  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e02  00000000  00000000  00002897  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1e  00000000  00000000  00003699  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  000043b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d1  00000000  00000000  00004714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bde  00000000  00000000  000050e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005cc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	6f c1       	rjmp	.+734    	; 0x328 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	ac c2       	rjmp	.+1368   	; 0x5aa <__vector_20>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ea e4       	ldi	r30, 0x4A	; 74
  a8:	fa e0       	ldi	r31, 0x0A	; 10
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 31       	cpi	r26, 0x10	; 16
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	22 e0       	ldi	r18, 0x02	; 2
  bc:	a0 e1       	ldi	r26, 0x10	; 16
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a1 32       	cpi	r26, 0x21	; 33
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	16 d4       	rcall	.+2092   	; 0x8f8 <main>
  cc:	bc c4       	rjmp	.+2424   	; 0xa46 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <can_init>:
			tx_msgbuf.write_pos = 0;
		}
	}
	
	CANPAGE = cp_tmp;
}
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  e2:	22 e0       	ldi	r18, 0x02	; 2
  e4:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  e8:	24 e0       	ldi	r18, 0x04	; 4
  ea:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
  ee:	23 e1       	ldi	r18, 0x13	; 19
  f0:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
  f4:	2f e7       	ldi	r18, 0x7F	; 127
  f6:	20 93 df 00 	sts	0x00DF, r18	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 100:	20 eb       	ldi	r18, 0xB0	; 176
 102:	20 93 db 00 	sts	0x00DB, r18	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 106:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 10a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 10e:	4f ef       	ldi	r20, 0xFF	; 255
 110:	5f ef       	ldi	r21, 0xFF	; 255
 112:	ba 01       	movw	r22, r20
 114:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 118:	50 93 f5 00 	sts	0x00F5, r21	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 11c:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 120:	70 93 f7 00 	sts	0x00F7, r23	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	aa 1f       	adc	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	aa 1f       	adc	r26, r26
 136:	bb 1f       	adc	r27, r27
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	aa 1f       	adc	r26, r26
 13e:	bb 1f       	adc	r27, r27
 140:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 144:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 148:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 14c:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 150:	80 e1       	ldi	r24, 0x10	; 16
 152:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 156:	0d ee       	ldi	r16, 0xED	; 237
 158:	10 e0       	ldi	r17, 0x00	; 0
 15a:	2e ee       	ldi	r18, 0xEE	; 238
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	c4 ef       	ldi	r28, 0xF4	; 244
 160:	d0 e0       	ldi	r29, 0x00	; 0
 162:	a0 ef       	ldi	r26, 0xF0	; 240
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	0f 2e       	mov	r0, r31
 168:	ff ee       	ldi	r31, 0xEF	; 239
 16a:	ef 2e       	mov	r14, r31
 16c:	f1 2c       	mov	r15, r1
 16e:	f0 2d       	mov	r31, r0
 170:	f8 01       	movw	r30, r16
 172:	80 83       	st	Z, r24
 174:	f9 01       	movw	r30, r18
 176:	10 82       	st	Z, r1
 178:	48 83       	st	Y, r20
 17a:	59 83       	std	Y+1, r21	; 0x01
 17c:	6a 83       	std	Y+2, r22	; 0x02
 17e:	7b 83       	std	Y+3, r23	; 0x03
 180:	1d 92       	st	X+, r1
 182:	1d 92       	st	X+, r1
 184:	1d 92       	st	X+, r1
 186:	1c 92       	st	X, r1
 188:	13 97       	sbiw	r26, 0x03	; 3
 18a:	f7 01       	movw	r30, r14
 18c:	10 82       	st	Z, r1
 18e:	80 5f       	subi	r24, 0xF0	; 240
 190:	80 3f       	cpi	r24, 0xF0	; 240
 192:	71 f7       	brne	.-36     	; 0x170 <can_init+0xa0>
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	ff 90       	pop	r15
 1a4:	ef 90       	pop	r14
 1a6:	08 95       	ret

000001a8 <can_filter>:
 1a8:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1ac:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <rx_msgbuf+0x2>
 1b0:	2e 30       	cpi	r18, 0x0E	; 14
 1b2:	98 f5       	brcc	.+102    	; 0x21a <can_filter+0x72>
 1b4:	aa e5       	ldi	r26, 0x5A	; 90
 1b6:	b1 e0       	ldi	r27, 0x01	; 1
 1b8:	12 96       	adiw	r26, 0x02	; 2
 1ba:	ec 91       	ld	r30, X
 1bc:	12 97       	sbiw	r26, 0x02	; 2
 1be:	2b e0       	ldi	r18, 0x0B	; 11
 1c0:	e2 9f       	mul	r30, r18
 1c2:	f0 01       	movw	r30, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	e6 5a       	subi	r30, 0xA6	; 166
 1c8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ca:	94 83       	std	Z+4, r25	; 0x04
 1cc:	83 83       	std	Z+3, r24	; 0x03
 1ce:	12 96       	adiw	r26, 0x02	; 2
 1d0:	2c 91       	ld	r18, X
 1d2:	12 97       	sbiw	r26, 0x02	; 2
 1d4:	2f 5f       	subi	r18, 0xFF	; 255
 1d6:	12 96       	adiw	r26, 0x02	; 2
 1d8:	2c 93       	st	X, r18
 1da:	12 97       	sbiw	r26, 0x02	; 2
 1dc:	12 96       	adiw	r26, 0x02	; 2
 1de:	2c 91       	ld	r18, X
 1e0:	22 95       	swap	r18
 1e2:	20 7f       	andi	r18, 0xF0	; 240
 1e4:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1e8:	a0 e0       	ldi	r26, 0x00	; 0
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	aa 1f       	adc	r26, r26
 1f2:	bb 1f       	adc	r27, r27
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	aa 1f       	adc	r26, r26
 1fa:	bb 1f       	adc	r27, r27
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	aa 1f       	adc	r26, r26
 202:	bb 1f       	adc	r27, r27
 204:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 208:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 20c:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 210:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 214:	80 e9       	ldi	r24, 0x90	; 144
 216:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 21a:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 21e:	08 95       	ret

00000220 <can_message_available>:
 220:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <rx_msgbuf>
 224:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <rx_msgbuf+0x1>
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	23 2b       	or	r18, r19
 22c:	09 f4       	brne	.+2      	; 0x230 <can_message_available+0x10>
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	08 95       	ret

00000232 <can_receive>:
 232:	8f 92       	push	r8
 234:	9f 92       	push	r9
 236:	af 92       	push	r10
 238:	bf 92       	push	r11
 23a:	cf 92       	push	r12
 23c:	df 92       	push	r13
 23e:	ef 92       	push	r14
 240:	ff 92       	push	r15
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <rx_msgbuf+0x2>
 24e:	22 23       	and	r18, r18
 250:	09 f4       	brne	.+2      	; 0x254 <can_receive+0x22>
 252:	5d c0       	rjmp	.+186    	; 0x30e <can_receive+0xdc>
 254:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <rx_msgbuf>
 258:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <rx_msgbuf+0x1>
 25c:	20 fd       	sbrc	r18, 0
 25e:	0e c0       	rjmp	.+28     	; 0x27c <can_receive+0x4a>
 260:	a0 e0       	ldi	r26, 0x00	; 0
 262:	01 e0       	ldi	r16, 0x01	; 1
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	ea e5       	ldi	r30, 0x5A	; 90
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	4a c0       	rjmp	.+148    	; 0x300 <can_receive+0xce>
 26c:	20 81       	ld	r18, Z
 26e:	31 81       	ldd	r19, Z+1	; 0x01
 270:	20 23       	and	r18, r16
 272:	31 23       	and	r19, r17
 274:	23 2b       	or	r18, r19
 276:	09 f4       	brne	.+2      	; 0x27a <can_receive+0x48>
 278:	43 c0       	rjmp	.+134    	; 0x300 <can_receive+0xce>
 27a:	03 c0       	rjmp	.+6      	; 0x282 <can_receive+0x50>
 27c:	a0 e0       	ldi	r26, 0x00	; 0
 27e:	01 e0       	ldi	r16, 0x01	; 1
 280:	10 e0       	ldi	r17, 0x00	; 0
 282:	0f 2e       	mov	r0, r31
 284:	fa e5       	ldi	r31, 0x5A	; 90
 286:	ef 2e       	mov	r14, r31
 288:	f1 e0       	ldi	r31, 0x01	; 1
 28a:	ff 2e       	mov	r15, r31
 28c:	f0 2d       	mov	r31, r0
 28e:	68 01       	movw	r12, r16
 290:	c0 94       	com	r12
 292:	d0 94       	com	r13
 294:	2b e0       	ldi	r18, 0x0B	; 11
 296:	a2 9f       	mul	r26, r18
 298:	d0 01       	movw	r26, r0
 29a:	11 24       	eor	r1, r1
 29c:	a6 5a       	subi	r26, 0xA6	; 166
 29e:	be 4f       	sbci	r27, 0xFE	; 254
 2a0:	5d 01       	movw	r10, r26
 2a2:	e3 e0       	ldi	r30, 0x03	; 3
 2a4:	ae 0e       	add	r10, r30
 2a6:	b1 1c       	adc	r11, r1
 2a8:	ed 01       	movw	r28, r26
 2aa:	25 96       	adiw	r28, 0x05	; 5
 2ac:	f7 01       	movw	r30, r14
 2ae:	20 81       	ld	r18, Z
 2b0:	31 81       	ldd	r19, Z+1	; 0x01
 2b2:	2c 21       	and	r18, r12
 2b4:	3d 21       	and	r19, r13
 2b6:	31 83       	std	Z+1, r19	; 0x01
 2b8:	20 83       	st	Z, r18
 2ba:	f5 01       	movw	r30, r10
 2bc:	20 81       	ld	r18, Z
 2be:	31 81       	ldd	r19, Z+1	; 0x01
 2c0:	fc 01       	movw	r30, r24
 2c2:	31 83       	std	Z+1, r19	; 0x01
 2c4:	20 83       	st	Z, r18
 2c6:	28 81       	ld	r18, Y
 2c8:	fa 01       	movw	r30, r20
 2ca:	20 83       	st	Z, r18
 2cc:	28 81       	ld	r18, Y
 2ce:	22 23       	and	r18, r18
 2d0:	79 f0       	breq	.+30     	; 0x2f0 <can_receive+0xbe>
 2d2:	91 2c       	mov	r9, r1
 2d4:	29 2d       	mov	r18, r9
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	fd 01       	movw	r30, r26
 2da:	e2 0f       	add	r30, r18
 2dc:	f3 1f       	adc	r31, r19
 2de:	86 80       	ldd	r8, Z+6	; 0x06
 2e0:	26 0f       	add	r18, r22
 2e2:	37 1f       	adc	r19, r23
 2e4:	f9 01       	movw	r30, r18
 2e6:	80 82       	st	Z, r8
 2e8:	93 94       	inc	r9
 2ea:	28 81       	ld	r18, Y
 2ec:	92 16       	cp	r9, r18
 2ee:	90 f3       	brcs	.-28     	; 0x2d4 <can_receive+0xa2>
 2f0:	f7 01       	movw	r30, r14
 2f2:	20 81       	ld	r18, Z
 2f4:	31 81       	ldd	r19, Z+1	; 0x01
 2f6:	20 23       	and	r18, r16
 2f8:	31 23       	and	r19, r17
 2fa:	23 2b       	or	r18, r19
 2fc:	b9 f6       	brne	.-82     	; 0x2ac <can_receive+0x7a>
 2fe:	07 c0       	rjmp	.+14     	; 0x30e <can_receive+0xdc>
 300:	00 0f       	add	r16, r16
 302:	11 1f       	adc	r17, r17
 304:	af 5f       	subi	r26, 0xFF	; 255
 306:	22 81       	ldd	r18, Z+2	; 0x02
 308:	a2 17       	cp	r26, r18
 30a:	08 f4       	brcc	.+2      	; 0x30e <can_receive+0xdc>
 30c:	af cf       	rjmp	.-162    	; 0x26c <can_receive+0x3a>
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	df 90       	pop	r13
 31c:	cf 90       	pop	r12
 31e:	bf 90       	pop	r11
 320:	af 90       	pop	r10
 322:	9f 90       	pop	r9
 324:	8f 90       	pop	r8
 326:	08 95       	ret

00000328 <__vector_18>:

// ------------------------------------------------- Interrupt Service Routines

#if defined CANIT_vect
ISR(CANIT_vect) {
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	0b b6       	in	r0, 0x3b	; 59
 334:	0f 92       	push	r0
 336:	2f 93       	push	r18
 338:	3f 93       	push	r19
 33a:	4f 93       	push	r20
 33c:	6f 93       	push	r22
 33e:	7f 93       	push	r23
 340:	8f 93       	push	r24
 342:	9f 93       	push	r25
 344:	af 93       	push	r26
 346:	bf 93       	push	r27
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	ef 93       	push	r30
 34e:	ff 93       	push	r31
#elif defined CAN_INT_vect
ISR(CAN_INT_vect) {
#endif
	const uint8_t cp_tmp = CANPAGE;
 350:	ed ee       	ldi	r30, 0xED	; 237
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	40 81       	ld	r20, Z
	uint8_t bufi, cp_max, cp, msgi;

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
 356:	10 82       	st	Z, r1
	if (CANSTMOB & _BV(TXOK) && tx_msgbuf.read_pos != tx_msgbuf.write_pos) {
 358:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 35c:	86 ff       	sbrs	r24, 6
 35e:	43 c0       	rjmp	.+134    	; 0x3e6 <__vector_18+0xbe>
 360:	e0 e1       	ldi	r30, 0x10	; 16
 362:	f1 e0       	ldi	r31, 0x01	; 1
 364:	91 81       	ldd	r25, Z+1	; 0x01
 366:	80 81       	ld	r24, Z
 368:	98 17       	cp	r25, r24
 36a:	e9 f1       	breq	.+122    	; 0x3e6 <__vector_18+0xbe>
		bufi = tx_msgbuf.read_pos;
 36c:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <__data_end+0x1>
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].msg_size; msgi++) {
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	fb 01       	movw	r30, r22
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	e6 0f       	add	r30, r22
 382:	f7 1f       	adc	r31, r23
 384:	e0 5f       	subi	r30, 0xF0	; 240
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	82 81       	ldd	r24, Z+2	; 0x02
 38a:	88 23       	and	r24, r24
 38c:	79 f0       	breq	.+30     	; 0x3ac <__vector_18+0x84>
 38e:	80 e0       	ldi	r24, 0x00	; 0
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
 390:	9f 01       	movw	r18, r30
 392:	ca ef       	ldi	r28, 0xFA	; 250
 394:	d0 e0       	ldi	r29, 0x00	; 0

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
	if (CANSTMOB & _BV(TXOK) && tx_msgbuf.read_pos != tx_msgbuf.write_pos) {
		bufi = tx_msgbuf.read_pos;
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].msg_size; msgi++) {
 396:	df 01       	movw	r26, r30
 398:	12 96       	adiw	r26, 0x02	; 2
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
 39a:	f9 01       	movw	r30, r18
 39c:	e8 0f       	add	r30, r24
 39e:	f1 1d       	adc	r31, r1
 3a0:	93 81       	ldd	r25, Z+3	; 0x03
 3a2:	98 83       	st	Y, r25

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
	if (CANSTMOB & _BV(TXOK) && tx_msgbuf.read_pos != tx_msgbuf.write_pos) {
		bufi = tx_msgbuf.read_pos;
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].msg_size; msgi++) {
 3a4:	8f 5f       	subi	r24, 0xFF	; 255
 3a6:	9c 91       	ld	r25, X
 3a8:	89 17       	cp	r24, r25
 3aa:	b8 f3       	brcs	.-18     	; 0x39a <__vector_18+0x72>
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
		}
#if defined CAN_REV_2A
		CANCDMOB = _BV(CONMOB0) | tx_msgbuf.msgs[bufi].msg_size;
#elif defined CAN_REV_2B
		CANCDMOB = _BV(CONMOB0) | _BV(IDE) | tx_msgbuf.msgs[bufi].msg_size;
 3ac:	fb 01       	movw	r30, r22
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	ee 0f       	add	r30, r30
 3b4:	ff 1f       	adc	r31, r31
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	6e 0f       	add	r22, r30
 3bc:	7f 1f       	adc	r23, r31
 3be:	fb 01       	movw	r30, r22
 3c0:	e0 5f       	subi	r30, 0xF0	; 240
 3c2:	fe 4f       	sbci	r31, 0xFE	; 254
 3c4:	82 81       	ldd	r24, Z+2	; 0x02
 3c6:	80 65       	ori	r24, 0x50	; 80
 3c8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
#endif
		if (tx_msgbuf.read_pos < CAN_TX_MSGBUF_SIZE-1) {
 3cc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__data_end+0x1>
 3d0:	87 30       	cpi	r24, 0x07	; 7
 3d2:	30 f4       	brcc	.+12     	; 0x3e0 <__vector_18+0xb8>
			tx_msgbuf.read_pos++;
 3d4:	e0 e1       	ldi	r30, 0x10	; 16
 3d6:	f1 e0       	ldi	r31, 0x01	; 1
 3d8:	81 81       	ldd	r24, Z+1	; 0x01
 3da:	8f 5f       	subi	r24, 0xFF	; 255
 3dc:	81 83       	std	Z+1, r24	; 0x01
 3de:	61 c0       	rjmp	.+194    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		} else {
			tx_msgbuf.read_pos = 0;
 3e0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 3e4:	5e c0       	rjmp	.+188    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
 3e6:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <rx_msgbuf+0x2>
 3ea:	92 95       	swap	r25
 3ec:	90 7f       	andi	r25, 0xF0	; 240
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 3ee:	90 31       	cpi	r25, 0x10	; 16
 3f0:	08 f4       	brcc	.+2      	; 0x3f4 <__vector_18+0xcc>
 3f2:	57 c0       	rjmp	.+174    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			CANPAGE = cp;
 3f4:	80 e1       	ldi	r24, 0x10	; 16
 3f6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 3fa:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 3fe:	85 fd       	sbrc	r24, 5
 400:	0b c0       	rjmp	.+22     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 402:	e0 e1       	ldi	r30, 0x10	; 16

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
			CANPAGE = cp;
 404:	cd ee       	ldi	r28, 0xED	; 237
 406:	d0 e0       	ldi	r29, 0x00	; 0
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 408:	ae ee       	ldi	r26, 0xEE	; 238
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	46 c0       	rjmp	.+140    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
			CANPAGE = cp;
 40e:	e8 83       	st	Y, r30
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 410:	8c 91       	ld	r24, X
 412:	85 ff       	sbrs	r24, 5
 414:	42 c0       	rjmp	.+132    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 416:	01 c0       	rjmp	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 418:	e0 e1       	ldi	r30, 0x10	; 16
			CANPAGE = cp;
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
 41a:	aa e5       	ldi	r26, 0x5A	; 90
 41c:	b1 e0       	ldi	r27, 0x01	; 1
 41e:	2d 91       	ld	r18, X+
 420:	3c 91       	ld	r19, X
 422:	11 97       	sbiw	r26, 0x01	; 1
 424:	e2 95       	swap	r30
 426:	ef 70       	andi	r30, 0x0F	; 15
 428:	e1 50       	subi	r30, 0x01	; 1
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 2e       	mov	r0, r30
 430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 43a:	82 2b       	or	r24, r18
 43c:	93 2b       	or	r25, r19
 43e:	11 96       	adiw	r26, 0x01	; 1
 440:	9c 93       	st	X, r25
 442:	8e 93       	st	-X, r24
				rx_msgbuf.msgs[bufi].msg_size = CANCDMOB & 0x0F;
 444:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 448:	8f 70       	andi	r24, 0x0F	; 15
 44a:	6e 2f       	mov	r22, r30
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	9b e0       	ldi	r25, 0x0B	; 11
 450:	e9 9f       	mul	r30, r25
 452:	f0 01       	movw	r30, r0
 454:	11 24       	eor	r1, r1
 456:	e6 5a       	subi	r30, 0xA6	; 166
 458:	fe 4f       	sbci	r31, 0xFE	; 254
 45a:	85 83       	std	Z+5, r24	; 0x05
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].msg_size; msgi++) {
 45c:	85 81       	ldd	r24, Z+5	; 0x05
 45e:	88 23       	and	r24, r24
 460:	b1 f0       	breq	.+44     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 462:	80 e0       	ldi	r24, 0x00	; 0
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
 464:	ca ef       	ldi	r28, 0xFA	; 250
 466:	d0 e0       	ldi	r29, 0x00	; 0
 468:	9b e0       	ldi	r25, 0x0B	; 11
 46a:	96 9f       	mul	r25, r22
 46c:	90 01       	movw	r18, r0
 46e:	97 9f       	mul	r25, r23
 470:	30 0d       	add	r19, r0
 472:	11 24       	eor	r1, r1
 474:	26 5a       	subi	r18, 0xA6	; 166
 476:	3e 4f       	sbci	r19, 0xFE	; 254
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
				rx_msgbuf.msgs[bufi].msg_size = CANCDMOB & 0x0F;
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].msg_size; msgi++) {
 478:	d9 01       	movw	r26, r18
 47a:	15 96       	adiw	r26, 0x05	; 5
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
 47c:	98 81       	ld	r25, Y
 47e:	f9 01       	movw	r30, r18
 480:	e8 0f       	add	r30, r24
 482:	f1 1d       	adc	r31, r1
 484:	96 83       	std	Z+6, r25	; 0x06
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
				rx_msgbuf.msgs[bufi].msg_size = CANCDMOB & 0x0F;
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].msg_size; msgi++) {
 486:	8f 5f       	subi	r24, 0xFF	; 255
 488:	9c 91       	ld	r25, X
 48a:	89 17       	cp	r24, r25
 48c:	b8 f3       	brcs	.-18     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
				}
				CANCDMOB |= _BV(CONMOB1);
 48e:	ef ee       	ldi	r30, 0xEF	; 239
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	80 68       	ori	r24, 0x80	; 128
 496:	80 83       	st	Z, r24
				break;
 498:	04 c0       	rjmp	.+8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 49a:	e0 5f       	subi	r30, 0xF0	; 240
 49c:	9e 17       	cp	r25, r30
 49e:	08 f0       	brcs	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4a0:	b6 cf       	rjmp	.-148    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				break;
			}
		}
	}

	CANSTMOB = 0x00;
 4a2:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANPAGE = cp_tmp;
 4a6:	40 93 ed 00 	sts	0x00ED, r20	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	bf 91       	pop	r27
 4b4:	af 91       	pop	r26
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	7f 91       	pop	r23
 4bc:	6f 91       	pop	r22
 4be:	4f 91       	pop	r20
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0b be       	out	0x3b, r0	; 59
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <logger_init>:

static volatile buffer_t buffer;

// --------------------------------------------------------- External Functions

void *logger_init(void) {
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	90 e0       	ldi	r25, 0x00	; 0

	uint8_t i;
	for (i = 0; i < LOGGER_LOG_SIZE; i++) {
		buffer.buffer1[i] = UINT16_MAX;
 4d6:	4f ef       	ldi	r20, 0xFF	; 255
 4d8:	5f ef       	ldi	r21, 0xFF	; 255
 4da:	9c 01       	movw	r18, r24
 4dc:	2f 5f       	subi	r18, 0xFF	; 255
 4de:	3f 4f       	sbci	r19, 0xFF	; 255
 4e0:	f9 01       	movw	r30, r18
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	e9 50       	subi	r30, 0x09	; 9
 4e8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ea:	51 83       	std	Z+1, r21	; 0x01
 4ec:	40 83       	st	Z, r20
		buffer.buffer2[i] = UINT16_MAX;
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	fc 01       	movw	r30, r24
 4f4:	e7 5f       	subi	r30, 0xF7	; 247
 4f6:	fd 4f       	sbci	r31, 0xFD	; 253
 4f8:	51 83       	std	Z+1, r21	; 0x01
 4fa:	40 83       	st	Z, r20
 4fc:	c9 01       	movw	r24, r18
// --------------------------------------------------------- External Functions

void *logger_init(void) {

	uint8_t i;
	for (i = 0; i < LOGGER_LOG_SIZE; i++) {
 4fe:	28 30       	cpi	r18, 0x08	; 8
 500:	31 05       	cpc	r19, r1
 502:	59 f7       	brne	.-42     	; 0x4da <logger_init+0x8>
		buffer.buffer1[i] = UINT16_MAX;
		buffer.buffer2[i] = UINT16_MAX;
	}
	
	buffer.writable = (void *)buffer.buffer1;
 504:	89 ef       	ldi	r24, 0xF9	; 249
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <buffer+0x1>
 50c:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <buffer>
	return (void *)buffer.buffer2;
}
 510:	89 e0       	ldi	r24, 0x09	; 9
 512:	92 e0       	ldi	r25, 0x02	; 2
 514:	08 95       	ret

00000516 <logger_log>:

void logger_log(logger_log_t type, uint16_t value) {

	*(buffer.writable+type) = value;
 516:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <buffer>
 51a:	f0 91 f8 01 	lds	r31, 0x01F8	; 0x8001f8 <buffer+0x1>
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	e8 0f       	add	r30, r24
 526:	f9 1f       	adc	r31, r25
 528:	71 83       	std	Z+1, r23	; 0x01
 52a:	60 83       	st	Z, r22
 52c:	08 95       	ret

0000052e <logger_rotate>:
}

void *logger_rotate(void) {

	if (buffer.writable == buffer.buffer1) {
 52e:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <buffer>
 532:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <buffer+0x1>
 536:	89 5f       	subi	r24, 0xF9	; 249
 538:	91 40       	sbci	r25, 0x01	; 1
 53a:	49 f4       	brne	.+18     	; 0x54e <logger_rotate+0x20>
		buffer.writable = (void *)buffer.buffer2;
 53c:	89 e0       	ldi	r24, 0x09	; 9
 53e:	92 e0       	ldi	r25, 0x02	; 2
 540:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <buffer+0x1>
 544:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <buffer>
		return (void *)buffer.buffer1;
 548:	89 ef       	ldi	r24, 0xF9	; 249
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	08 95       	ret
	} else {
		buffer.writable = (void *)buffer.buffer1;
 54e:	89 ef       	ldi	r24, 0xF9	; 249
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <buffer+0x1>
 556:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <buffer>
		return (void *)buffer.buffer2;
 55a:	89 e0       	ldi	r24, 0x09	; 9
 55c:	92 e0       	ldi	r25, 0x02	; 2
	}
 55e:	08 95       	ret

00000560 <spi_slave_init>:
}

void spi_slave_register_txstart_handler(void (*txstart_handler)()) {

	// Register handler
	_txstart_handler = txstart_handler;
 560:	88 e0       	ldi	r24, 0x08	; 8
 562:	84 b9       	out	0x04, r24	; 4
 564:	8f ef       	ldi	r24, 0xFF	; 255
 566:	8e bd       	out	0x2e, r24	; 46
 568:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <_txbuffer+0x1>
 56c:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <_txbuffer>
 570:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <_txbufend>
 574:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <_txbufpos>
 578:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <_txdone_handler+0x1>
 57c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <_txdone_handler>
 580:	80 ec       	ldi	r24, 0xC0	; 192
 582:	8c bd       	out	0x2c, r24	; 44
 584:	08 95       	ret

00000586 <spi_slave_register_txbuffer>:
 586:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <_txbuffer+0x1>
 58a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <_txbuffer>
 58e:	61 50       	subi	r22, 0x01	; 1
 590:	60 93 1e 02 	sts	0x021E, r22	; 0x80021e <_txbufend>
 594:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <_txbufpos>
 598:	fc 01       	movw	r30, r24
 59a:	80 81       	ld	r24, Z
 59c:	8e bd       	out	0x2e, r24	; 46
 59e:	08 95       	ret

000005a0 <spi_slave_register_txdone_handler>:
}

void spi_slave_register_txdone_handler(void (*txdone_handler)()) {

	// Register handler
	_txdone_handler = txdone_handler;
 5a0:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <_txdone_handler+0x1>
 5a4:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <_txdone_handler>
 5a8:	08 95       	ret

000005aa <__vector_20>:
}

// ------------------------------------------------- Interrupt Service Routines

ISR(SPI_STC_vect) {
 5aa:	1f 92       	push	r1
 5ac:	0f 92       	push	r0
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	0f 92       	push	r0
 5b2:	11 24       	eor	r1, r1
 5b4:	0b b6       	in	r0, 0x3b	; 59
 5b6:	0f 92       	push	r0
 5b8:	2f 93       	push	r18
 5ba:	3f 93       	push	r19
 5bc:	4f 93       	push	r20
 5be:	5f 93       	push	r21
 5c0:	6f 93       	push	r22
 5c2:	7f 93       	push	r23
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
 5c8:	af 93       	push	r26
 5ca:	bf 93       	push	r27
 5cc:	ef 93       	push	r30
 5ce:	ff 93       	push	r31

	if (_txbufpos == 0) {
 5d0:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <_txbufpos>
 5d4:	81 11       	cpse	r24, r1
 5d6:	07 c0       	rjmp	.+14     	; 0x5e6 <__vector_20+0x3c>
		
		// Call tx start handler
		if (_txstart_handler != NULL) {
 5d8:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <_txstart_handler>
 5dc:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <_txstart_handler+0x1>
 5e0:	30 97       	sbiw	r30, 0x00	; 0
 5e2:	09 f0       	breq	.+2      	; 0x5e6 <__vector_20+0x3c>
			(*_txstart_handler)();
 5e4:	09 95       	icall
		}
	}

	if (_txbufpos < _txbufend) {
 5e6:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <_txbufpos>
 5ea:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <_txbufend>
 5ee:	98 17       	cp	r25, r24
 5f0:	30 f4       	brcc	.+12     	; 0x5fe <__vector_20+0x54>

		// Increment buffer position
		_txbufpos++;
 5f2:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <_txbufpos>
 5f6:	8f 5f       	subi	r24, 0xFF	; 255
 5f8:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <_txbufpos>
 5fc:	09 c0       	rjmp	.+18     	; 0x610 <__vector_20+0x66>

	} else {

		// Reset buffer position
		_txbufpos = 0;
 5fe:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <_txbufpos>

		// Call tx done handler
		if (_txdone_handler != NULL) {
 602:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <_txdone_handler>
 606:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <_txdone_handler+0x1>
 60a:	30 97       	sbiw	r30, 0x00	; 0
 60c:	09 f0       	breq	.+2      	; 0x610 <__vector_20+0x66>
			(*_txdone_handler)();
 60e:	09 95       	icall
		}
	}

	// Copy next byte from tx buffer to controller
	if (_txbuffer != NULL) {	
 610:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <_txbuffer>
 614:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <_txbuffer+0x1>
 618:	00 97       	sbiw	r24, 0x00	; 0
 61a:	39 f0       	breq	.+14     	; 0x62a <__vector_20+0x80>
		SPDR = *(_txbuffer+_txbufpos);
 61c:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <_txbufpos>
 620:	fc 01       	movw	r30, r24
 622:	e2 0f       	add	r30, r18
 624:	f1 1d       	adc	r31, r1
 626:	80 81       	ld	r24, Z
 628:	8e bd       	out	0x2e, r24	; 46
	}
 62a:	ff 91       	pop	r31
 62c:	ef 91       	pop	r30
 62e:	bf 91       	pop	r27
 630:	af 91       	pop	r26
 632:	9f 91       	pop	r25
 634:	8f 91       	pop	r24
 636:	7f 91       	pop	r23
 638:	6f 91       	pop	r22
 63a:	5f 91       	pop	r21
 63c:	4f 91       	pop	r20
 63e:	3f 91       	pop	r19
 640:	2f 91       	pop	r18
 642:	0f 90       	pop	r0
 644:	0b be       	out	0x3b, r0	; 59
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <spi_log_rotate>:
#include "nodes/node6.c"
#include "nodes/node7.c"
#include "nodes/node8.c"

void spi_log_rotate(void) {
	spi_slave_register_txbuffer(logger_rotate(), LOGGER_LOG_SIZE);
 650:	6e df       	rcall	.-292    	; 0x52e <logger_rotate>
 652:	68 e0       	ldi	r22, 0x08	; 8
 654:	98 cf       	rjmp	.-208    	; 0x586 <spi_slave_register_txbuffer>
 656:	08 95       	ret

00000658 <node1_init>:
#include <logger.h>

volatile const uint8_t node1_msk = 1;
volatile uint8_t node1_reg = 1;

void node1_init(void *msg, uint8_t msg_size) {
 658:	fc 01       	movw	r30, r24
	DDRC |= node1_msk;
 65a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <node1_msk>
 65e:	97 b1       	in	r25, 0x07	; 7
 660:	98 2b       	or	r25, r24
 662:	97 b9       	out	0x07, r25	; 7
	PORTC = node1_msk | (PORTC & ~node1_msk);
 664:	38 b1       	in	r19, 0x08	; 8
 666:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <node1_msk>
 66a:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <node1_msk>
 66e:	90 95       	com	r25
 670:	93 23       	and	r25, r19
 672:	92 2b       	or	r25, r18
 674:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_WHEEL1, *((uint16_t *)msg));
 676:	60 81       	ld	r22, Z
 678:	71 81       	ldd	r23, Z+1	; 0x01
 67a:	83 e0       	ldi	r24, 0x03	; 3
 67c:	4c cf       	rjmp	.-360    	; 0x516 <logger_log>
 67e:	08 95       	ret

00000680 <node1_receive>:
}

void node1_receive(void *msg, uint8_t msg_size) {
 680:	fc 01       	movw	r30, r24
	node1_reg ^= node1_msk;
 682:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <node1_msk>
 686:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <node1_reg>
 68a:	98 27       	eor	r25, r24
 68c:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <node1_reg>
	PORTC = node1_reg | (PORTC & ~node1_msk);
 690:	38 b1       	in	r19, 0x08	; 8
 692:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <node1_msk>
 696:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <node1_reg>
 69a:	90 95       	com	r25
 69c:	93 23       	and	r25, r19
 69e:	92 2b       	or	r25, r18
 6a0:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_WHEEL1, *((uint16_t *)msg));
 6a2:	60 81       	ld	r22, Z
 6a4:	71 81       	ldd	r23, Z+1	; 0x01
 6a6:	83 e0       	ldi	r24, 0x03	; 3
 6a8:	36 cf       	rjmp	.-404    	; 0x516 <logger_log>
 6aa:	08 95       	ret

000006ac <node2_init>:
#include <logger.h>

volatile const uint8_t node2_msk = 2;
volatile uint8_t node2_reg = 2;

void node2_init(void *msg, uint8_t msg_size) {
 6ac:	fc 01       	movw	r30, r24
	DDRC |= node2_msk;
 6ae:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <node2_msk>
 6b2:	97 b1       	in	r25, 0x07	; 7
 6b4:	98 2b       	or	r25, r24
 6b6:	97 b9       	out	0x07, r25	; 7
	PORTC = node2_msk | (PORTC & ~node2_msk);
 6b8:	38 b1       	in	r19, 0x08	; 8
 6ba:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <node2_msk>
 6be:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <node2_msk>
 6c2:	90 95       	com	r25
 6c4:	93 23       	and	r25, r19
 6c6:	92 2b       	or	r25, r18
 6c8:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_WHEEL2, *((uint16_t *)msg));
 6ca:	60 81       	ld	r22, Z
 6cc:	71 81       	ldd	r23, Z+1	; 0x01
 6ce:	84 e0       	ldi	r24, 0x04	; 4
 6d0:	22 cf       	rjmp	.-444    	; 0x516 <logger_log>
 6d2:	08 95       	ret

000006d4 <node2_receive>:
}

void node2_receive(void *msg, uint8_t msg_size) {
 6d4:	fc 01       	movw	r30, r24
	node2_reg ^= node2_msk;
 6d6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <node2_msk>
 6da:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <node2_reg>
 6de:	98 27       	eor	r25, r24
 6e0:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <node2_reg>
	PORTC = node2_reg | (PORTC & ~node2_msk);
 6e4:	38 b1       	in	r19, 0x08	; 8
 6e6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <node2_msk>
 6ea:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <node2_reg>
 6ee:	90 95       	com	r25
 6f0:	93 23       	and	r25, r19
 6f2:	92 2b       	or	r25, r18
 6f4:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_WHEEL2, *((uint16_t *)msg));
 6f6:	60 81       	ld	r22, Z
 6f8:	71 81       	ldd	r23, Z+1	; 0x01
 6fa:	84 e0       	ldi	r24, 0x04	; 4
 6fc:	0c cf       	rjmp	.-488    	; 0x516 <logger_log>
 6fe:	08 95       	ret

00000700 <node3_init>:
#include <logger.h>

volatile const uint8_t node3_msk = 4;
volatile uint8_t node3_reg = 4;

void node3_init(void *msg, uint8_t msg_size) {
 700:	fc 01       	movw	r30, r24
	DDRC |= node3_msk;
 702:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <node3_msk>
 706:	97 b1       	in	r25, 0x07	; 7
 708:	98 2b       	or	r25, r24
 70a:	97 b9       	out	0x07, r25	; 7
	PORTC = node3_msk | (PORTC & ~node3_msk);
 70c:	38 b1       	in	r19, 0x08	; 8
 70e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <node3_msk>
 712:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <node3_msk>
 716:	90 95       	com	r25
 718:	93 23       	and	r25, r19
 71a:	92 2b       	or	r25, r18
 71c:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 71e:	60 81       	ld	r22, Z
 720:	71 81       	ldd	r23, Z+1	; 0x01
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	f8 ce       	rjmp	.-528    	; 0x516 <logger_log>
 726:	08 95       	ret

00000728 <node3_receive>:
}

void node3_receive(void *msg, uint8_t msg_size) {
 728:	fc 01       	movw	r30, r24
	node3_reg ^= node3_msk;
 72a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <node3_msk>
 72e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <node3_reg>
 732:	98 27       	eor	r25, r24
 734:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <node3_reg>
	PORTC = node3_reg | (PORTC & ~node3_msk);
 738:	38 b1       	in	r19, 0x08	; 8
 73a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <node3_msk>
 73e:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <node3_reg>
 742:	90 95       	com	r25
 744:	93 23       	and	r25, r19
 746:	92 2b       	or	r25, r18
 748:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 74a:	60 81       	ld	r22, Z
 74c:	71 81       	ldd	r23, Z+1	; 0x01
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	e2 ce       	rjmp	.-572    	; 0x516 <logger_log>
 752:	08 95       	ret

00000754 <node4_init>:
#include <logger.h>

volatile const uint8_t node4_msk = 8;
volatile uint8_t node4_reg = 8;

void node4_init(void *msg, uint8_t msg_size) {
 754:	fc 01       	movw	r30, r24
	DDRC |= node4_msk;
 756:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <node4_msk>
 75a:	97 b1       	in	r25, 0x07	; 7
 75c:	98 2b       	or	r25, r24
 75e:	97 b9       	out	0x07, r25	; 7
	PORTC = node4_msk | (PORTC & ~node4_msk);
 760:	38 b1       	in	r19, 0x08	; 8
 762:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <node4_msk>
 766:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <node4_msk>
 76a:	90 95       	com	r25
 76c:	93 23       	and	r25, r19
 76e:	92 2b       	or	r25, r18
 770:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 772:	60 81       	ld	r22, Z
 774:	71 81       	ldd	r23, Z+1	; 0x01
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	ce ce       	rjmp	.-612    	; 0x516 <logger_log>
 77a:	08 95       	ret

0000077c <node4_receive>:
}

void node4_receive(void *msg, uint8_t msg_size) {
 77c:	fc 01       	movw	r30, r24
	node4_reg ^= node4_msk;
 77e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <node4_msk>
 782:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <node4_reg>
 786:	98 27       	eor	r25, r24
 788:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <node4_reg>
	PORTC = node4_reg | (PORTC & ~node4_msk);
 78c:	38 b1       	in	r19, 0x08	; 8
 78e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <node4_msk>
 792:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <node4_reg>
 796:	90 95       	com	r25
 798:	93 23       	and	r25, r19
 79a:	92 2b       	or	r25, r18
 79c:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 79e:	60 81       	ld	r22, Z
 7a0:	71 81       	ldd	r23, Z+1	; 0x01
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	b8 ce       	rjmp	.-656    	; 0x516 <logger_log>
 7a6:	08 95       	ret

000007a8 <node5_init>:
#include <logger.h>

volatile const uint8_t node5_msk = 16;
volatile uint8_t node5_reg = 16;

void node5_init(void *msg, uint8_t msg_size) {
 7a8:	fc 01       	movw	r30, r24
	DDRC |= node5_msk;
 7aa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <node5_msk>
 7ae:	97 b1       	in	r25, 0x07	; 7
 7b0:	98 2b       	or	r25, r24
 7b2:	97 b9       	out	0x07, r25	; 7
	PORTC = node5_msk | (PORTC & ~node5_msk);
 7b4:	38 b1       	in	r19, 0x08	; 8
 7b6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <node5_msk>
 7ba:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <node5_msk>
 7be:	90 95       	com	r25
 7c0:	93 23       	and	r25, r19
 7c2:	92 2b       	or	r25, r18
 7c4:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 7c6:	60 81       	ld	r22, Z
 7c8:	71 81       	ldd	r23, Z+1	; 0x01
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	a4 ce       	rjmp	.-696    	; 0x516 <logger_log>
 7ce:	08 95       	ret

000007d0 <node5_receive>:
}

void node5_receive(void *msg, uint8_t msg_size) {
 7d0:	fc 01       	movw	r30, r24
	node5_reg ^= node5_msk;
 7d2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <node5_msk>
 7d6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <node5_reg>
 7da:	98 27       	eor	r25, r24
 7dc:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <node5_reg>
	PORTC = node5_reg | (PORTC & ~node5_msk);
 7e0:	38 b1       	in	r19, 0x08	; 8
 7e2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <node5_msk>
 7e6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <node5_reg>
 7ea:	90 95       	com	r25
 7ec:	93 23       	and	r25, r19
 7ee:	92 2b       	or	r25, r18
 7f0:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 7f2:	60 81       	ld	r22, Z
 7f4:	71 81       	ldd	r23, Z+1	; 0x01
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	8e ce       	rjmp	.-740    	; 0x516 <logger_log>
 7fa:	08 95       	ret

000007fc <node6_init>:
#include <logger.h>

volatile const uint8_t node6_msk = 32;
volatile uint8_t node6_reg = 32;

void node6_init(void *msg, uint8_t msg_size) {
 7fc:	fc 01       	movw	r30, r24
	DDRC |= node6_msk;
 7fe:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <node6_msk>
 802:	97 b1       	in	r25, 0x07	; 7
 804:	98 2b       	or	r25, r24
 806:	97 b9       	out	0x07, r25	; 7
	PORTC = node6_msk | (PORTC & ~node6_msk);
 808:	38 b1       	in	r19, 0x08	; 8
 80a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <node6_msk>
 80e:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <node6_msk>
 812:	90 95       	com	r25
 814:	93 23       	and	r25, r19
 816:	92 2b       	or	r25, r18
 818:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 81a:	60 81       	ld	r22, Z
 81c:	71 81       	ldd	r23, Z+1	; 0x01
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	7a ce       	rjmp	.-780    	; 0x516 <logger_log>
 822:	08 95       	ret

00000824 <node6_receive>:
}

void node6_receive(void *msg, uint8_t msg_size) {
 824:	fc 01       	movw	r30, r24
	node6_reg ^= node6_msk;
 826:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <node6_msk>
 82a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <node6_reg>
 82e:	98 27       	eor	r25, r24
 830:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <node6_reg>
	PORTC = node6_reg | (PORTC & ~node6_msk);
 834:	38 b1       	in	r19, 0x08	; 8
 836:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <node6_msk>
 83a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <node6_reg>
 83e:	90 95       	com	r25
 840:	93 23       	and	r25, r19
 842:	92 2b       	or	r25, r18
 844:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	64 ce       	rjmp	.-824    	; 0x516 <logger_log>
 84e:	08 95       	ret

00000850 <node7_init>:
#include <logger.h>

volatile const uint8_t node7_msk = 64;
volatile uint8_t node7_reg = 64;

void node7_init(void *msg, uint8_t msg_size) {
 850:	fc 01       	movw	r30, r24
	DDRC |= node7_msk;
 852:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <node7_msk>
 856:	97 b1       	in	r25, 0x07	; 7
 858:	98 2b       	or	r25, r24
 85a:	97 b9       	out	0x07, r25	; 7
	PORTC = node7_msk | (PORTC & ~node7_msk);
 85c:	38 b1       	in	r19, 0x08	; 8
 85e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <node7_msk>
 862:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <node7_msk>
 866:	90 95       	com	r25
 868:	93 23       	and	r25, r19
 86a:	92 2b       	or	r25, r18
 86c:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 86e:	60 81       	ld	r22, Z
 870:	71 81       	ldd	r23, Z+1	; 0x01
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	50 ce       	rjmp	.-864    	; 0x516 <logger_log>
 876:	08 95       	ret

00000878 <node7_receive>:
}

void node7_receive(void *msg, uint8_t msg_size) {
 878:	fc 01       	movw	r30, r24
	node7_reg ^= node7_msk;
 87a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <node7_msk>
 87e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <node7_reg>
 882:	98 27       	eor	r25, r24
 884:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <node7_reg>
	PORTC = node7_reg | (PORTC & ~node7_msk);
 888:	38 b1       	in	r19, 0x08	; 8
 88a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <node7_msk>
 88e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <node7_reg>
 892:	90 95       	com	r25
 894:	93 23       	and	r25, r19
 896:	92 2b       	or	r25, r18
 898:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 89a:	60 81       	ld	r22, Z
 89c:	71 81       	ldd	r23, Z+1	; 0x01
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	3a ce       	rjmp	.-908    	; 0x516 <logger_log>
 8a2:	08 95       	ret

000008a4 <node8_init>:
#include <logger.h>

volatile const uint8_t node8_msk = 128;
volatile uint8_t node8_reg = 128;

void node8_init(void *msg, uint8_t msg_size) {
 8a4:	fc 01       	movw	r30, r24
	DDRC |= node8_msk;
 8a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <node8_msk>
 8aa:	97 b1       	in	r25, 0x07	; 7
 8ac:	98 2b       	or	r25, r24
 8ae:	97 b9       	out	0x07, r25	; 7
	PORTC = node8_msk | (PORTC & ~node8_msk);
 8b0:	38 b1       	in	r19, 0x08	; 8
 8b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <node8_msk>
 8b6:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <node8_msk>
 8ba:	90 95       	com	r25
 8bc:	93 23       	and	r25, r19
 8be:	92 2b       	or	r25, r18
 8c0:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 8c2:	60 81       	ld	r22, Z
 8c4:	71 81       	ldd	r23, Z+1	; 0x01
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	26 ce       	rjmp	.-948    	; 0x516 <logger_log>
 8ca:	08 95       	ret

000008cc <node8_receive>:
}

void node8_receive(void *msg, uint8_t msg_size) {
 8cc:	fc 01       	movw	r30, r24
	node8_reg ^= node8_msk;
 8ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <node8_msk>
 8d2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 8d6:	98 27       	eor	r25, r24
 8d8:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTC = node8_reg | (PORTC & ~node8_msk);
 8dc:	38 b1       	in	r19, 0x08	; 8
 8de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <node8_msk>
 8e2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 8e6:	90 95       	com	r25
 8e8:	93 23       	and	r25, r19
 8ea:	92 2b       	or	r25, r18
 8ec:	98 b9       	out	0x08, r25	; 8
	logger_log(LOGGER_LOG_THROTTLE, *((uint16_t *)msg));
 8ee:	60 81       	ld	r22, Z
 8f0:	71 81       	ldd	r23, Z+1	; 0x01
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	10 ce       	rjmp	.-992    	; 0x516 <logger_log>
 8f6:	08 95       	ret

000008f8 <main>:
}

int main(void) {
 8f8:	cf 93       	push	r28
 8fa:	df 93       	push	r29
 8fc:	cd b7       	in	r28, 0x3d	; 61
 8fe:	de b7       	in	r29, 0x3e	; 62
 900:	2d 97       	sbiw	r28, 0x0d	; 13
 902:	0f b6       	in	r0, 0x3f	; 63
 904:	f8 94       	cli
 906:	de bf       	out	0x3e, r29	; 62
 908:	0f be       	out	0x3f, r0	; 63
 90a:	cd bf       	out	0x3d, r28	; 61
	const uint16_t node_init_val = 0x7FFF;
 90c:	8f ef       	ldi	r24, 0xFF	; 255
 90e:	9f e7       	ldi	r25, 0x7F	; 127
 910:	9a 83       	std	Y+2, r25	; 0x02
 912:	89 83       	std	Y+1, r24	; 0x01
	uint16_t can_id;//, adc_val;
	uint8_t can_msg[8], can_msg_size;//, adc_pin;

	// Init SPI and logger
	spi_slave_init();
 914:	25 de       	rcall	.-950    	; 0x560 <spi_slave_init>
	spi_slave_register_txbuffer(logger_init(), LOGGER_LOG_SIZE);
 916:	dd dd       	rcall	.-1094   	; 0x4d2 <logger_init>
 918:	68 e0       	ldi	r22, 0x08	; 8
 91a:	35 de       	rcall	.-918    	; 0x586 <spi_slave_register_txbuffer>
 91c:	88 e2       	ldi	r24, 0x28	; 40
	spi_slave_register_txdone_handler(spi_log_rotate);
 91e:	93 e0       	ldi	r25, 0x03	; 3
 920:	3f de       	rcall	.-898    	; 0x5a0 <spi_slave_register_txdone_handler>
 922:	80 e0       	ldi	r24, 0x00	; 0

	// Init CAN
	can_init(0);
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	d4 db       	rcall	.-2136   	; 0xd0 <can_init>
 928:	88 e0       	ldi	r24, 0x08	; 8
	can_filter(8);
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	3d dc       	rcall	.-1926   	; 0x1a8 <can_filter>
 92e:	80 e1       	ldi	r24, 0x10	; 16
	can_filter(16);
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	3a dc       	rcall	.-1932   	; 0x1a8 <can_filter>
 934:	80 e2       	ldi	r24, 0x20	; 32
	can_filter(32);
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	37 dc       	rcall	.-1938   	; 0x1a8 <can_filter>
 93a:	80 e4       	ldi	r24, 0x40	; 64
	can_filter(64);
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	34 dc       	rcall	.-1944   	; 0x1a8 <can_filter>
 940:	80 e8       	ldi	r24, 0x80	; 128
	can_filter(128);
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	31 dc       	rcall	.-1950   	; 0x1a8 <can_filter>
 946:	80 e0       	ldi	r24, 0x00	; 0
	can_filter(256);
 948:	91 e0       	ldi	r25, 0x01	; 1
 94a:	2e dc       	rcall	.-1956   	; 0x1a8 <can_filter>
 94c:	80 e0       	ldi	r24, 0x00	; 0
	can_filter(512);
 94e:	92 e0       	ldi	r25, 0x02	; 2
 950:	2b dc       	rcall	.-1962   	; 0x1a8 <can_filter>
 952:	80 e0       	ldi	r24, 0x00	; 0
	can_filter(1024);
 954:	94 e0       	ldi	r25, 0x04	; 4
 956:	28 dc       	rcall	.-1968   	; 0x1a8 <can_filter>
 958:	62 e0       	ldi	r22, 0x02	; 2

	// Init nodes
	node1_init((void *)&node_init_val, 2);
 95a:	ce 01       	movw	r24, r28
 95c:	01 96       	adiw	r24, 0x01	; 1
 95e:	7c de       	rcall	.-776    	; 0x658 <node1_init>
 960:	62 e0       	ldi	r22, 0x02	; 2
	node2_init((void *)&node_init_val, 2);
 962:	ce 01       	movw	r24, r28
 964:	01 96       	adiw	r24, 0x01	; 1
 966:	a2 de       	rcall	.-700    	; 0x6ac <node2_init>
 968:	62 e0       	ldi	r22, 0x02	; 2
	node3_init((void *)&node_init_val, 2);
 96a:	ce 01       	movw	r24, r28
 96c:	01 96       	adiw	r24, 0x01	; 1
 96e:	c8 de       	rcall	.-624    	; 0x700 <node3_init>
 970:	62 e0       	ldi	r22, 0x02	; 2
	node4_init((void *)&node_init_val, 2);
 972:	ce 01       	movw	r24, r28
 974:	01 96       	adiw	r24, 0x01	; 1
 976:	ee de       	rcall	.-548    	; 0x754 <node4_init>
 978:	62 e0       	ldi	r22, 0x02	; 2
	node5_init((void *)&node_init_val, 2);
 97a:	ce 01       	movw	r24, r28
 97c:	01 96       	adiw	r24, 0x01	; 1
 97e:	14 df       	rcall	.-472    	; 0x7a8 <node5_init>
 980:	62 e0       	ldi	r22, 0x02	; 2
 982:	ce 01       	movw	r24, r28
	node6_init((void *)&node_init_val, 2);
 984:	01 96       	adiw	r24, 0x01	; 1
 986:	3a df       	rcall	.-396    	; 0x7fc <node6_init>
 988:	62 e0       	ldi	r22, 0x02	; 2
 98a:	ce 01       	movw	r24, r28
	node7_init((void *)&node_init_val, 2);
 98c:	01 96       	adiw	r24, 0x01	; 1
 98e:	60 df       	rcall	.-320    	; 0x850 <node7_init>
 990:	62 e0       	ldi	r22, 0x02	; 2
 992:	ce 01       	movw	r24, r28
 994:	01 96       	adiw	r24, 0x01	; 1
	node8_init((void *)&node_init_val, 2);
 996:	86 df       	rcall	.-244    	; 0x8a4 <node8_init>
 998:	78 94       	sei
 99a:	51 c0       	rjmp	.+162    	; 0xa3e <main+0x146>
 99c:	ae 01       	movw	r20, r28
 99e:	43 5f       	subi	r20, 0xF3	; 243

	// Init ADC
	//adc_init(0xFF);
	
	// Init system
	sei();
 9a0:	5f 4f       	sbci	r21, 0xFF	; 255
 9a2:	be 01       	movw	r22, r28
	// Main loop
	while (1) {

		// Receive and handle node messages.
		while (can_message_available()) {
			can_receive(&can_id, can_msg, &can_msg_size);
 9a4:	6b 5f       	subi	r22, 0xFB	; 251
 9a6:	7f 4f       	sbci	r23, 0xFF	; 255
 9a8:	ce 01       	movw	r24, r28
 9aa:	03 96       	adiw	r24, 0x03	; 3
 9ac:	42 dc       	rcall	.-1916   	; 0x232 <can_receive>
 9ae:	8b 81       	ldd	r24, Y+3	; 0x03
 9b0:	9c 81       	ldd	r25, Y+4	; 0x04
 9b2:	80 34       	cpi	r24, 0x40	; 64
 9b4:	91 05       	cpc	r25, r1
 9b6:	59 f1       	breq	.+86     	; 0xa0e <main+0x116>
			switch (can_id) {
 9b8:	50 f4       	brcc	.+20     	; 0x9ce <main+0xd6>
 9ba:	80 31       	cpi	r24, 0x10	; 16
 9bc:	91 05       	cpc	r25, r1
 9be:	e9 f0       	breq	.+58     	; 0x9fa <main+0x102>
 9c0:	80 32       	cpi	r24, 0x20	; 32
 9c2:	91 05       	cpc	r25, r1
 9c4:	f9 f0       	breq	.+62     	; 0xa04 <main+0x10c>
 9c6:	08 97       	sbiw	r24, 0x08	; 8
 9c8:	09 f0       	breq	.+2      	; 0x9cc <main+0xd4>
 9ca:	39 c0       	rjmp	.+114    	; 0xa3e <main+0x146>
 9cc:	11 c0       	rjmp	.+34     	; 0x9f0 <main+0xf8>
 9ce:	81 15       	cp	r24, r1
 9d0:	21 e0       	ldi	r18, 0x01	; 1
 9d2:	92 07       	cpc	r25, r18
 9d4:	31 f1       	breq	.+76     	; 0xa22 <main+0x12a>
 9d6:	20 f4       	brcc	.+8      	; 0x9e0 <main+0xe8>
 9d8:	80 38       	cpi	r24, 0x80	; 128
 9da:	91 05       	cpc	r25, r1
 9dc:	e9 f0       	breq	.+58     	; 0xa18 <main+0x120>
 9de:	2f c0       	rjmp	.+94     	; 0xa3e <main+0x146>
 9e0:	81 15       	cp	r24, r1
 9e2:	22 e0       	ldi	r18, 0x02	; 2
 9e4:	92 07       	cpc	r25, r18
 9e6:	11 f1       	breq	.+68     	; 0xa2c <main+0x134>
 9e8:	81 15       	cp	r24, r1
 9ea:	94 40       	sbci	r25, 0x04	; 4
 9ec:	21 f1       	breq	.+72     	; 0xa36 <main+0x13e>
 9ee:	27 c0       	rjmp	.+78     	; 0xa3e <main+0x146>
 9f0:	6d 85       	ldd	r22, Y+13	; 0x0d
				case 8:
					node1_receive(&can_msg, can_msg_size);
 9f2:	ce 01       	movw	r24, r28
 9f4:	05 96       	adiw	r24, 0x05	; 5
 9f6:	44 de       	rcall	.-888    	; 0x680 <node1_receive>
 9f8:	22 c0       	rjmp	.+68     	; 0xa3e <main+0x146>
					break;
 9fa:	6d 85       	ldd	r22, Y+13	; 0x0d
				case 16:
					node2_receive(&can_msg, can_msg_size);
 9fc:	ce 01       	movw	r24, r28
 9fe:	05 96       	adiw	r24, 0x05	; 5
 a00:	69 de       	rcall	.-814    	; 0x6d4 <node2_receive>
 a02:	1d c0       	rjmp	.+58     	; 0xa3e <main+0x146>
					break;
				case 32:
					node3_receive(&can_msg, can_msg_size);
 a04:	6d 85       	ldd	r22, Y+13	; 0x0d
 a06:	ce 01       	movw	r24, r28
 a08:	05 96       	adiw	r24, 0x05	; 5
 a0a:	8e de       	rcall	.-740    	; 0x728 <node3_receive>
					break;
				case 64:
					node4_receive(&can_msg, can_msg_size);
 a0c:	18 c0       	rjmp	.+48     	; 0xa3e <main+0x146>
 a0e:	6d 85       	ldd	r22, Y+13	; 0x0d
 a10:	ce 01       	movw	r24, r28
 a12:	05 96       	adiw	r24, 0x05	; 5
 a14:	b3 de       	rcall	.-666    	; 0x77c <node4_receive>
					break;
 a16:	13 c0       	rjmp	.+38     	; 0xa3e <main+0x146>
				case 128:
					node5_receive(&can_msg, can_msg_size);
 a18:	6d 85       	ldd	r22, Y+13	; 0x0d
 a1a:	ce 01       	movw	r24, r28
 a1c:	05 96       	adiw	r24, 0x05	; 5
 a1e:	d8 de       	rcall	.-592    	; 0x7d0 <node5_receive>
 a20:	0e c0       	rjmp	.+28     	; 0xa3e <main+0x146>
					break;
 a22:	6d 85       	ldd	r22, Y+13	; 0x0d
				case 256:
					node6_receive(&can_msg, can_msg_size);
 a24:	ce 01       	movw	r24, r28
 a26:	05 96       	adiw	r24, 0x05	; 5
 a28:	fd de       	rcall	.-518    	; 0x824 <node6_receive>
 a2a:	09 c0       	rjmp	.+18     	; 0xa3e <main+0x146>
 a2c:	6d 85       	ldd	r22, Y+13	; 0x0d
					break;
 a2e:	ce 01       	movw	r24, r28
				case 512:
					node7_receive(&can_msg, can_msg_size);
 a30:	05 96       	adiw	r24, 0x05	; 5
 a32:	22 df       	rcall	.-444    	; 0x878 <node7_receive>
 a34:	04 c0       	rjmp	.+8      	; 0xa3e <main+0x146>
 a36:	6d 85       	ldd	r22, Y+13	; 0x0d
 a38:	ce 01       	movw	r24, r28
					break;
 a3a:	05 96       	adiw	r24, 0x05	; 5
				case 1024:
					node8_receive(&can_msg, can_msg_size);
 a3c:	47 df       	rcall	.-370    	; 0x8cc <node8_receive>
 a3e:	f0 db       	rcall	.-2080   	; 0x220 <can_message_available>
 a40:	81 11       	cpse	r24, r1
 a42:	ac cf       	rjmp	.-168    	; 0x99c <main+0xa4>
 a44:	fc cf       	rjmp	.-8      	; 0xa3e <main+0x146>

00000a46 <_exit>:

	// Main loop
	while (1) {

		// Receive and handle node messages.
		while (can_message_available()) {
 a46:	f8 94       	cli

00000a48 <__stop_program>:
 a48:	ff cf       	rjmp	.-2      	; 0xa48 <__stop_program>
